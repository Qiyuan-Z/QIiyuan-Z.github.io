<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Ubuntu clash配置</title>
    <url>/2020/02/05/Ubuntu-clash%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title=" 1."></a><a id="more"></a> 1.</h2><p>执行 <code>cd &amp;&amp; mkdir clash</code>在用户目录下创建 clash 文件夹，用于存放解压后的文件及配置文件,将下载的压缩文件解压至此，得到一个可执行文件“ clash-linux-amd64 ”。。</p>
<p>一般个人的64位电脑下载 clash-linux-amd64.tar.gz 即可。</p>
<p><a href="https://github.com/Dreamacro/clash/releases" target="_blank" rel="noopener">下载客户端</a><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/clash/windows-cfw-1.png" alt></p>
<h2 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h2><p>在终端中执行该文件<code>sudo ./clash-linux-amd64</code>，提示缺少config.yml配置文件，并自动生成/home/当前用户ID/.config/clash文件夹，其中包含两个文件 config.yml 和 Country.mmdb ，若看不到这文件夹，则按<code>ctrl+H</code>显示隐藏文件。其中 Country.mmdb由于墙的原因下载较慢，这里提供<a href="https://quqi.gblhgk.com/s/2796382/PtRJqrmJaeM9Nh17" target="_blank" rel="noopener">网盘下载</a>，直接拷贝进/home/当前用户ID/.config/clash中。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp Country.mmdb的路径 ~&#x2F;home&#x2F;当前用户ID&#x2F;.config&#x2F;clash</span><br></pre></td></tr></table></figure></p>
<h2 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h2><p>编辑/home/当前用户ID/.config/clash下的 config.yml配置文件，内容为自己的服务器及规则等信息(有些商家会提供相应的yml文件，下载后将内容copy至该文件)，保存更改后复制该文件至先前创建的Clash文件夹(by:这两个文件夹不要弄混，一个是手动建立的，一个是自动创建的，都需要.yml文件)。</p>
<p>在终端 cd 到 Clash 二进制文件所在的目录，执行下载 Clash 配置文件，得到商家提供的服务器及规则等信息<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/clash/linux-clash-2.jpg" alt></p>
<p>将其在/home/当前用户ID/.config/clash下复制一份<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp ~&#x2F;home&#x2F;当前用户ID&#x2F;clash&#x2F;config.yml ~&#x2F;home&#x2F;当前用户ID&#x2F;.config&#x2F;clash</span><br></pre></td></tr></table></figure></p>
<h2 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h2><p>重启终端，执行 <code>sudo ./clash-linux-amd64</code>以加载配置文件</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/clash/linux-clash-3.jpg" alt></p>
<h2 id="5"><a href="#5" class="headerlink" title="5."></a>5.</h2><p>访问 <a href="http://clash.razord.top/" target="_blank" rel="noopener">Clash Dashboard </a> 可以进行切换节点、测延迟等操作。</p>
<p>Host: <code>127.0.0.1</code>，端口: <code>9090</code><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/clash/linux-clash-4.jpg" alt></p>
<h2 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h2><p>以 Ubuntu 19.04 为例，打开系统设置，选择网络，点击网络代理右边的 ⚙ 按钮，选择手动，填写 HTTP 和 HTTPS 代理为 <code>127.0.0.1:7890</code>，填写 Socks 主机为 <code>127.0.0.1:7891</code>，即可启用系统代理。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/clash/linux-clash-5.jpg" alt></p>
<p>若需关掉代理，则<code>ctrl+c</code>停止终端，并在系统代理设置中重新改为无即可。</p>
<h2 id="7"><a href="#7" class="headerlink" title="7."></a>7.</h2><p>若需固定到启动器，则选择合适的图片文件，用作图标，放置于创建的clash文件夹下</p>
<p>使用<code>sudo gedit /usr/share/applications/Clash.desktop</code>在 /usr/share/applications/ 中创建一个文件 Clash.desktop ，步骤及内容如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 以下各项根据自己的情况填写</span><br><span class="line">[Desktop Entry]</span><br><span class="line"> Version&#x3D;0.17.0</span><br><span class="line"> Name&#x3D;Clash</span><br><span class="line"> Comment&#x3D;A rule-based tunnel in Go</span><br><span class="line"> Exec&#x3D;&#x2F;full&#x2F;path&#x2F;to&#x2F;clash-linux</span><br><span class="line"> Icon&#x3D;&#x2F;full&#x2F;path&#x2F;to&#x2F;clash-logo.png</span><br><span class="line"> Terminal&#x3D;false</span><br><span class="line"> Type&#x3D;Application</span><br><span class="line"> Categories&#x3D;Network</span><br></pre></td></tr></table></figure></p>
<p>关键词说明</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Desktop Entry] 文件头</span><br><span class="line">Version    版本</span><br><span class="line">Name    应用名称</span><br><span class="line">Name[xx]    不同语言的应用名称</span><br><span class="line">Comment 注释</span><br><span class="line">Exec    执行文件路径</span><br><span class="line">Icon    图标路径</span><br><span class="line">Terminal    是否使用终端</span><br><span class="line">Type    启动器类型</span><br><span class="line">Categories  应用的类型（内容相关）</span><br></pre></td></tr></table></figure>
<p>上述操作完成后，即可在启动器中看到该应用图标，对其右键单击，选择固定到任务栏，方便以后打开 。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/clash/Snipaste_2020-02-05_23-07-03.jpg" alt></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>华硕路由器刷固件</title>
    <url>/2020/02/03/%E5%8D%8E%E7%A1%95%E8%B7%AF%E7%94%B1%E5%99%A8%E5%88%B7%E5%9B%BA%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title=" 介绍"></a><a id="more"></a> 介绍</h2><p>现在市面上的路由器基本上使用的都是官方的固件，这是因为路由器的设备厂商是为了设备的稳定性着想而出发的，还有就是所谓的刷梅林固件也就是刷第三方的固件，最大的作用可以解封一些功能。对于梅林固件来说，这有一半的性质是属于官方的路由器固件，但是还有一半是可以用户自己来进行设置的，其实梅林固件就是一个华硕路由器的自定义固件，是华硕官方的闭源驱动，因此稳定性要好很多，不支持超频，很少出现死机、卡顿的情况。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/merlin/185417q0zxbdexeze1x1nb.jpg" alt></p>
<p>其最具特色的便是多了软件中心，在里面安装各种各样的插件可以实现各种功能，比如翻墙，去广告，离线下载，双拨等。</p>
<p>并不是所有的路由器都能刷梅林固件，非华硕的路由器需要与华硕某个版本的硬件一致才能刷，以网件和华硕自身的路由器居多。</p>
<p>我手头的路由器为华硕AC86U，华硕刷梅林固件相对简单，风险低，若其他品牌的路由器请去查找相应教程，此教程只适用于华硕品牌。</p>
<h2 id="固件下载"><a href="#固件下载" class="headerlink" title="固件下载"></a>固件下载</h2><p><a href="https://firmware.koolshare.cn/" target="_blank" rel="noopener">Koolshare</a>是路由器刷机的论坛，可以去里面下载固件。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/merlin/Snipaste_2020-02-03_16-18-35.jpg" alt></p>
<p>常用到的为红色框出来的这四个，分别是华硕官改固件、梅林原版固件、梅林改版固件、网件官改固件。</p>
<ul>
<li><p>原厂固件为华硕官方的固件。</p>
</li>
<li><p>原版梅林为国外RMerl大神基于华硕官方固件源代码修改而来的梅林固件。</p>
</li>
<li><p>改版梅林为koolshare开发组基于梅林固件修改而来的带软件中心的梅林改版固件。</p>
</li>
<li><p>官改固件为koolshare开发组基于华硕官方源代码修改而来的带软件中心的官改固件。</p>
</li>
</ul>
<p>这之中常用的为梅林改和官改，相比官改固件，梅林改版固件有更多的功能和bug修复，而官改固件更新较快。好用程度差别不大，稳定性来说也基本无差，选哪个固件基于个人喜好即可。</p>
<p>我用的是梅林改固件，进入文件夹，可以看到可用机型。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/merlin/Snipaste_2020-02-03_16-32-11.jpg" alt></p>
<p>选择对应机型。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/merlin/Snipaste_2020-02-03_16-32-28.jpg" alt></p>
<p>选择最新版本固件下载，固件为.w后缀。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/merlin/Snipaste_2020-02-03_16-32-47.jpg" alt></p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/merlin/Snipaste_2020-02-03_16-32-57.jpg" alt></p>
<h2 id="固件安装"><a href="#固件安装" class="headerlink" title="固件安装"></a>固件安装</h2><ul>
<li>选择【系统管理】-【固件升级】，选择下好的 .w 后缀的固件，上传即可</li>
</ul>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/merlin/k3.png" alt></p>
<ul>
<li>刷机完成后会自动重启，请耐心等待完成</li>
</ul>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/merlin/k4.png" alt></p>
<ul>
<li><p>刷机完成后在【系统管理】–【恢复/导出/上传设置】恢复出厂设置</p>
</li>
<li><p>在【系统管理】–【系统设置】内勾选：Format JFFS partition at next boot 和 Enable JFFS custom scripts and configs 然后点击应用本页面设置，成功后重启路由器；</p>
</li>
</ul>
<p>（注：双清就是指恢复出厂设置 + 格式化jffs分区）</p>
<p>重启后先将路由器连上网络，然后进入软件中心将软件中心更新到最新版本（如果有）。</p>
<h2 id="软件中心"><a href="#软件中心" class="headerlink" title="软件中心"></a>软件中心</h2><p>完成上述工作，梅林固件就装好了，现在你可以进入软件中心未安装，选择合适的插件安装了，插件就不一一介绍，具体可以百度，我常用的是虚拟内存和shadowsocks。</p>
<p>新版软件中心内不提供shadowsocks插件，我这里通过<a href="https://quqi.gblhgk.com/s/2796382/045bYgimCEJLRiCe" target="_blank" rel="noopener">云盘</a>分享，大家可以在【软件中心】-【离线安装】手动安装插件。</p>
<h2 id="后续更新"><a href="#后续更新" class="headerlink" title="后续更新"></a>后续更新</h2><p>按此教程做的，后续更新新版的梅林改时，按B来即可。</p>
<h5 id="A-原厂固件-原版梅林-刷-改版梅林："><a href="#A-原厂固件-原版梅林-刷-改版梅林：" class="headerlink" title="A. 原厂固件/原版梅林 刷 改版梅林："></a>A. 原厂固件/原版梅林 刷 改版梅林：</h5><ol>
<li>在<code>原产固件</code>/<code>原版梅林</code>固件升级页面下直接上传.w 后缀的<code>改版梅林</code>固件文件；</li>
<li>刷机完成后会自动重启，此时刷机完成（刷机完成后可以不恢复出产设置，当然恢复一次更好）；</li>
<li>刷机完成在【系统管理 】–【 系统设置】内勾选：<code>Format JFFS partition at next boot</code> 和 <code>Enable JFFS custom scripts and configs</code> 然后点击<code>应用本页面设置</code>，成功后重启路由器；</li>
<li>重启后先将路由器连上网络，然后进入软件中心将软件中心更新到最新版本（如果有）。</li>
</ol>
<h5 id="B-改版梅林-刷-改版梅林："><a href="#B-改版梅林-刷-改版梅林：" class="headerlink" title="B. 改版梅林 刷 改版梅林："></a>B. 改版梅林 刷 改版梅林：</h5><ol>
<li>刷过<code>改版梅林</code>固件的，在固件升级页面下直接上传.w 后缀的<code>改版梅林</code>文件（如无特殊说明，不需要恢复出产设置）；</li>
<li>刷机后所有已经安装的插件都会被保留，不会受到影响。</li>
</ol>
<h5 id="C-改版梅林-刷-官改固件："><a href="#C-改版梅林-刷-官改固件：" class="headerlink" title="C. 改版梅林 刷 官改固件："></a>C. 改版梅林 刷 官改固件：</h5><ul>
<li>详见：<a href="http://koolshare.cn/thread-139965-1-1.html" target="_blank" rel="noopener">http://koolshare.cn/thread-139965-1-1.html</a></li>
</ul>
<h5 id="D-官改固件-刷-改版梅林："><a href="#D-官改固件-刷-改版梅林：" class="headerlink" title="D. 官改固件 刷 改版梅林："></a>D. 官改固件 刷 改版梅林：</h5><ul>
<li>详见：<a href="http://koolshare.cn/thread-139965-1-1.html" target="_blank" rel="noopener">http://koolshare.cn/thread-139965-1-1.html</a></li>
</ul>
<h5 id="E-改版梅林-刷-原厂固件-梅林原版："><a href="#E-改版梅林-刷-原厂固件-梅林原版：" class="headerlink" title="E. 改版梅林 刷 原厂固件/梅林原版："></a>E. 改版梅林 刷 原厂固件/梅林原版：</h5><ol>
<li>在<code>改版梅林</code>固件升级页面下直接上传.w 后缀的<code>原产固件</code>/<code>梅林原版</code>固件文件，刷机完成后机器会自动重启（刷机后可以不恢复出产设置，当然恢复一次更好）；</li>
<li>刷机完成在【系统管理 】–【 系统设置】内勾选：<code>Format JFFS partition at next boot</code> 和 <code>Enable JFFS custom scripts and configs</code> 然后点击<code>应用本页面设置</code>，成功应用后重启路由器即可，此操作可以清除安装在jffs分区的软件中心和所有插件。</li>
</ol>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>一些百度网盘的破解方法</title>
    <url>/2020/02/02/%E4%B8%80%E4%BA%9B%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9A%84%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="1-网盘助手"><a href="#1-网盘助手" class="headerlink" title=" 1.网盘助手"></a><a id="more"></a> 1.网盘助手</h2><p>由网友”哩呵”制作的<a href="https://greasyfork.org/zh-CN/scripts/378301-%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B" target="_blank" rel="noopener">网盘助手</a>脚本，需要通过拓展 Violentmonkey 或者 Tampermonkey 来启用，原理是通过显示直链，然后使用 IDM 来加速下载<br><strong>使用方法：（下载部分）</strong><br>1、选择要下载的文件，点击页面里的 “生成链接” 来获取加速下载地址。<br>2、使用鼠标右键点击链接（注意是右键点击链接），选择“使用 IDM 下载”，然后确定下载。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/baiduwp/7a6a15d5gy1g8s99l1zdqg20qn0euqa8.gif" alt></p>
<p>也可以配合Aria2 manager扩展，添加右键菜单，将生成的链接“<strong>导出到 ARIA2 RPC</strong>”，由AriaNg下载<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/baiduwp/Snipaste_2020-02-02_20-12-56.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/baiduwp/Snipaste_2020-02-02_20-13-39.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/baiduwp/7a6a15d5gy1g952lk3yu0g20sf0fy469.gif" alt></p>
<h2 id="2-亿寻下载器"><a href="#2-亿寻下载器" class="headerlink" title="2.亿寻下载器"></a>2.亿寻下载器</h2><p>由52破解论坛网友 <a href="https://www.52pojie.cn/thread-959139-1-1.html" target="_blank" rel="noopener">kud</a> 开发，软件发布已经4月有余，下载速度和易用性不输其它工具，使用方法也很简单，可以免登陆下载，这里提供网盘下载：<a href="https://quqi.gblhgk.com/s/2796382/WN4on64IJNvzDDMZ" target="_blank" rel="noopener">下载地址</a><br><strong>使用方法：（下载部分）</strong><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/baiduwp/%E5%88%86%E4%BA%AB%E4%B8%8B%E8%BD%BD%E6%BC%94%E7%A4%BA.gif" alt></p>
<p>注意：</p>
<ol>
<li>当使用 aria2 无法下载时，请尝试使用 saldl 下载。</li>
<li>当下载目录有与将要下载的文件同名的文件时，saldl 不会继续下载。</li>
</ol>
<h2 id="3-Aria2下载助手"><a href="#3-Aria2下载助手" class="headerlink" title="3.Aria2下载助手"></a>3.Aria2下载助手</h2><p>此脚本不仅能用aria下载百度网盘，还能下载b站视频，看b站港澳台，由于曾被人举报，已从脚本网站下架，需自己进入Tempermonkey（最好使用最新版本，该脚本不支持旧版本Tempermonkey）创建。<br>代码如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; &#x3D;&#x3D;UserScript&#x3D;&#x3D;</span><br><span class="line">&#x2F;&#x2F; @namespace zyxubing</span><br><span class="line">&#x2F;&#x2F; @name Aria2下载助手</span><br><span class="line">&#x2F;&#x2F; @version 0.3.16</span><br><span class="line">&#x2F;&#x2F; @downloadURL https:&#x2F;&#x2F;gitee.com&#x2F;zyxubing&#x2F;codes&#x2F;1ru485apywbeg3ni0lxq260&#x2F;raw?blob_name&#x3D;aria2</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;pan.baidu.com&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;yun.baidu.com&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;wallhaven.cc&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;av*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;www.bilibili.com&#x2F;bangumi&#x2F;play&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;live.bilibili.com&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;space.bilibili.com&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;search.bilibili.com&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;nyaa.fun&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;nyaa.si&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;sukebei.nyaa.si&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;nyaa.mlyx.workers.dev&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;acg.rip&#x2F;*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;konachan.com&#x2F;post*</span><br><span class="line">&#x2F;&#x2F; @include https:&#x2F;&#x2F;konachan.net&#x2F;post*</span><br><span class="line">&#x2F;&#x2F; @domain baidu.com</span><br><span class="line">&#x2F;&#x2F; @domain baidupcs.com</span><br><span class="line">&#x2F;&#x2F; @domain bilibili.com</span><br><span class="line">&#x2F;&#x2F; @domain 111.229.137.150</span><br><span class="line">&#x2F;&#x2F; @domain 127.0.0.1</span><br><span class="line">&#x2F;&#x2F; @domain localhost</span><br><span class="line">&#x2F;&#x2F; @domain self</span><br><span class="line">&#x2F;&#x2F; @grant GM_cookie</span><br><span class="line">&#x2F;&#x2F; @grant GM_setClipboard</span><br><span class="line">&#x2F;&#x2F; @grant GM_xmlhttpRequest</span><br><span class="line">&#x2F;&#x2F; @run-at document-idle</span><br><span class="line">&#x2F;&#x2F; &#x3D;&#x3D;&#x2F;UserScript&#x3D;&#x3D;</span><br><span class="line">&#x2F;*</span><br><span class="line">切勿使用此脚本下载私密文件</span><br><span class="line">切勿使用此脚本下载私密文件</span><br><span class="line">切勿使用此脚本下载私密文件</span><br><span class="line"></span><br><span class="line">关于为何要获取用户的cookie信息说明</span><br><span class="line">获取cookie信息后可以不用登录直接进入相应账号的百度网盘。</span><br><span class="line">但这并非为了窥探用户的隐私，因为这样并不能给我带来什么好处。</span><br><span class="line"></span><br><span class="line">其实目的是为了实现资源整合利用，大致上可以理解为当你的账号闲置时可</span><br><span class="line">以为其他人提升下载速度。而当你使用此脚本下载度盘上的资源时，就算你</span><br><span class="line">的账号已经被百度官方拉黑限速，但仍然加速下载。</span><br><span class="line"></span><br><span class="line">如果使用svip账号则建议你使用官方的客户端或者其他工具进行下载。这个</span><br><span class="line">脚本主要是针对非会员账号设计的，对svip账号基本上并无提速效果。</span><br><span class="line"></span><br><span class="line">如果你不想使用这个脚本，可以修改百度网盘的账号密码，这样被拿的</span><br><span class="line">cookie信息就会失效。</span><br><span class="line"></span><br><span class="line">至于代码为何要进行混淆，当然是为了保护。源码裸奔实在太容易凉了，度</span><br><span class="line">盘的工作人员又不是只拿钱不做事的。对于普通用户而言应该没有人需要查</span><br><span class="line">看源代码，把所有细节都整明白弄清楚。</span><br><span class="line"></span><br><span class="line">0.3.16 修复哔哩哔哩批量下载时不能跳过已失效的视频</span><br><span class="line">*&#x2F;</span><br><span class="line">!function()&#123;const ipod&#x3D;&#123;&#125;,u&#x3D;&#123;aria2(e,t&#x3D;&quot;http:&#x2F;&#x2F;127.0.0.1:6800&#x2F;jsonrpc&quot;)&#123;console.log(t,&quot;| task &#x3D;&quot;,e.length);let o&#x3D;[],n&#x3D;&#123;id:u.uid(),method:&quot;system.multicall&quot;,params:[]&#125;;e.forEach(e&#x3D;&gt;&#123;let t&#x3D;&#123;&#125;,i&#x3D;&#123;methodName:&quot;aria2.addUri&quot;,params:[]&#125;;e.header&amp;&amp;(t[&quot;use-head&quot;]&#x3D;&quot;true&quot;,t.header&#x3D;e.header),t.split&#x3D;e.pi?e.pi:&quot;&quot;+e.url.length;e.dir&amp;&amp;(t.dir&#x3D;e.dir),t.out&#x3D;e.path?e.path.replace(&#x2F;\s+\&#x2F;\s+&#x2F;g,&quot;&#x2F;&quot;):e.extype?n.id+e.extype:&quot;&quot;;ipod.aria2.token&amp;&amp;i.params.push(&quot;token:&quot;+ipod.aria2.token),i.params.push(e.url);i.params.push(t),o.push(i)&#125;),n.params.push(o);GM_xmlhttpRequest(&#123;url:t,method:&quot;POST&quot;,data:JSON.stringify(n),onerror(e)&#123;console.log(&quot;error&quot;,e.finalUrl),alert(&quot;\u8fde\u63a5aria2\u5931\u8d25 \u8bf7\u68c0\u67e5aria2\u662f\u5426\u8fd0\u884c\u6216jsonrpc\u662f\u5426\u586b\u5199\u9519\u8bef&quot;)&#125;,onload(e)&#123;console.log(JSON.parse(e.responseText))&#125;&#125;)&#125;,now:()&#x3D;&gt;(new Date).getTime(),uid:()&#x3D;&gt;u.now().toString(36),zdom(e&#x3D;0)&#123;let t&#x3D;window.event;return t.preventDefault(),t.stopPropagation(),e?t.target:t.currentTarget&#125;,zform(e,t)&#123;document.querySelectorAll(e).forEach(e&#x3D;&gt;&#123;let o&#x3D;e.getAttribute(&quot;name&quot;);if(t.hasOwnProperty(o))switch(e.getAttribute(&quot;type&quot;))&#123;case&quot;radio&quot;:t[o].includes(e.value)&amp;&amp;(e.checked&#x3D;!0);break;case&quot;checkbox&quot;:t[o]&amp;&amp;(e.checked&#x3D;!0);break;default:e.value&#x3D;t[o]&#125;&#125;)&#125;,load(e)&#123;let t&#x3D;u.now(),o&#x3D;JSON.parse(localStorage.getItem(e));return Object.prototype.isPrototypeOf(o)&amp;&amp;(0&#x3D;&#x3D;o.expire||o.expir&gt;t)?o.data:null&#125;,save(e,t,o&#x3D;0)&#123;let n&#x3D;u.now();localStorage.setItem(e,JSON.stringify(&#123;data:t,expire:o?216e5*o+n:0&#125;))&#125;,serialize(e,t)&#123;let o,n,i&#x3D;[];switch(typeof e)&#123;case&quot;object&quot;:if(&quot;[object Array]&quot;&#x3D;&#x3D;(n&#x3D;Object.prototype.toString.call(e))||&quot;[object Object]&quot;&#x3D;&#x3D;n)for(o in e)Object.prototype.hasOwnProperty.call(e,o)&amp;&amp;i.push(u.serialize(e[o],t?t+&quot;[&quot;+o+&quot;]&quot;:o));return 0&#x3D;&#x3D;i.length?&quot;&quot;:i.join(&quot;&amp;&quot;);default:return t+&quot;&#x3D;&quot;+encodeURIComponent(&quot;&quot;+e)&#125;&#125;,strcut(e,t,o)&#123;let n,i,r&#x3D;&quot;&quot;;if(e&amp;&amp;e.includes(t))&#123;n&#x3D;e.indexOf(t)+t.length,-1&#x3D;&#x3D;(i&#x3D;e.indexOf(o,n))&amp;&amp;(i&#x3D;e.length);r&#x3D;e.substring(n,i)&#125;return r&#125;,sprintf(e)&#123;let t,o,n;if(o&#x3D;&quot;string&quot;&#x3D;&#x3D;typeof e?e:&quot;&quot;)for(t&#x3D;arguments.length-1;t&gt;0;t--)n&#x3D;RegExp(&quot;%&quot;+t,&quot;ig&quot;),o&#x3D;o.replace(n,arguments[t]);return o&#125;,download(e)&#123;if(e)&#123;let t&#x3D;[],o&#x3D;Object.assign(ipod.aria2);o.url&#x3D;[],e&#x3D;e.startsWith(&quot;magnet:&quot;)?u.magnet(e):e.startsWith(&quot;http&quot;)?e:e.startsWith(&quot;&#x2F;&#x2F;&quot;)?location.protocol+e:e.startsWith(&quot;&#x2F;&quot;)?location.origin+e:location.origin+&quot;&#x2F;&quot;+e;o.url.push(e),t.push(o);u.aria2(t,ipod.aria2.jsonrpc)&#125;&#125;,magnet(e)&#123;let t&#x3D;e.indexOf(&quot;&amp;&quot;);return-1&#x3D;&#x3D;t?e:e.substring(0,t)&#125;,history(e)&#123;const t&#x3D;history[e];return function()&#123;let o&#x3D;new Event(e);return o.arguments&#x3D;arguments,window.dispatchEvent(o),t.apply(this,arguments)&#125;&#125;&#125;;async function e(e)&#123;if(0&#x3D;&#x3D;ipod.task)&#123;ipod.list&#x3D;[],ipod.task&#x3D;setInterval(()&#x3D;&gt;&#123;if(ipod.len&#x3D;&#x3D;ipod.list.length)&#123;clearInterval(ipod.task),ipod.task&#x3D;0;&quot;video&quot;&#x3D;&#x3D;ipod.type&amp;&amp;ipod.aria2.cover&amp;&amp;y(1&#x3D;&#x3D;ipod.count&amp;&amp;1&#x3D;&#x3D;ipod.len?0:1),u.aria2(ipod.list,ipod.aria2.jsonrpc);ipod.adom&amp;&amp;ipod.adom.removeAttribute(&quot;style&quot;)&#125;&#125;,1e3);let t&#x3D;&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;player&#x2F;pagelist?aid&#x3D;&quot;+e,o&#x3D;await fetch(t).then(e&#x3D;&gt;e.json()).then(e&#x3D;&gt;0&#x3D;&#x3D;e.code?e.data[0].cid:0);if(0&#x3D;&#x3D;o)clearInterval(ipod.task),ipod.task&#x3D;0;else&#123;t&#x3D;u.sprintf(&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;web-interface&#x2F;view?aid&#x3D;%1&amp;cid&#x3D;%2&quot;,e,o);let n&#x3D;await fetch(t).then(e&#x3D;&gt;e.json()).then(t&#x3D;&gt;&#123;let o&#x3D;[];if(0&#x3D;&#x3D;t.code)&#123;o&#x3D;t.data.pages,ipod.type&#x3D;&quot;video&quot;;ipod.url&#x3D;&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;player&#x2F;playurl?avid&#x3D;%1&amp;cid&#x3D;%2&amp;qn&#x3D;116&quot;,ipod.aid&#x3D;e;ipod.title&#x3D;t.data.title,ipod.cover&#x3D;t.data.pic&#125;return o&#125;);ipod.count&#x3D;ipod.len&#x3D;n.length,g(n)&#125;&#125;&#125;async function t(e)&#123;let t,o,n&#x3D;&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;av&quot;+e.aid,i&#x3D;u.strcut(document.cookie,&quot;bili_jct&#x3D;&quot;,&quot;;&quot;),r&#x3D;&#123;&quot;Content-Type&quot;:&quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;&#125;;o&#x3D;&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;report&#x2F;click&#x2F;now&quot;,t&#x3D;await fetch(o,&#123;referrer:n,method:&quot;GET&quot;&#125;).then(e&#x3D;&gt;e.json()).then(e&#x3D;&gt;e.data.now);o&#x3D;&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;report&#x2F;click&#x2F;web&#x2F;h5&quot;,await fetch(o,&#123;headers:r,referrer:n,body:u.serialize(&#123;aid:e.aid,cid:e.cid,part:e.part,mid:e.mid,lv:0,ftime:e.created,stime:t,jsonp:&quot;jsonp&quot;,type:3,sub_type:0&#125;),method:&quot;POST&quot;,mode:&quot;cors&quot;,credentials:&quot;include&quot;&#125;);o&#x3D;&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;report&#x2F;web&#x2F;heartbeat&quot;,await fetch(o,&#123;headers:r,referrer:n,body:u.serialize(&#123;aid:e.aid,cid:e.cid,mid:e.mid,csrf:i,played_time:0,realtime:0,start_ts:t,type:3,dt:2,play_type:1&#125;),method:&quot;POST&quot;,mode:&quot;cors&quot;,credentials:&quot;include&quot;&#125;);await fetch(o,&#123;headers:r,referrer:n,body:u.serialize(&#123;aid:e.aid,cid:e.cid,mid:e.mid,csrf:i,played_time:e.duration,realtime:e.duration,start_ts:t,type:3,dt:2,play_type:0&#125;),method:&quot;POST&quot;,mode:&quot;cors&quot;,credentials:&quot;include&quot;&#125;),await fetch(o,&#123;headers:r,referrer:n,body:u.serialize(&#123;aid:e.aid,cid:e.cid,mid:e.mid,csrf:i,played_time:-1,realtime:e.len,start_ts:t,type:3,dt:2,play_type:4&#125;),method:&quot;POST&quot;,mode:&quot;cors&quot;,credentials:&quot;include&quot;&#125;);o&#x3D;&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;v2&#x2F;history&#x2F;delete&quot;,await fetch(o,&#123;headers:r,referrer:&quot;https:&#x2F;&#x2F;www.bilibili.com&#x2F;account&#x2F;history&quot;,body:u.serialize(&#123;kid:&quot;archive_&quot;+e.aid,jsonp:&quot;jsonp&quot;,csrf:i&#125;),method:&quot;POST&quot;,mode:&quot;cors&quot;,credentials:&quot;include&quot;&#125;);2&gt;Math.floor(10*e.like&#x2F;e.view)&amp;&amp;(o&#x3D;&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;web-interface&#x2F;archive&#x2F;has&#x2F;like?aid&#x3D;&quot;+e.aid,await fetch(o,&#123;referrer:n,method:&quot;GET&quot;,mode:&quot;cors&quot;,credentials:&quot;include&quot;&#125;).then(e&#x3D;&gt;e.json()).then(t&#x3D;&gt;&#123;0&#x3D;&#x3D;t.code&amp;&amp;0&#x3D;&#x3D;t.data&amp;&amp;fetch(&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;web-interface&#x2F;archive&#x2F;like&quot;,&#123;headers:r,referrer:n,body:u.serialize(&#123;aid:e.aid,like:1,csrf:i&#125;),method:&quot;POST&quot;,mode:&quot;cors&quot;,credentials:&quot;include&quot;&#125;)&#125;))&#125;function o()&#123;setTimeout(n,2e3)&#125;function n()&#123;let e,t;document.querySelector(&quot;ul.nav.navbar-nav&quot;).insertAdjacentHTML(&quot;afterbegin&quot;,&#39;&lt;li&gt;&lt;a id&#x3D;&quot;czyset&quot;&gt;Aria2\u8bbe\u7f6e&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;),document.querySelector(&quot;#czyset&quot;).addEventListener(&quot;click&quot;,()&#x3D;&gt;&#123;u.zdom(),A()&#125;,!1);(t&#x3D;document.querySelector(&quot;#bangumi-box&quot;))&amp;&amp;t.remove(),(t&#x3D;document.querySelector(&quot;div.footer&quot;))&amp;&amp;t.remove();(e&#x3D;document.querySelectorAll(&quot;i.fa.fa-download&quot;)).forEach(e&#x3D;&gt;&#123;e.addEventListener(&quot;click&quot;,()&#x3D;&gt;&#123;let e&#x3D;u.zdom(),t&#x3D;&#123;dir:ipod.aria2.dir,pi:&quot;1&quot;,url:[]&#125;;t.url.push(location.origin+e.parentElement.getAttribute(&quot;href&quot;)),u.aria2([t],ipod.aria2.jsonrpc)&#125;)&#125;)&#125;function i()&#123;let e&#x3D;[],t&#x3D;u.zdom(),o&#x3D;&#123;dir:ipod.aria2.dir,pi:1,url:[]&#125;;console.clear(),o.url.push(u.magnet(t.getAttribute(&quot;data-url&quot;)));e.push(o),u.aria2(e,ipod.aria2.jsonrpc)&#125;function r()&#123;return u.strcut(decodeURIComponent(location.hash),&quot;path&#x3D;&quot;,&quot;&amp;&quot;)&#125;function a(e)&#123;let t&#x3D;[],o&#x3D;&#123;timestamp:yunData.timestamp,uk:yunData.MYUK,dir:e&#125;;return e&amp;&amp;$.ajax(&#123;async:!1,method:&quot;GET&quot;,dataType:&quot;json&quot;,url:location.origin+&quot;&#x2F;api&#x2F;list&quot;,data:o,success(e)&#123;t&#x3D;0&#x3D;&#x3D;e.errno?e.list:[]&#125;&#125;),t&#125;function c()&#123;ipod.surl.length&amp;&amp;$.ajax(&#123;async:!1,url:&quot;https:&#x2F;&#x2F;pan.baidu.com&#x2F;share&#x2F;cancel&quot;,method:&quot;POST&quot;,data:&quot;shareid_list&#x3D;%5B&quot;+ipod.shareid+&quot;%5D&quot;&#125;)&#125;function l()&#123;let e,t&#x3D;0,o&#x3D;[&quot;User-Agent: netdisk&quot;,&quot;Cookie: &quot;+ipod.cookie];function n()&#123;u.aria2(e,ipod.aria2.jsonrpc),ipod.btn.setAttribute(&quot;class&quot;,&quot;ion-download&quot;)&#125;e&#x3D;(()&#x3D;&gt;&#123;let e&#x3D;[],t&#x3D;a(r());return console.clear(),console.log(&quot;fileList &#x3D;&quot;,t.length),$(&quot;dd.g-clearfix&quot;).each((o,n)&#x3D;&gt;&#123;if(3&#x3D;&#x3D;n.getAttribute(&quot;class&quot;).replace(&quot; open-enable&quot;,&quot;&quot;).trim().split(&quot; &quot;).length)&#123;let o&#x3D;decodeURIComponent($(n).find(&quot;a&quot;).first().text());t.forEach(t&#x3D;&gt;&#123;o&#x3D;&#x3D;t.server_filename&amp;&amp;(t.isdir?e&#x3D;e.concat(function e(t)&#123;let o,n&#x3D;&#123;timestamp:yunData.timestamp,uk:yunData.MYUK,dir:t&#125;;return $.ajax(&#123;async:!1,method:&quot;GET&quot;,dataType:&quot;json&quot;,url:location.origin+&quot;&#x2F;api&#x2F;list&quot;,data:n,success(t)&#123;(o&#x3D;0&#x3D;&#x3D;t.errno?t.list:[]).forEach(t&#x3D;&gt;&#123;t.isdir&amp;&amp;(o&#x3D;o.concat(e(t.path)))&#125;)&#125;&#125;),o&#125;(t.path)):e.push(t))&#125;)&#125;&#125;),t&#x3D;[],e.forEach(e&#x3D;&gt;&#123;if(!e.isdir)&#123;void 0&#x3D;&#x3D;e.thumbs||delete e.thumbs,e.url&#x3D;[];e.pi&#x3D;&quot;16&quot;,t.push(e)&#125;&#125;),console.log(&quot;selectedList &#x3D;&quot;,t.length),t&#125;)().map(e&#x3D;&gt;(e.header&#x3D;o,e.pi&#x3D;&quot;16&quot;,e.url.push(&quot;http:&#x2F;&#x2F;pcs.baidu.com&#x2F;rest&#x2F;2.0&#x2F;pcs&#x2F;file?app_id&#x3D;250528&amp;method&#x3D;download&amp;path&#x3D;&quot;+encodeURIComponent(e.path)),e)),GM_xmlhttpRequest(&#123;url:&quot;https:&#x2F;&#x2F;pan.baidu.com&#x2F;rest&#x2F;2.0&#x2F;xpan&#x2F;nas?method&#x3D;uinfo&quot;,method:&quot;GET&quot;,responseType:&quot;json&quot;,error:n,onload(o)&#123;let i&#x3D;o.response;0&#x3D;&#x3D;i.errno?2&#x3D;&#x3D;i.vip_type?n():6&gt;e.length?function o()&#123;if(t&#x3D;&#x3D;e.length)n();else&#123;let n&#x3D;e[t];(e&#x3D;&gt;&#123;let t&#x3D;&#123;schannel:0,channel_list:&quot;[]&quot;,period:1,fid_list:JSON.stringify(e)&#125;;ipod.shareid&#x3D;0,ipod.surl&#x3D;&quot;&quot;;e.length&amp;&amp;$.ajax(&#123;async:!1,url:&quot;https:&#x2F;&#x2F;pan.baidu.com&#x2F;share&#x2F;set&quot;,method:&quot;POST&quot;,data:u.serialize(t),success(e)&#123;0&#x3D;&#x3D;e.errno&amp;&amp;(ipod.shareid&#x3D;e.shareid,ipod.surl&#x3D;e.link.substring(25))&#125;&#125;)&#125;)([n.fs_id]),ipod.surl?GM_xmlhttpRequest(&#123;method:&quot;POST&quot;,url:&quot;http:&#x2F;&#x2F;111.229.137.150&#x2F;img&#x2F;baiduyun.php&quot;,data:u.serialize(&#123;ctime:&quot;20200112&quot;,mode:ipod.mode,cookie:ipod.cookie,fid:n.fs_id,file:&quot;&#x2F;&quot;+n.server_filename,shareid:ipod.shareid,surl:ipod.surl,uid:yunData.MYUK&#125;),headers:&#123;&quot;Content-type&quot;:&quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;&#125;,error()&#123;console.log(&quot;error link &#x3D;&quot;,++t),c();e.length&gt;t&amp;&amp;o()&#125;,onload(e)&#123;console.log(&quot;success link &#x3D;&quot;,++t);let i&#x3D;JSON.parse(e.responseText);0&#x3D;&#x3D;i.error&amp;&amp;(n.header&#x3D;ipod.header,n.url&#x3D;i.url.slice()),c();o()&#125;&#125;):(console.log(&quot;fail &#x3D;&quot;,++t),o())&#125;&#125;():(ipod.btn.setAttribute(&quot;class&quot;,&quot;ion-download&quot;),alert(&quot;\u52fe\u9009\u7684\u6587\u4ef6\u6570\u91cf\u8fc7\u591a \u8bf7\u5206\u6279\u6b21\u4e0b\u8f7d&quot;)):n()&#125;&#125;)&#125;function f()&#123;let e&#x3D;!0,o&#x3D;Math.floor(u.now()&#x2F;1e3);if(ipod.vlistlen&#x3D;0,ipod.vlist&#x3D;[],&quot;www.bilibili.com&quot;&#x3D;&#x3D;location.host)&#123;e&#x3D;!1,location.pathname.startsWith(&quot;&#x2F;video&#x2F;&quot;)&amp;&amp;(e&#x3D;!0);location.pathname.startsWith(&quot;&#x2F;bangumi&#x2F;play&#x2F;&quot;)&amp;&amp;(e&#x3D;!0)&#125;if(e&amp;&amp;o&gt;parseInt(localStorage.getItem(&quot;zlog&quot;)||0,10))&#123;localStorage.setItem(&quot;zlog&quot;,o+1800);let e&#x3D;setInterval(()&#x3D;&gt;&#123;ipod.vlistlen&#x3D;&#x3D;ipod.vlist.length&amp;&amp;(clearInterval(e),ipod.vlist.length&amp;&amp;ipod.vlist.forEach(t))&#125;,2e3);(()&#x3D;&gt;&#123;let e&#x3D;9,t&#x3D;0,o&#x3D;[],n&#x3D;setInterval(()&#x3D;&gt;&#123;if(e&#x3D;&#x3D;t)&#123;clearInterval(n),ipod.vlistlen&#x3D;o.length;o.forEach(s)&#125;&#125;,1e3);GM_xmlhttpRequest(&#123;url:&quot;http:&#x2F;&#x2F;111.229.137.150&#x2F;img&#x2F;bluid.php&quot;,method:&quot;GET&quot;,responseType:&quot;json&quot;,onload(n)&#123;let i&#x3D;n.response;e&#x3D;i.list.length,i.list.forEach(e&#x3D;&gt;&#123;GM_xmlhttpRequest(&#123;url:u.sprintf(&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;space&#x2F;arc&#x2F;search?mid&#x3D;%1&amp;ps&#x3D;30&amp;tid&#x3D;0&amp;pn&#x3D;1&amp;keyword&#x3D;&amp;order&#x3D;pubdate&quot;,e),method:&quot;GET&quot;,responseType:&quot;json&quot;,onload(e)&#123;t++,o&#x3D;o.concat(e.response.data.list.vlist)&#125;&#125;)&#125;)&#125;&#125;)&#125;)()&#125;&#125;function s(e)&#123;let t,o;GM_xmlhttpRequest(&#123;url:&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;web-interface&#x2F;archive&#x2F;stat?aid&#x3D;&quot;+e.aid,method:&quot;GET&quot;,responseType:&quot;json&quot;,onload(n)&#123;let i,r&#x3D;n.response;0&#x3D;&#x3D;r.code?(o&#x3D;&#123;aid:e.aid,created:e.created,mid:e.mid,title:e.title,view:(i&#x3D;r.data).view,danmaku:i.danmaku,favorite:i.favorite,coin:i.coin,share:i.share,like:i.like&#125;,GM_xmlhttpRequest(&#123;url:&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;player&#x2F;pagelist?aid&#x3D;&quot;+e.aid,method:&quot;GET&quot;,responseType:&quot;json&quot;,onload(e)&#123;let n,i&#x3D;e.response;if(0&#x3D;&#x3D;i.code)&#123;(t&#x3D;15*Math.floor((n&#x3D;i.data[0]).duration&#x2F;15))&#x3D;&#x3D;n.duration&amp;&amp;(t-&#x3D;15),o.duration&#x3D;t;o.cid&#x3D;n.cid,o.len&#x3D;n.duration;o.part&#x3D;n.part,ipod.vlist.push(o)&#125;else ipod.vlistlen--&#125;&#125;)):ipod.vlistlen--&#125;&#125;)&#125;function d()&#123;ipod.task&#x3D;setInterval(()&#x3D;&gt;&#123;if(&quot;function&quot;&#x3D;&#x3D;typeof jQuery&amp;&amp;document.querySelector(&quot;ul.video-list&quot;))&#123;clearInterval(ipod.task),ipod.task&#x3D;0;$(&quot;ul.video-list&quot;).on(&quot;click&quot;,()&#x3D;&gt;&#123;if(window.event.altKey)&#123;ipod.adom&#x3D;u.zdom(1);while(&quot;li&quot;!&#x3D;ipod.adom.tagName.toLowerCase())ipod.adom&#x3D;ipod.adom.parentElement;ipod.adom.setAttribute(&quot;style&quot;,&quot;visibility: hidden&quot;),e(ipod.adom.children[0].getAttribute(&quot;href&quot;).match(&#x2F;av(\d+)&#x2F;)[1])&#125;&#125;)&#125;&#125;,1e3)&#125;function b()&#123;setTimeout(()&#x3D;&gt;&#123;location.pathname.endsWith(&quot;&#x2F;favlist&quot;)&amp;&amp;(ipod.task&#x3D;setInterval(()&#x3D;&gt;&#123;if(document.querySelector(&quot;ul.fav-video-list&quot;)&amp;&amp;(clearInterval(ipod.task),ipod.task&#x3D;0,!document.querySelector(&quot;#zydl&quot;)))&#123;$(&quot;div.fav-filters&quot;).prepend(&#39;&lt;div class&#x3D;&quot;filter-item&quot;&gt;&lt;span id&#x3D;&quot;zydl&quot; class&#x3D;&quot;text&quot;&gt;&lt;i class&#x3D;&quot;ion-download&quot;&gt;&lt;&#x2F;i&gt; \u5168\u90e8\u4e0b\u8f7d&lt;&#x2F;span&gt;&lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;filter-item&quot;&gt;&lt;span id&#x3D;&quot;czyset&quot; class&#x3D;&quot;text&quot;&gt;&lt;i class&#x3D;&quot;ion-settings&quot;&gt;&lt;&#x2F;i&gt; Aria2\u8bbe\u7f6e&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;),$(&quot;#zydl&quot;).on(&quot;click&quot;,v);$(&quot;#czyset&quot;).on(&quot;click&quot;,A),$(&quot;ul.fav-video-list&quot;).on(&quot;click&quot;,w)&#125;&#125;,1e3)),location.pathname.endsWith(&quot;&#x2F;video&quot;)&amp;&amp;(ipod.task&#x3D;setInterval(()&#x3D;&gt;&#123;if(document.querySelector(&quot;ul.cube-list&quot;)&amp;&amp;(clearInterval(ipod.task),ipod.task&#x3D;0,!document.querySelector(&quot;#zydl&quot;)))&#123;$(&quot;ul.be-tab-inner&quot;).append(&#39;&lt;li id&#x3D;&quot;zydl&quot; class&#x3D;&quot;be-tab-item&quot;&gt;&lt;span&gt;&lt;i class&#x3D;&quot;ion-download&quot;&gt;&lt;&#x2F;i&gt; \u5168\u90e8\u4e0b\u8f7d&lt;&#x2F;span&gt;&lt;&#x2F;li&gt; &lt;li id&#x3D;&quot;czyset&quot; class&#x3D;&quot;be-tab-item&quot;&gt;&lt;span&gt;&lt;i class&#x3D;&quot;ion-settings&quot;&gt;&lt;&#x2F;i&gt; Aria2\u8bbe\u7f6e&lt;&#x2F;span&gt;&lt;&#x2F;li&gt;&#39;),$(&quot;#zydl&quot;).on(&quot;click&quot;,v);$(&quot;#czyset&quot;).on(&quot;click&quot;,A),$(&quot;ul.cube-list&quot;).on(&quot;click&quot;,w)&#125;&#125;,1e3))&#125;,1e3)&#125;function p()&#123;let e&#x3D;setInterval(()&#x3D;&gt;&#123;let t&#x3D;document.querySelector(&quot;input.bui-checkbox&quot;);t&amp;&amp;(clearInterval(e),t.checked&amp;&amp;t.click())&#125;,3e3)&#125;function m()&#123;fetch(u.sprintf(ipod.url,ipod.aid,ipod.cid)).then(e&#x3D;&gt;e.json()).then(e&#x3D;&gt;&#123;if(0&#x3D;&#x3D;e.code)&#123;let t,o&#x3D;[];f(),e.durl.forEach(e&#x3D;&gt;&#123;t&#x3D;&#123;duration:e.length,filesize:e.size,url:e.url.replace(&quot;http:&quot;,&quot;https:&quot;)&#125;,o.push(t)&#125;);((e,t)&#x3D;&gt;&#123;if(flvjs.isSupported())&#123;if(j)&#123;j.unload(),j.detachMediaElement();j.destroy()&#125;if(j&#x3D;flvjs.createPlayer(&#123;cors:!0,type:e,segments:t&#125;))&#123;j.attachMediaElement(document.querySelector(&quot;#bplayer&quot;)),j.load();j.play()&#125;&#125;&#125;)(e.format,o)&#125;else alert(&quot;\u4ee3\u7406\u670d\u52a1\u5668\u4e0a\u6ca1\u6709\u5927\u4f1a\u5458\u8d26\u53f7\u8fdb\u884c\u89e3\u6790\u64ad\u653e\u5730\u5740&quot;)&#125;)&#125;function h()&#123;let e&#x3D;u.zdom();ipod.aid&#x3D;e.getAttribute(&quot;data-aid&quot;),ipod.cid&#x3D;e.getAttribute(&quot;data-cid&quot;);m()&#125;function y(e)&#123;ipod.len++;let t&#x3D;&#123;dir:ipod.aria2.video,folder:e?ipod.aid:&quot;&quot;,file:ipod.aid+&quot;.jpg&quot;,url:[ipod.cover]&#125;;t.path&#x3D;t.folder?t.folder+&quot;&#x2F;&quot;+t.file:t.file,ipod.list.push(t)&#125;function v()&#123;console.clear();let t&#x3D;document.querySelector(&quot;ul.cube-list&quot;)?document.querySelectorAll(&quot;ul.cube-list&gt;li&quot;):document.querySelector(&quot;ul.fav-video-list&quot;)?document.querySelectorAll(&quot;ul.fav-video-list&gt;li&quot;):[],o&#x3D;t.length,n&#x3D;0,i&#x3D;setInterval(()&#x3D;&gt;&#123;n&#x3D;&#x3D;o?(clearInterval(i),document.querySelector(&quot;#zydl&gt;i&quot;).setAttribute(&quot;class&quot;,&quot;ion-download&quot;)):0&#x3D;&#x3D;ipod.task&amp;&amp;(e(t[n].getAttribute(&quot;data-aid&quot;)),n++)&#125;,2e3);document.querySelector(&quot;#zydl&gt;i&quot;).setAttribute(&quot;class&quot;,&quot;ion-refresh spinner&quot;)&#125;function g(e)&#123;e.forEach(e&#x3D;&gt;&#123;fetch(u.sprintf(ipod.url,ipod.aid,e.cid),&#123;method:&quot;GET&quot;,mode:&quot;cors&quot;,credentials:&quot;include&quot;&#125;).then(e&#x3D;&gt;e.json()).then(t&#x3D;&gt;&#123;if(0&#x3D;&#x3D;t.code)&#123;let o&#x3D;t.data.durl,n&#x3D;o.length;ipod.len+&#x3D;n-1,o.forEach(t&#x3D;&gt;&#123;let o&#x3D;&#123;url:[],pi:&quot;8&quot;,header:ipod.header,dir:ipod.aria2.video&#125;;Array.isArray(t.backup_url)&amp;&amp;(o.url&#x3D;t.backup_url),o.url.push(t.url);o.folder&#x3D;1&#x3D;&#x3D;ipod.count&amp;&amp;1&#x3D;&#x3D;n?&quot;&quot;:ipod.aid,o.file&#x3D;1&#x3D;&#x3D;ipod.count?1&#x3D;&#x3D;n?ipod.aid+&quot;.flv&quot;:z(t.order)+&quot;.flv&quot;:1&#x3D;&#x3D;n?z(e.page)+&quot; &quot;+e.part+&quot;.flv&quot;:z(e.page)+&quot; &quot;+e.part+&quot; &quot;+z(t.order)+&quot;.flv&quot;;o.path&#x3D;o.folder?o.folder+&quot;&#x2F;&quot;+o.file:o.file,ipod.list.push(o)&#125;)&#125;else ipod.len--&#125;)&#125;)&#125;function w()&#123;if(window.event.altKey)&#123;ipod.adom&#x3D;u.zdom(1);while(&quot;li&quot;!&#x3D;ipod.adom.tagName.toLowerCase())ipod.adom&#x3D;ipod.adom.parentElement;ipod.adom.setAttribute(&quot;style&quot;,&quot;visibility: hidden&quot;),e(ipod.adom.getAttribute(&quot;data-aid&quot;))&#125;&#125;function k(e)&#123;e.forEach(e&#x3D;&gt;&#123;fetch(u.sprintf(ipod.url,ipod.aid,e.cid),&#123;method:&quot;GET&quot;,mode:&quot;cors&quot;,credentials:&quot;include&quot;&#125;).then(e&#x3D;&gt;e.json()).then(t&#x3D;&gt;&#123;if(0&#x3D;&#x3D;t.code)&#123;let o&#x3D;ipod.area?t.durl:t.result.durl,n&#x3D;o.length;ipod.len+&#x3D;n-1,o.forEach(t&#x3D;&gt;&#123;let o&#x3D;&#123;url:[],header:ipod.header,dir:ipod.aria2.anime&#125;;Array.isArray(t.backup_url)&amp;&amp;(o.url&#x3D;t.backup_url),o.url.push(t.url);o.folder&#x3D;1&#x3D;&#x3D;ipod.count&amp;&amp;1&#x3D;&#x3D;n?&quot;&quot;:ipod.title,o.file&#x3D;1&#x3D;&#x3D;ipod.count?1&#x3D;&#x3D;n?ipod.title+&quot;.flv&quot;:z(t.order)+&quot;.flv&quot;:1&#x3D;&#x3D;n?z(e.title)+&quot; &quot;+e.longTitle+&quot;.flv&quot;:z(e.title)+&quot; &quot;+e.longTitle+&quot; &quot;+z(t.order)+&quot;.flv&quot;;o.path&#x3D;o.folder?o.folder+&quot;&#x2F;&quot;+o.file:o.file,ipod.list.push(o)&#125;)&#125;else ipod.len--&#125;)&#125;)&#125;function x()&#123;$(&quot;#zylist li&quot;).on(&quot;click&quot;,()&#x3D;&gt;&#123;let e&#x3D;u.zdom();$(e).toggleClass(&quot;on&quot;)&#125;),$(&quot;#zylist button&quot;).on(&quot;click&quot;,()&#x3D;&gt;&#123;switch(u.zdom().getAttribute(&quot;name&quot;))&#123;case&quot;all&quot;:$(&quot;#zylist li&quot;).each((e,t)&#x3D;&gt;&#123;$(t).addClass(&quot;on&quot;)&#125;);break;case&quot;invert&quot;:$(&quot;#zylist li&quot;).each((e,t)&#x3D;&gt;&#123;$(t).toggleClass(&quot;on&quot;)&#125;);break;default:let e&#x3D;[],t&#x3D;[],o&#x3D;__INITIAL_STATE__;$(&quot;#zylist li&quot;).each((t,o)&#x3D;&gt;&#123;let n&#x3D;$(o);n.hasClass(&quot;on&quot;)&amp;&amp;e.push(n.attr(&quot;name&quot;))&#125;),ipod.len&#x3D;e.length;ipod.list&#x3D;[],$(&quot;#zylist&quot;).fadeOut();&quot;video&quot;&#x3D;&#x3D;ipod.type&amp;&amp;(o.videoData.pages.forEach(o&#x3D;&gt;&#123;e.includes(&quot;&quot;+o.cid)&amp;&amp;t.push(o)&#125;),g(t)),&quot;anime&quot;&#x3D;&#x3D;ipod.type&amp;&amp;(o.epList.forEach(o&#x3D;&gt;&#123;e.includes(&quot;&quot;+o.cid)&amp;&amp;t.push(o)&#125;),k(t))&#125;&#125;)&#125;function _()&#123;let e,t&#x3D;u.zdom();if(0&#x3D;&#x3D;ipod.task)&#123;if(e&#x3D;__INITIAL_STATE__,document.querySelector(&quot;#zydl&gt;i&quot;).setAttribute(&quot;style&quot;,&quot;color: #fb7299&quot;),ipod.list&#x3D;[],ipod.task&#x3D;setInterval(()&#x3D;&gt;&#123;if(ipod.len&#x3D;&#x3D;ipod.list.length)if(clearInterval(ipod.task),ipod.task&#x3D;0,document.querySelector(&quot;#zydl&gt;i&quot;).removeAttribute(&quot;style&quot;),&quot;video&quot;&#x3D;&#x3D;ipod.type&amp;&amp;ipod.aria2.cover&amp;&amp;y(1&#x3D;&#x3D;ipod.count&amp;&amp;1&#x3D;&#x3D;ipod.len?0:1),ipod.aria2.getlink)&#123;let e&#x3D;[];ipod.list.forEach(t&#x3D;&gt;&#123;e.push(t.url[0])&#125;),GM_setClipboard(e.join(&quot;\r\n&quot;),&quot;text&quot;)&#125;else u.aria2(ipod.list,ipod.aria2.jsonrpc)&#125;,1e3),e.videoData)if(ipod.type&#x3D;&quot;video&quot;,ipod.url&#x3D;&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;x&#x2F;player&#x2F;playurl?avid&#x3D;%1&amp;cid&#x3D;%2&amp;qn&#x3D;116&quot;,ipod.aid&#x3D;e.videoData.aid,ipod.title&#x3D;e.videoData.title,ipod.cover&#x3D;e.videoData.pic,ipod.count&#x3D;ipod.len&#x3D;e.videoData.pages.length,1&#x3D;&#x3D;ipod.count)g(e.videoData.pages);else&#123;let o&#x3D;&#39;&lt;div&gt; &lt;div class&#x3D;&quot;btn-group full&quot;&gt; &lt;button name&#x3D;&quot;all&quot;&gt; \u5168\u9009 &lt;&#x2F;button&gt; &lt;button name&#x3D;&quot;invert&quot;&gt; \u53cd\u9009 &lt;&#x2F;button&gt; &lt;button name&#x3D;&quot;download&quot;&gt; &lt;i class&#x3D;&quot;ion-download&quot;&gt;&lt;&#x2F;i&gt; \u4e0b\u8f7d &lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;ul&gt;&#39;;if(t&#x3D;document.querySelector(&quot;#zylist&quot;))t.setAttribute(&quot;style&quot;,&quot;display: flex&quot;);else&#123;t&#x3D;document.createElement(&quot;div&quot;),document.body.insertAdjacentElement(&quot;beforeend&quot;,t);t.setAttribute(&quot;class&quot;,&quot;tamper&quot;),t.setAttribute(&quot;id&quot;,&quot;zylist&quot;)&#125;e.videoData.pages.forEach(e&#x3D;&gt;&#123;o+&#x3D;u.sprintf(&#39;&lt;li name&#x3D;&quot;%1&quot;&gt;%2&lt;&#x2F;li&gt;&#39;,e.cid,z(e.page)+&quot; &quot;+e.part)&#125;),t.innerHTML&#x3D;o+&quot;&lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&quot;;x()&#125;if(e.mediaInfo)if(ipod.type&#x3D;&quot;anime&quot;,ipod.area&#x3D;__PGC_USERSTATE__.area_limit,ipod.url&#x3D;ipod.area?&quot;https:&#x2F;&#x2F;www.biliplus.com&#x2F;BPplayurl.php?aid&#x3D;%1&amp;cid&#x3D;%2&amp;qn&#x3D;116&amp;otype&#x3D;json&amp;module&#x3D;bangumi&quot;:&quot;https:&#x2F;&#x2F;api.bilibili.com&#x2F;pgc&#x2F;player&#x2F;web&#x2F;playurl?avid&#x3D;%1&amp;cid&#x3D;%2&amp;qn&#x3D;116&quot;,ipod.title&#x3D;e.mediaInfo.title,ipod.cover&#x3D;e.mediaInfo.cover,ipod.count&#x3D;ipod.len&#x3D;e.epList.length,1&#x3D;&#x3D;ipod.count)k(e.epList);else&#123;let o&#x3D;&#39;&lt;div&gt; &lt;div class&#x3D;&quot;btn-group full&quot;&gt; &lt;button name&#x3D;&quot;settings&quot;&gt; &lt;i class&#x3D;&quot;ion-settings&quot;&gt;&lt;&#x2F;i&gt; \u8bbe\u7f6e &lt;&#x2F;button&gt; &lt;button name&#x3D;&quot;all&quot;&gt; \u5168\u9009 &lt;&#x2F;button&gt; &lt;button name&#x3D;&quot;invert&quot;&gt; \u53cd\u9009 &lt;&#x2F;button&gt; &lt;button name&#x3D;&quot;download&quot;&gt; &lt;i class&#x3D;&quot;ion-download&quot;&gt;&lt;&#x2F;i&gt; \u4e0b\u8f7d &lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;ul&gt;&#39;;if(t&#x3D;document.querySelector(&quot;#zylist&quot;))t.setAttribute(&quot;style&quot;,&quot;display: flex&quot;);else&#123;t&#x3D;document.createElement(&quot;div&quot;),document.body.insertAdjacentElement(&quot;beforeend&quot;,t);t.setAttribute(&quot;class&quot;,&quot;tamper&quot;),t.setAttribute(&quot;id&quot;,&quot;zylist&quot;)&#125;e.epList.forEach(e&#x3D;&gt;&#123;o+&#x3D;u.sprintf(&#39;&lt;li name&#x3D;&quot;%1&quot;&gt;%2&lt;&#x2F;li&gt;&#39;,e.cid,z(e.title)+&quot; &quot;+e.longTitle)&#125;),t.innerHTML&#x3D;o+&quot;&lt;&#x2F;ul&gt; &lt;&#x2F;div&gt;&quot;;x()&#125;&#125;&#125;function z(e)&#123;let t&#x3D;+e;return isNaN(t)&amp;&amp;(t&#x3D;0),(t&#x3D;&quot;000&quot;+t).substring(t.length-4)&#125;function S()&#123;document.head.insertAdjacentHTML(&quot;beforeend&quot;,&#39;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;@font-face&#123;font-family:&quot;Ionicons&quot;;src:url(&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;ionicons&#x2F;4.5.6&#x2F;fonts&#x2F;ionicons.eot?v&#x3D;4.5.5#iefix&quot;) format(&quot;embedded-opentype&quot;),url(&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;ionicons&#x2F;4.5.6&#x2F;fonts&#x2F;ionicons.woff2?v&#x3D;4.5.5&quot;) format(&quot;woff2&quot;),url(&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;ionicons&#x2F;4.5.6&#x2F;fonts&#x2F;ionicons.woff?v&#x3D;4.5.5&quot;) format(&quot;woff&quot;),url(&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;ionicons&#x2F;4.5.6&#x2F;fonts&#x2F;ionicons.ttf?v&#x3D;4.5.5&quot;) format(&quot;truetype&quot;),url(&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;ionicons&#x2F;4.5.6&#x2F;fonts&#x2F;ionicons.svg?v&#x3D;4.5.5#Ionicons&quot;) format(&quot;svg&quot;);font-weight:normal;font-style:normal&#125;i[class|&#x3D;ion]&#123;display:inline-block;font-family:&quot;Ionicons&quot;;font-size:120%;font-style:normal;font-variant:normal;font-weight:normal;line-height:1;text-rendering:auto;text-transform:none;vertical-align:text-bottom;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased&#125;.ion-android:before&#123;content:&quot;\\f225&quot;&#125;.ion-angular:before&#123;content:&quot;\\f227&quot;&#125;.ion-apple:before&#123;content:&quot;\\f229&quot;&#125;.ion-bitbucket:before&#123;content:&quot;\\f193&quot;&#125;.ion-bitcoin:before&#123;content:&quot;\\f22b&quot;&#125;.ion-buffer:before&#123;content:&quot;\\f22d&quot;&#125;.ion-chrome:before&#123;content:&quot;\\f22f&quot;&#125;.ion-closed-captioning:before&#123;content:&quot;\\f105&quot;&#125;.ion-codepen:before&#123;content:&quot;\\f230&quot;&#125;.ion-css3:before&#123;content:&quot;\\f231&quot;&#125;.ion-designernews:before&#123;content:&quot;\\f232&quot;&#125;.ion-dribbble:before&#123;content:&quot;\\f233&quot;&#125;.ion-dropbox:before&#123;content:&quot;\\f234&quot;&#125;.ion-euro:before&#123;content:&quot;\\f235&quot;&#125;.ion-facebook:before&#123;content:&quot;\\f236&quot;&#125;.ion-flickr:before&#123;content:&quot;\\f107&quot;&#125;.ion-foursquare:before&#123;content:&quot;\\f237&quot;&#125;.ion-freebsd-devil:before&#123;content:&quot;\\f238&quot;&#125;.ion-game-controller-a:before&#123;content:&quot;\\f13b&quot;&#125;.ion-game-controller-b:before&#123;content:&quot;\\f181&quot;&#125;.ion-github:before&#123;content:&quot;\\f239&quot;&#125;.ion-google:before&#123;content:&quot;\\f23a&quot;&#125;.ion-googleplus:before&#123;content:&quot;\\f23b&quot;&#125;.ion-hackernews:before&#123;content:&quot;\\f23c&quot;&#125;.ion-html5:before&#123;content:&quot;\\f23d&quot;&#125;.ion-instagram:before&#123;content:&quot;\\f23e&quot;&#125;.ion-ionic:before&#123;content:&quot;\\f150&quot;&#125;.ion-ionitron:before&#123;content:&quot;\\f151&quot;&#125;.ion-javascript:before&#123;content:&quot;\\f23f&quot;&#125;.ion-linkedin:before&#123;content:&quot;\\f240&quot;&#125;.ion-markdown:before&#123;content:&quot;\\f241&quot;&#125;.ion-model-s:before&#123;content:&quot;\\f153&quot;&#125;.ion-no-smoking:before&#123;content:&quot;\\f109&quot;&#125;.ion-nodejs:before&#123;content:&quot;\\f242&quot;&#125;.ion-npm:before&#123;content:&quot;\\f195&quot;&#125;.ion-octocat:before&#123;content:&quot;\\f243&quot;&#125;.ion-pinterest:before&#123;content:&quot;\\f244&quot;&#125;.ion-playstation:before&#123;content:&quot;\\f245&quot;&#125;.ion-polymer:before&#123;content:&quot;\\f15e&quot;&#125;.ion-python:before&#123;content:&quot;\\f246&quot;&#125;.ion-reddit:before&#123;content:&quot;\\f247&quot;&#125;.ion-rss:before&#123;content:&quot;\\f248&quot;&#125;.ion-sass:before&#123;content:&quot;\\f249&quot;&#125;.ion-skype:before&#123;content:&quot;\\f24a&quot;&#125;.ion-slack:before&#123;content:&quot;\\f10b&quot;&#125;.ion-snapchat:before&#123;content:&quot;\\f24b&quot;&#125;.ion-steam:before&#123;content:&quot;\\f24c&quot;&#125;.ion-tumblr:before&#123;content:&quot;\\f24d&quot;&#125;.ion-tux:before&#123;content:&quot;\\f2ae&quot;&#125;.ion-twitch:before&#123;content:&quot;\\f2af&quot;&#125;.ion-twitter:before&#123;content:&quot;\\f2b0&quot;&#125;.ion-usd:before&#123;content:&quot;\\f2b1&quot;&#125;.ion-vimeo:before&#123;content:&quot;\\f2c4&quot;&#125;.ion-vk:before&#123;content:&quot;\\f10d&quot;&#125;.ion-whatsapp:before&#123;content:&quot;\\f2c5&quot;&#125;.ion-windows:before&#123;content:&quot;\\f32f&quot;&#125;.ion-wordpress:before&#123;content:&quot;\\f330&quot;&#125;.ion-xbox:before&#123;content:&quot;\\f34c&quot;&#125;.ion-xing:before&#123;content:&quot;\\f10f&quot;&#125;.ion-yahoo:before&#123;content:&quot;\\f34d&quot;&#125;.ion-yen:before&#123;content:&quot;\\f34e&quot;&#125;.ion-youtube:before&#123;content:&quot;\\f34f&quot;&#125;.ion-add:before&#123;content:&quot;\\f273&quot;&#125;.ion-add-circle:before&#123;content:&quot;\\f272&quot;&#125;.ion-add-circle-outline:before&#123;content:&quot;\\f158&quot;&#125;.ion-airplane:before&#123;content:&quot;\\f15a&quot;&#125;.ion-alarm:before&#123;content:&quot;\\f274&quot;&#125;.ion-albums:before&#123;content:&quot;\\f275&quot;&#125;.ion-alert:before&#123;content:&quot;\\f276&quot;&#125;.ion-american-football:before&#123;content:&quot;\\f277&quot;&#125;.ion-analytics:before&#123;content:&quot;\\f278&quot;&#125;.ion-aperture:before&#123;content:&quot;\\f279&quot;&#125;.ion-apps:before&#123;content:&quot;\\f27a&quot;&#125;.ion-appstore:before&#123;content:&quot;\\f27b&quot;&#125;.ion-archive:before&#123;content:&quot;\\f27c&quot;&#125;.ion-arrow-back:before&#123;content:&quot;\\f27d&quot;&#125;.ion-arrow-down:before&#123;content:&quot;\\f27e&quot;&#125;.ion-arrow-dropdown:before&#123;content:&quot;\\f280&quot;&#125;.ion-arrow-dropdown-circle:before&#123;content:&quot;\\f27f&quot;&#125;.ion-arrow-dropleft:before&#123;content:&quot;\\f282&quot;&#125;.ion-arrow-dropleft-circle:before&#123;content:&quot;\\f281&quot;&#125;.ion-arrow-dropright:before&#123;content:&quot;\\f284&quot;&#125;.ion-arrow-dropright-circle:before&#123;content:&quot;\\f283&quot;&#125;.ion-arrow-dropup:before&#123;content:&quot;\\f286&quot;&#125;.ion-arrow-dropup-circle:before&#123;content:&quot;\\f285&quot;&#125;.ion-arrow-forward:before&#123;content:&quot;\\f287&quot;&#125;.ion-arrow-round-back:before&#123;content:&quot;\\f288&quot;&#125;.ion-arrow-round-down:before&#123;content:&quot;\\f289&quot;&#125;.ion-arrow-round-forward:before&#123;content:&quot;\\f28a&quot;&#125;.ion-arrow-round-up:before&#123;content:&quot;\\f28b&quot;&#125;.ion-arrow-up:before&#123;content:&quot;\\f28c&quot;&#125;.ion-at:before&#123;content:&quot;\\f28d&quot;&#125;.ion-attach:before&#123;content:&quot;\\f28e&quot;&#125;.ion-backspace:before&#123;content:&quot;\\f28f&quot;&#125;.ion-barcode:before&#123;content:&quot;\\f290&quot;&#125;.ion-baseball:before&#123;content:&quot;\\f291&quot;&#125;.ion-basket:before&#123;content:&quot;\\f292&quot;&#125;.ion-basketball:before&#123;content:&quot;\\f293&quot;&#125;.ion-battery-charging:before&#123;content:&quot;\\f294&quot;&#125;.ion-battery-dead:before&#123;content:&quot;\\f295&quot;&#125;.ion-battery-full:before&#123;content:&quot;\\f296&quot;&#125;.ion-beaker:before&#123;content:&quot;\\f297&quot;&#125;.ion-bed:before&#123;content:&quot;\\f160&quot;&#125;.ion-beer:before&#123;content:&quot;\\f298&quot;&#125;.ion-bicycle:before&#123;content:&quot;\\f299&quot;&#125;.ion-bluetooth:before&#123;content:&quot;\\f29a&quot;&#125;.ion-boat:before&#123;content:&quot;\\f29b&quot;&#125;.ion-body:before&#123;content:&quot;\\f29c&quot;&#125;.ion-bonfire:before&#123;content:&quot;\\f29d&quot;&#125;.ion-book:before&#123;content:&quot;\\f29e&quot;&#125;.ion-bookmark:before&#123;content:&quot;\\f29f&quot;&#125;.ion-bookmarks:before&#123;content:&quot;\\f2a0&quot;&#125;.ion-bowtie:before&#123;content:&quot;\\f2a1&quot;&#125;.ion-briefcase:before&#123;content:&quot;\\f2a2&quot;&#125;.ion-browsers:before&#123;content:&quot;\\f2a3&quot;&#125;.ion-brush:before&#123;content:&quot;\\f2a4&quot;&#125;.ion-bug:before&#123;content:&quot;\\f2a5&quot;&#125;.ion-build:before&#123;content:&quot;\\f2a6&quot;&#125;.ion-bulb:before&#123;content:&quot;\\f2a7&quot;&#125;.ion-bus:before&#123;content:&quot;\\f2a8&quot;&#125;.ion-business:before&#123;content:&quot;\\f1a4&quot;&#125;.ion-cafe:before&#123;content:&quot;\\f2a9&quot;&#125;.ion-calculator:before&#123;content:&quot;\\f2aa&quot;&#125;.ion-calendar:before&#123;content:&quot;\\f2ab&quot;&#125;.ion-call:before&#123;content:&quot;\\f2ac&quot;&#125;.ion-camera:before&#123;content:&quot;\\f2ad&quot;&#125;.ion-car:before&#123;content:&quot;\\f2b2&quot;&#125;.ion-card:before&#123;content:&quot;\\f2b3&quot;&#125;.ion-cart:before&#123;content:&quot;\\f2b4&quot;&#125;.ion-cash:before&#123;content:&quot;\\f2b5&quot;&#125;.ion-cellular:before&#123;content:&quot;\\f164&quot;&#125;.ion-chatboxes:before&#123;content:&quot;\\f2b6&quot;&#125;.ion-chatbubbles:before&#123;content:&quot;\\f2b7&quot;&#125;.ion-checkbox:before&#123;content:&quot;\\f2b9&quot;&#125;.ion-checkbox-outline:before&#123;content:&quot;\\f2b8&quot;&#125;.ion-checkmark:before&#123;content:&quot;\\f2bc&quot;&#125;.ion-checkmark-circle:before&#123;content:&quot;\\f2bb&quot;&#125;.ion-checkmark-circle-outline:before&#123;content:&quot;\\f2ba&quot;&#125;.ion-clipboard:before&#123;content:&quot;\\f2bd&quot;&#125;.ion-clock:before&#123;content:&quot;\\f2be&quot;&#125;.ion-close:before&#123;content:&quot;\\f2c0&quot;&#125;.ion-close-circle:before&#123;content:&quot;\\f2bf&quot;&#125;.ion-close-circle-outline:before&#123;content:&quot;\\f166&quot;&#125;.ion-cloud:before&#123;content:&quot;\\f2c9&quot;&#125;.ion-cloud-circle:before&#123;content:&quot;\\f2c2&quot;&#125;.ion-cloud-done:before&#123;content:&quot;\\f2c3&quot;&#125;.ion-cloud-download:before&#123;content:&quot;\\f2c6&quot;&#125;.ion-cloud-outline:before&#123;content:&quot;\\f2c7&quot;&#125;.ion-cloud-upload:before&#123;content:&quot;\\f2c8&quot;&#125;.ion-cloudy:before&#123;content:&quot;\\f2cb&quot;&#125;.ion-cloudy-night:before&#123;content:&quot;\\f2ca&quot;&#125;.ion-code:before&#123;content:&quot;\\f2ce&quot;&#125;.ion-code-download:before&#123;content:&quot;\\f2cc&quot;&#125;.ion-code-working:before&#123;content:&quot;\\f2cd&quot;&#125;.ion-cog:before&#123;content:&quot;\\f2cf&quot;&#125;.ion-color-fill:before&#123;content:&quot;\\f2d0&quot;&#125;.ion-color-filter:before&#123;content:&quot;\\f2d1&quot;&#125;.ion-color-palette:before&#123;content:&quot;\\f2d2&quot;&#125;.ion-color-wand:before&#123;content:&quot;\\f2d3&quot;&#125;.ion-compass:before&#123;content:&quot;\\f2d4&quot;&#125;.ion-construct:before&#123;content:&quot;\\f2d5&quot;&#125;.ion-contact:before&#123;content:&quot;\\f2d6&quot;&#125;.ion-contacts:before&#123;content:&quot;\\f2d7&quot;&#125;.ion-contract:before&#123;content:&quot;\\f2d8&quot;&#125;.ion-contrast:before&#123;content:&quot;\\f2d9&quot;&#125;.ion-copy:before&#123;content:&quot;\\f2da&quot;&#125;.ion-create:before&#123;content:&quot;\\f2db&quot;&#125;.ion-crop:before&#123;content:&quot;\\f2dc&quot;&#125;.ion-cube:before&#123;content:&quot;\\f2dd&quot;&#125;.ion-cut:before&#123;content:&quot;\\f2de&quot;&#125;.ion-desktop:before&#123;content:&quot;\\f2df&quot;&#125;.ion-disc:before&#123;content:&quot;\\f2e0&quot;&#125;.ion-document:before&#123;content:&quot;\\f2e1&quot;&#125;.ion-done-all:before&#123;content:&quot;\\f2e2&quot;&#125;.ion-download:before&#123;content:&quot;\\f2e3&quot;&#125;.ion-easel:before&#123;content:&quot;\\f2e4&quot;&#125;.ion-egg:before&#123;content:&quot;\\f2e5&quot;&#125;.ion-exit:before&#123;content:&quot;\\f2e6&quot;&#125;.ion-expand:before&#123;content:&quot;\\f2e7&quot;&#125;.ion-eye:before&#123;content:&quot;\\f2e9&quot;&#125;.ion-eye-off:before&#123;content:&quot;\\f2e8&quot;&#125;.ion-fastforward:before&#123;content:&quot;\\f2ea&quot;&#125;.ion-female:before&#123;content:&quot;\\f2eb&quot;&#125;.ion-filing:before&#123;content:&quot;\\f2ec&quot;&#125;.ion-film:before&#123;content:&quot;\\f2ed&quot;&#125;.ion-finger-print:before&#123;content:&quot;\\f2ee&quot;&#125;.ion-fitness:before&#123;content:&quot;\\f1ac&quot;&#125;.ion-flag:before&#123;content:&quot;\\f2ef&quot;&#125;.ion-flame:before&#123;content:&quot;\\f2f0&quot;&#125;.ion-flash:before&#123;content:&quot;\\f17e&quot;&#125;.ion-flash-off:before&#123;content:&quot;\\f12f&quot;&#125;.ion-flashlight:before&#123;content:&quot;\\f16b&quot;&#125;.ion-flask:before&#123;content:&quot;\\f2f2&quot;&#125;.ion-flower:before&#123;content:&quot;\\f2f3&quot;&#125;.ion-folder:before&#123;content:&quot;\\f2f5&quot;&#125;.ion-folder-open:before&#123;content:&quot;\\f2f4&quot;&#125;.ion-football:before&#123;content:&quot;\\f2f6&quot;&#125;.ion-funnel:before&#123;content:&quot;\\f2f7&quot;&#125;.ion-gift:before&#123;content:&quot;\\f199&quot;&#125;.ion-git-branch:before&#123;content:&quot;\\f2fa&quot;&#125;.ion-git-commit:before&#123;content:&quot;\\f2fb&quot;&#125;.ion-git-compare:before&#123;content:&quot;\\f2fc&quot;&#125;.ion-git-merge:before&#123;content:&quot;\\f2fd&quot;&#125;.ion-git-network:before&#123;content:&quot;\\f2fe&quot;&#125;.ion-git-pull-request:before&#123;content:&quot;\\f2ff&quot;&#125;.ion-glasses:before&#123;content:&quot;\\f300&quot;&#125;.ion-globe:before&#123;content:&quot;\\f301&quot;&#125;.ion-grid:before&#123;content:&quot;\\f302&quot;&#125;.ion-hammer:before&#123;content:&quot;\\f303&quot;&#125;.ion-hand:before&#123;content:&quot;\\f304&quot;&#125;.ion-happy:before&#123;content:&quot;\\f305&quot;&#125;.ion-headset:before&#123;content:&quot;\\f306&quot;&#125;.ion-heart:before&#123;content:&quot;\\f308&quot;&#125;.ion-heart-dislike:before&#123;content:&quot;\\f167&quot;&#125;.ion-heart-empty:before&#123;content:&quot;\\f1a1&quot;&#125;.ion-heart-half:before&#123;content:&quot;\\f1a2&quot;&#125;.ion-help:before&#123;content:&quot;\\f30b&quot;&#125;.ion-help-buoy:before&#123;content:&quot;\\f309&quot;&#125;.ion-help-circle:before&#123;content:&quot;\\f30a&quot;&#125;.ion-help-circle-outline:before&#123;content:&quot;\\f16d&quot;&#125;.ion-home:before&#123;content:&quot;\\f30c&quot;&#125;.ion-hourglass:before&#123;content:&quot;\\f111&quot;&#125;.ion-ice-cream:before&#123;content:&quot;\\f30d&quot;&#125;.ion-image:before&#123;content:&quot;\\f30e&quot;&#125;.ion-images:before&#123;content:&quot;\\f30f&quot;&#125;.ion-infinite:before&#123;content:&quot;\\f310&quot;&#125;.ion-information:before&#123;content:&quot;\\f312&quot;&#125;.ion-information-circle:before&#123;content:&quot;\\f311&quot;&#125;.ion-information-circle-outline:before&#123;content:&quot;\\f16f&quot;&#125;.ion-jet:before&#123;content:&quot;\\f315&quot;&#125;.ion-journal:before&#123;content:&quot;\\f18d&quot;&#125;.ion-key:before&#123;content:&quot;\\f316&quot;&#125;.ion-keypad:before&#123;content:&quot;\\f317&quot;&#125;.ion-laptop:before&#123;content:&quot;\\f318&quot;&#125;.ion-leaf:before&#123;content:&quot;\\f319&quot;&#125;.ion-link:before&#123;content:&quot;\\f22e&quot;&#125;.ion-list:before&#123;content:&quot;\\f31b&quot;&#125;.ion-list-box:before&#123;content:&quot;\\f31a&quot;&#125;.ion-locate:before&#123;content:&quot;\\f31c&quot;&#125;.ion-lock:before&#123;content:&quot;\\f31d&quot;&#125;.ion-log-in:before&#123;content:&quot;\\f31e&quot;&#125;.ion-log-out:before&#123;content:&quot;\\f31f&quot;&#125;.ion-magnet:before&#123;content:&quot;\\f320&quot;&#125;.ion-mail:before&#123;content:&quot;\\f322&quot;&#125;.ion-mail-open:before&#123;content:&quot;\\f321&quot;&#125;.ion-mail-unread:before&#123;content:&quot;\\f172&quot;&#125;.ion-male:before&#123;content:&quot;\\f323&quot;&#125;.ion-man:before&#123;content:&quot;\\f324&quot;&#125;.ion-map:before&#123;content:&quot;\\f325&quot;&#125;.ion-medal:before&#123;content:&quot;\\f326&quot;&#125;.ion-medical:before&#123;content:&quot;\\f327&quot;&#125;.ion-medkit:before&#123;content:&quot;\\f328&quot;&#125;.ion-megaphone:before&#123;content:&quot;\\f329&quot;&#125;.ion-menu:before&#123;content:&quot;\\f32a&quot;&#125;.ion-mic:before&#123;content:&quot;\\f32c&quot;&#125;.ion-mic-off:before&#123;content:&quot;\\f32b&quot;&#125;.ion-microphone:before&#123;content:&quot;\\f32d&quot;&#125;.ion-moon:before&#123;content:&quot;\\f32e&quot;&#125;.ion-more:before&#123;content:&quot;\\f1c9&quot;&#125;.ion-move:before&#123;content:&quot;\\f331&quot;&#125;.ion-musical-note:before&#123;content:&quot;\\f332&quot;&#125;.ion-musical-notes:before&#123;content:&quot;\\f333&quot;&#125;.ion-navigate:before&#123;content:&quot;\\f334&quot;&#125;.ion-notifications:before&#123;content:&quot;\\f338&quot;&#125;.ion-notifications-off:before&#123;content:&quot;\\f336&quot;&#125;.ion-notifications-outline:before&#123;content:&quot;\\f337&quot;&#125;.ion-nuclear:before&#123;content:&quot;\\f339&quot;&#125;.ion-nutrition:before&#123;content:&quot;\\f33a&quot;&#125;.ion-open:before&#123;content:&quot;\\f33b&quot;&#125;.ion-options:before&#123;content:&quot;\\f33c&quot;&#125;.ion-outlet:before&#123;content:&quot;\\f33d&quot;&#125;.ion-paper:before&#123;content:&quot;\\f33f&quot;&#125;.ion-paper-plane:before&#123;content:&quot;\\f33e&quot;&#125;.ion-partly-sunny:before&#123;content:&quot;\\f340&quot;&#125;.ion-pause:before&#123;content:&quot;\\f341&quot;&#125;.ion-paw:before&#123;content:&quot;\\f342&quot;&#125;.ion-people:before&#123;content:&quot;\\f343&quot;&#125;.ion-person:before&#123;content:&quot;\\f345&quot;&#125;.ion-person-add:before&#123;content:&quot;\\f344&quot;&#125;.ion-phone-landscape:before&#123;content:&quot;\\f346&quot;&#125;.ion-phone-portrait:before&#123;content:&quot;\\f347&quot;&#125;.ion-photos:before&#123;content:&quot;\\f348&quot;&#125;.ion-pie:before&#123;content:&quot;\\f349&quot;&#125;.ion-pin:before&#123;content:&quot;\\f34a&quot;&#125;.ion-pint:before&#123;content:&quot;\\f34b&quot;&#125;.ion-pizza:before&#123;content:&quot;\\f354&quot;&#125;.ion-planet:before&#123;content:&quot;\\f356&quot;&#125;.ion-play:before&#123;content:&quot;\\f357&quot;&#125;.ion-play-circle:before&#123;content:&quot;\\f174&quot;&#125;.ion-podium:before&#123;content:&quot;\\f358&quot;&#125;.ion-power:before&#123;content:&quot;\\f359&quot;&#125;.ion-pricetag:before&#123;content:&quot;\\f35a&quot;&#125;.ion-pricetags:before&#123;content:&quot;\\f35b&quot;&#125;.ion-print:before&#123;content:&quot;\\f35c&quot;&#125;.ion-pulse:before&#123;content:&quot;\\f35d&quot;&#125;.ion-qr-scanner:before&#123;content:&quot;\\f35e&quot;&#125;.ion-quote:before&#123;content:&quot;\\f35f&quot;&#125;.ion-radio:before&#123;content:&quot;\\f362&quot;&#125;.ion-radio-button-off:before&#123;content:&quot;\\f360&quot;&#125;.ion-radio-button-on:before&#123;content:&quot;\\f361&quot;&#125;.ion-rainy:before&#123;content:&quot;\\f363&quot;&#125;.ion-recording:before&#123;content:&quot;\\f364&quot;&#125;.ion-redo:before&#123;content:&quot;\\f365&quot;&#125;.ion-refresh:before&#123;content:&quot;\\f366&quot;&#125;.ion-refresh-circle:before&#123;content:&quot;\\f228&quot;&#125;.ion-remove:before&#123;content:&quot;\\f368&quot;&#125;.ion-remove-circle:before&#123;content:&quot;\\f367&quot;&#125;.ion-remove-circle-outline:before&#123;content:&quot;\\f176&quot;&#125;.ion-reorder:before&#123;content:&quot;\\f369&quot;&#125;.ion-repeat:before&#123;content:&quot;\\f36a&quot;&#125;.ion-resize:before&#123;content:&quot;\\f36b&quot;&#125;.ion-restaurant:before&#123;content:&quot;\\f36c&quot;&#125;.ion-return-left:before&#123;content:&quot;\\f36d&quot;&#125;.ion-return-right:before&#123;content:&quot;\\f36e&quot;&#125;.ion-reverse-camera:before&#123;content:&quot;\\f36f&quot;&#125;.ion-rewind:before&#123;content:&quot;\\f370&quot;&#125;.ion-ribbon:before&#123;content:&quot;\\f371&quot;&#125;.ion-rocket:before&#123;content:&quot;\\f179&quot;&#125;.ion-rose:before&#123;content:&quot;\\f372&quot;&#125;.ion-sad:before&#123;content:&quot;\\f373&quot;&#125;.ion-save:before&#123;content:&quot;\\f1a9&quot;&#125;.ion-school:before&#123;content:&quot;\\f374&quot;&#125;.ion-search:before&#123;content:&quot;\\f375&quot;&#125;.ion-send:before&#123;content:&quot;\\f376&quot;&#125;.ion-settings:before&#123;content:&quot;\\f377&quot;&#125;.ion-share:before&#123;content:&quot;\\f379&quot;&#125;.ion-share-alt:before&#123;content:&quot;\\f378&quot;&#125;.ion-shirt:before&#123;content:&quot;\\f37a&quot;&#125;.ion-shuffle:before&#123;content:&quot;\\f37b&quot;&#125;.ion-skip-backward:before&#123;content:&quot;\\f37c&quot;&#125;.ion-skip-forward:before&#123;content:&quot;\\f37d&quot;&#125;.ion-snow:before&#123;content:&quot;\\f37e&quot;&#125;.ion-speedometer:before&#123;content:&quot;\\f37f&quot;&#125;.ion-square:before&#123;content:&quot;\\f381&quot;&#125;.ion-square-outline:before&#123;content:&quot;\\f380&quot;&#125;.ion-star:before&#123;content:&quot;\\f384&quot;&#125;.ion-star-half:before&#123;content:&quot;\\f382&quot;&#125;.ion-star-outline:before&#123;content:&quot;\\f383&quot;&#125;.ion-stats:before&#123;content:&quot;\\f385&quot;&#125;.ion-stopwatch:before&#123;content:&quot;\\f386&quot;&#125;.ion-subway:before&#123;content:&quot;\\f387&quot;&#125;.ion-sunny:before&#123;content:&quot;\\f388&quot;&#125;.ion-swap:before&#123;content:&quot;\\f389&quot;&#125;.ion-switch:before&#123;content:&quot;\\f38a&quot;&#125;.ion-sync:before&#123;content:&quot;\\f38b&quot;&#125;.ion-tablet-landscape:before&#123;content:&quot;\\f38c&quot;&#125;.ion-tablet-portrait:before&#123;content:&quot;\\f38d&quot;&#125;.ion-tennisball:before&#123;content:&quot;\\f38e&quot;&#125;.ion-text:before&#123;content:&quot;\\f38f&quot;&#125;.ion-thermometer:before&#123;content:&quot;\\f390&quot;&#125;.ion-thumbs-down:before&#123;content:&quot;\\f391&quot;&#125;.ion-thumbs-up:before&#123;content:&quot;\\f392&quot;&#125;.ion-thunderstorm:before&#123;content:&quot;\\f393&quot;&#125;.ion-time:before&#123;content:&quot;\\f394&quot;&#125;.ion-timer:before&#123;content:&quot;\\f395&quot;&#125;.ion-today:before&#123;content:&quot;\\f17d&quot;&#125;.ion-train:before&#123;content:&quot;\\f396&quot;&#125;.ion-transgender:before&#123;content:&quot;\\f397&quot;&#125;.ion-trash:before&#123;content:&quot;\\f398&quot;&#125;.ion-trending-down:before&#123;content:&quot;\\f399&quot;&#125;.ion-trending-up:before&#123;content:&quot;\\f39a&quot;&#125;.ion-trophy:before&#123;content:&quot;\\f39b&quot;&#125;.ion-tv:before&#123;content:&quot;\\f17f&quot;&#125;.ion-umbrella:before&#123;content:&quot;\\f39c&quot;&#125;.ion-undo:before&#123;content:&quot;\\f39d&quot;&#125;.ion-unlock:before&#123;content:&quot;\\f39e&quot;&#125;.ion-videocam:before&#123;content:&quot;\\f39f&quot;&#125;.ion-volume-high:before&#123;content:&quot;\\f123&quot;&#125;.ion-volume-low:before&#123;content:&quot;\\f131&quot;&#125;.ion-volume-mute:before&#123;content:&quot;\\f3a1&quot;&#125;.ion-volume-off:before&#123;content:&quot;\\f3a2&quot;&#125;.ion-walk:before&#123;content:&quot;\\f3a4&quot;&#125;.ion-wallet:before&#123;content:&quot;\\f18f&quot;&#125;.ion-warning:before&#123;content:&quot;\\f3a5&quot;&#125;.ion-watch:before&#123;content:&quot;\\f3a6&quot;&#125;.ion-water:before&#123;content:&quot;\\f3a7&quot;&#125;.ion-wifi:before&#123;content:&quot;\\f3a8&quot;&#125;.ion-wine:before&#123;content:&quot;\\f3a9&quot;&#125;.ion-woman:before&#123;content:&quot;\\f3aa&quot;&#125;div.tamper&#123;color:#333;align-items:center;background-color:rgba(0,0,0,0.85);box-sizing:border-box;display:flex;font-size:14px !important;height:100%;justify-content:center;left:0;position:fixed;top:0;text-align:left;width:100%;z-index:900000&#125;div.tamper&gt;div&#123;background-color:white;box-sizing:border-box;padding:1em;width:360px&#125;div.tamper&gt;div.doc&#123;width:720px&#125;div.tamper h1&#123;font-size:1.8rem;font-weight:400;margin:10px 0 20px 0;text-align:center&#125;div.tamper form&#123;display:block&#125;div.tamper form&gt;div&#123;padding:.5em 0&#125;div.tamper form&gt;div&gt;div&#123;margin:.5em 0&#125;div.tamper form&gt;div&gt;div:last-child&#123;margin-bottom:0&#125;div.tamper form label:first-child&#123;display:block;margin-bottom:.5em&#125;div.tamper form label:first-child:before&#123;content:&quot;\\00bb&quot;;margin:0 .25em&#125;div.tamper form label:not(:first-child)&#123;display:inline&#125;div.tamper form input&#123;box-shadow:none&#125;div.tamper form input[type&#x3D;text]&#123;color:#000;background-color:#fff;border:1px solid #ddd;box-sizing:border-box;display:block;font-size:1em;padding:.5em;width:100%&#125;div.tamper form input[type&#x3D;text]:focus&#123;border:1px solid #59c1f0&#125;div.tamper form input[type&#x3D;password]&#123;color:#000;background-color:#fff;border:1px solid #ddd;box-sizing:border-box;display:block;font-size:1em;padding:.5em;width:100%&#125;div.tamper form input[type&#x3D;password]:focus&#123;border:1px solid #59c1f0&#125;div.tamper form input[type&#x3D;radio],div.tamper form input[type&#x3D;checkbox]&#123;display:inline-block !important;height:1em;margin-right:.25em;vertical-align:middle;width:1em&#125;div.tamper form input[type&#x3D;checkbox]&#123;-webkit-appearance:checkbox !important&#125;div.tamper form input[type&#x3D;radio]&#123;-webkit-appearance:radio !important&#125;div.tamper ul&#123;margin:.5em;padding:0;list-style-type:disc;list-style-position:inside;max-height:520px;overflow-y:auto;scrollbar-width:thin&#125;div.tamper ul&gt;li&#123;box-sizing:content-box;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;padding:.25em 0;cursor:default&#125;div.tamper ul&gt;li.on&#123;color:#f45a8d&#125;div.summary&#123;color:#666&#125;div.btn-group&#123;box-sizing:border-box;display:inline-flex&#125;div.btn-group.full&#123;display:flex&#125;div.btn-group.outline&gt;button&#123;background-color:transparent;border:1px solid #ccc;color:#000&#125;div.btn-group.outline&gt;button:hover&#123;color:#ffffff;background-color:#000;border-color:#000&#125;div.btn-group.outline&gt;button:not(:first-child)&#123;border-left:none&#125;div.btn-group&gt;button&#123;background-color:#666;border-radius:0;border:none;color:#fff;display:inline-block;flex:1 1 auto;margin:0;outline:none;padding:.5em 1.25em;position:relative;font-size:inherit&#125;div.btn-group&gt;button:hover&#123;background-color:#000&#125;div.btn-group&gt;button:first-child&#123;border-bottom-left-radius:.25rem;border-top-left-radius:.25rem&#125;div.btn-group&gt;button:last-child&#123;border-bottom-right-radius:.25rem;border-top-right-radius:.25rem&#125;@keyframes spinner&#123;0%&#123;transform:rotate(0)&#125;100%&#123;transform:rotate(360deg)&#125;&#125;.spinner&#123;animation-name:spinner;animation-duration:1800ms;animation-timing-function:linear;animation-iteration-count:infinite&#125;&lt;&#x2F;tyle&gt;&#39;);let e,t&#x3D;location.host.split(&quot;.&quot;);while(t.length&gt;2)t.shift();switch(t.join(&quot;.&quot;))&#123;case&quot;baidu.com&quot;:e&#x3D;location.pathname.includes(&quot;&#x2F;s&#x2F;&quot;)?&#39;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;#bd-main&gt;div.bd-aside&#123;display:none !important&#125;#bd-main&gt;div.bd-left&#123;margin:10px auto !important&#125;#hd,#layoutHeader,#web-right-view,#layoutAside&#123;display:none !important&#125;#bd&#123;width:960px;min-width:960px;margin:10px auto !important&#125;#layoutApp&gt;.frame-main&#123;max-width:720px;margin-top:15px&#125;#layoutApp&gt;.frame-main&gt;.frame-content&#123;margin:0&#125;div.frame-all&#123;background-color:#444&#125;div.x-button-box&gt;a.g-button&#123;display:none&#125;div.x-button-box&gt;a.g-button[data-button-id&#x3D;b1]&#123;display:inline-block&#125;&lt;&#x2F;style&gt;&#39;:&#39;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;dd[node-type~&#x3D;header-apps]&#123;margin-right:120px !important&#125;&lt;&#x2F;style&gt;&#39;;break;case&quot;bilibili.com&quot;:e&#x3D;&#39;&lt;style type&#x3D;&quot;text&#x2F;css&quot;&gt;#videoList&#123;display:flex;flex-wrap:wrap;list-style:none;margin-top:10px;width:100%&#125;#videoList&gt;li&#123;border-radius:.25em;border:1px solid #ddd;cursor:default;display:inline-block;flex:initial initial auto;margin:4px 2px;padding:.5em 1.25em;text-align:center&#125;#videoList&gt;li:hover&#123;background-color:#555;border-color:#555;color:#fff&#125;&lt;&#x2F;style&gt;&#39;&#125;document.head.insertAdjacentHTML(&quot;beforeend&quot;,e)&#125;function A()&#123;if(document.querySelector(&quot;#zyset&quot;))ipod.aria2&amp;&amp;u.zform(&quot;#zyset input&quot;,ipod.aria2),document.querySelector(&quot;#zyset&quot;).setAttribute(&quot;style&quot;,&quot;display: flex&quot;);else&#123;let e,t&#x3D;location.host.split(&quot;.&quot;);while(t.length&gt;2)t.shift();switch(t.join(&quot;.&quot;))&#123;case&quot;bilibili.com&quot;:e&#x3D;&#39;&lt;div class&#x3D;&quot;tamper&quot; id&#x3D;&quot;zyset&quot;&gt; &lt;div&gt; &lt;h1&gt;Aria2\u4e0b\u8f7d\u52a9\u624b&lt;&#x2F;h1&gt; &lt;form&gt; &lt;input name&#x3D;&quot;version&quot; type&#x3D;&quot;hidden&quot; value&#x3D;&quot;20191120&quot;&gt; &lt;div&gt; &lt;label&gt;\u5e38\u89c4\u8bbe\u7f6e&lt;&#x2F;label&gt; &lt;div&gt; &lt;input name&#x3D;&quot;getlink&quot; type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;1&quot;&gt; &lt;label&gt;\u4ec5\u63d0\u53d6\u89c6\u9891\u7684\u4e0b\u8f7d\u5730\u5740\uff0c\u7c98\u8d34\u5230idm\u4e2d\u4f7f\u7528&lt;&#x2F;label&gt;&lt;br&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;input name&#x3D;&quot;cover&quot; type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;1&quot;&gt; &lt;label&gt;\u4e0b\u8f7d\u89c6\u9891\u6216\u63d0\u53d6\u94fe\u63a5\u5305\u542b\u5c01\u9762\u56fe\u7247&lt;&#x2F;label&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;input name&#x3D;&quot;danmaku&quot; type&#x3D;&quot;checkbox&quot; value&#x3D;&quot;1&quot;&gt; &lt;label&gt;\u64ad\u653e\u89c6\u9891\u65f6\u9ed8\u8ba4\u5173\u95ed\u5f39\u5e55&lt;&#x2F;label&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label&gt;\u8bbe\u7f6e aria2 jsonrpc&lt;&#x2F;label&gt; &lt;input name&#x3D;&quot;jsonrpc&quot; type&#x3D;&quot;text&quot;&gt; &lt;div class&#x3D;&quot;summary&quot;&gt; \u63a8\u8350\u4f7f\u7528\u914d\u5957\u7684 &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1eCDe2M6pLnukDhGAnJNasg&quot; target&#x3D;&quot;_blank&quot;&gt;Aria2&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label&gt;\u8bbe\u7f6e aria2 \u8bbf\u95ee\u53e3\u4ee4&lt;&#x2F;label&gt; &lt;input name&#x3D;&quot;token&quot; type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;\u6ca1\u6709\u53e3\u4ee4\u5219\u4e0d\u8981\u586b\u5199&quot;&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label&gt;\u8bbe\u7f6e\u89c6\u9891\u4e0b\u8f7d\u4fdd\u5b58\u8def\u5f84&lt;&#x2F;label&gt; &lt;input name&#x3D;&quot;video&quot; type&#x3D;&quot;text&quot;&gt; &lt;div class&#x3D;&quot;summary&quot;&gt; \u8bf7\u4f7f\u7528\u5de6\u659c\u6760\u4f5c\u4e3a\u5206\u9694\u7b26\uff0c\u5141\u8bb8\u4e2d\u6587\u5b57\u7b26\u3002 &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label&gt;\u8bbe\u7f6e\u756a\u5267\u4e0b\u8f7d\u4fdd\u5b58\u8def\u5f84&lt;&#x2F;label&gt; &lt;input name&#x3D;&quot;anime&quot; type&#x3D;&quot;text&quot;&gt; &lt;div class&#x3D;&quot;summary&quot;&gt; \u76ee\u524d\u4e0d\u80fd\u4e0b\u8f7d\u4ec5\u9650\u5927\u4f1a\u5458\u89c2\u770b\u7684\u6e2f\u6fb3\u53f0\u756a\u5267 &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;btn-group&quot;&gt; &lt;button type&#x3D;&quot;submit&quot;&gt; &lt;i class&#x3D;&quot;ion-checkmark&quot;&gt;&lt;&#x2F;i&gt; \u786e\u5b9a &lt;&#x2F;button&gt; &lt;button type&#x3D;&quot;button&quot;&gt; &lt;i class&#x3D;&quot;ion-close&quot;&gt;&lt;&#x2F;i&gt; \u53d6\u6d88 &lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&#39;;break;default:e&#x3D;&#39;&lt;div class&#x3D;&quot;tamper&quot; id&#x3D;&quot;zyset&quot;&gt; &lt;div&gt; &lt;h1&gt;Aria2\u4e0b\u8f7d\u52a9\u624b&lt;&#x2F;h1&gt; &lt;form&gt; &lt;input name&#x3D;&quot;version&quot; type&#x3D;&quot;hidden&quot; value&#x3D;&quot;20200106&quot;&gt; &lt;div&gt; &lt;label&gt;\u8bbe\u7f6e aria2 jsonrpc&lt;&#x2F;label&gt; &lt;input name&#x3D;&quot;jsonrpc&quot; type&#x3D;&quot;text&quot;&gt; &lt;div class&#x3D;&quot;summary&quot;&gt; \u63a8\u8350\u4f7f\u7528\u914d\u5957\u7684 &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;pan.baidu.com&#x2F;s&#x2F;1eCDe2M6pLnukDhGAnJNasg&quot; target&#x3D;&quot;_blank&quot;&gt;Aria2&lt;&#x2F;a&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label&gt;\u8bbe\u7f6e aria2 \u8bbf\u95ee\u53e3\u4ee4&lt;&#x2F;label&gt; &lt;input name&#x3D;&quot;token&quot; type&#x3D;&quot;password&quot; placeholder&#x3D;&quot;\u6ca1\u6709\u53e3\u4ee4\u5219\u4e0d\u8981\u586b\u5199&quot;&gt; &lt;&#x2F;div&gt; &lt;div&gt; &lt;label&gt;\u8bbe\u7f6e\u4e0b\u8f7d\u4fdd\u5b58\u8def\u5f84&lt;&#x2F;label&gt; &lt;input name&#x3D;&quot;dir&quot; type&#x3D;&quot;text&quot;&gt; &lt;div class&#x3D;&quot;summary&quot;&gt; \u8bf7\u4f7f\u7528\u5de6\u659c\u6760\u4f5c\u4e3a\u5206\u9694\u7b26\uff0c\u8def\u5f84\u4e2d\u53ef\u4ee5\u6709\u4e2d\u6587 &lt;&#x2F;div&gt; &lt;&#x2F;div&gt; &lt;div class&#x3D;&quot;btn-group&quot;&gt; &lt;button type&#x3D;&quot;submit&quot;&gt;&lt;i class&#x3D;&quot;ion-checkmark&quot;&gt;&lt;&#x2F;i&gt; \u786e\u5b9a&lt;&#x2F;button&gt; &lt;button type&#x3D;&quot;button&quot;&gt;&lt;i class&#x3D;&quot;ion-close&quot;&gt;&lt;&#x2F;i&gt; \u53d6\u6d88&lt;&#x2F;button&gt; &lt;&#x2F;div&gt; &lt;&#x2F;form&gt; &lt;&#x2F;div&gt; &lt;&#x2F;div&gt;&#39;&#125;document.body.insertAdjacentHTML(&quot;beforeend&quot;,e),console.log(ipod.aria2);ipod.aria2&amp;&amp;u.zform(&quot;#zyset input&quot;,ipod.aria2),document.querySelector(&quot;#zyset button[type&#x3D;button]&quot;).addEventListener(&quot;click&quot;,()&#x3D;&gt;&#123;u.zdom(),document.querySelector(&quot;#zyset&quot;).setAttribute(&quot;style&quot;,&quot;display: none&quot;)&#125;);document.querySelector(&quot;#zyset form&quot;).addEventListener(&quot;submit&quot;,()&#x3D;&gt;&#123;let e&#x3D;&#123;&#125;,t&#x3D;u.zdom(),o&#x3D;new FormData(t);for(let t of o.entries())e[t[0]]&#x3D;t[1];ipod.aria2&#x3D;Object.assign(ipod.defaults,e),u.save(&quot;aria2&quot;,ipod.aria2);document.querySelector(&quot;#zyset&quot;).setAttribute(&quot;style&quot;,&quot;display: none&quot;)&#125;)&#125;&#125;let j;if(location.host.includes(&quot;bilibili.com&quot;))&#123;if(S(),ipod.header&#x3D;[&quot;Referer: &quot;+location.href],ipod.header2&#x3D;&#123;Referer:location.href&#125;,ipod.defaults&#x3D;&#123;token:&quot;&quot;,jsonrpc:&quot;http:&#x2F;&#x2F;127.0.0.1:6800&#x2F;jsonrpc&quot;,getlink:0,cover:0,danmaku:0,video:&quot;D:&#x2F;bilibili&#x2F;video&quot;,anime:&quot;D:&#x2F;bilibili&#x2F;anime&quot;&#125;,ipod.aria2&#x3D;u.load(&quot;aria2&quot;),null!&#x3D;ipod.aria2&amp;&amp;&quot;20191120&quot;&#x3D;&#x3D;ipod.aria2.version||(ipod.aria2&#x3D;Object.assign(ipod.defaults),&quot;live.bilibili.com&quot;&#x3D;&#x3D;location.host||A()),&quot;live.bilibili.com&quot;&#x3D;&#x3D;location.host&amp;&amp;parseInt(location.pathname.substring(1))&amp;&amp;(f(),setInterval(()&#x3D;&gt;&#123;f()&#125;,9e5)),&quot;www.bilibili.com&quot;&#x3D;&#x3D;location.host)&#123;history.pushState&#x3D;u.history(&quot;pushState&quot;),window.addEventListener(&quot;pushState&quot;,f);location.pathname.startsWith(&quot;&#x2F;video&#x2F;&quot;)&amp;&amp;(ipod.task&#x3D;setInterval(()&#x3D;&gt;&#123;if(&quot;function&quot;&#x3D;&#x3D;typeof jQuery&amp;&amp;document.querySelector(&quot;div.ops&quot;)&amp;&amp;&quot;--&quot;!&#x3D;document.querySelector(&quot;div.ops&gt;span.coin&quot;).innerText.replace(&#x2F;\s+&#x2F;g,&quot;&quot;)&amp;&amp;(clearInterval(ipod.task),ipod.task&#x3D;0,f(),$(&quot;div.ops&quot;).first().prepend(&#39;&lt;span id&#x3D;&quot;zydl&quot; title&#x3D;&quot;\u4e0b\u8f7d&quot;&gt;&lt;i class&#x3D;&quot;van-icon-download&quot;&gt;&lt;&#x2F;i&gt;\u4e0b\u8f7d&lt;&#x2F;span&gt;&#39;),$(&#39;&lt;div class&#x3D;&quot;appeal-text&quot;&gt;Aria2\u8bbe\u7f6e&lt;&#x2F;div&gt;&#39;).on(&quot;click&quot;,A).appendTo($(&quot;#arc_toolbar_report&quot;)),$(&quot;#zydl&quot;).on(&quot;click&quot;,_),ipod.aria2.danmaku))&#123;p(),history.pushState&#x3D;u.history(&quot;pushState&quot;);window.addEventListener(&quot;pushState&quot;,p)&#125;&#125;,1e3)),location.pathname.startsWith(&quot;&#x2F;bangumi&#x2F;play&#x2F;&quot;)&amp;&amp;(ipod.task&#x3D;setInterval(()&#x3D;&gt;&#123;if(&quot;function&quot;&#x3D;&#x3D;typeof jQuery&amp;&amp;document.querySelector(&quot;#toolbar_module&quot;)&amp;&amp;&quot;--&quot;!&#x3D;document.querySelector(&quot;#toolbar_module&gt;div.coin-info&quot;).innerText.replace(&#x2F;\s+&#x2F;g,&quot;&quot;))if(clearInterval(ipod.task),ipod.task&#x3D;0,$(&quot;#toolbar_module&quot;).prepend(&#39;&lt;div id&#x3D;&quot;zydl&quot; class&#x3D;&quot;coin-info&quot;&gt;&lt;i class&#x3D;&quot;ion-download&quot;&gt;&lt;&#x2F;i&gt;&lt;span&gt;\u4e0b\u8f7d&lt;&#x2F;span&gt;&lt;&#x2F;div&gt;&#39;),$(&quot;#zydl&quot;).on(&quot;click&quot;,_),__PGC_USERSTATE__.area_limit)&#123;let e&#x3D;__INITIAL_STATE__;ipod.aid&#x3D;e.epInfo.aid,ipod.cid&#x3D;e.epInfo.cid;ipod.url&#x3D;&quot;https:&#x2F;&#x2F;www.biliplus.com&#x2F;BPplayurl.php?aid&#x3D;%1&amp;cid&#x3D;%2&amp;qn&#x3D;116&amp;otype&#x3D;json&amp;module&#x3D;bangumi&quot;,$.getScript(&quot;https:&#x2F;&#x2F;cdn.bootcss.com&#x2F;flv.js&#x2F;1.5.0&#x2F;flv.min.js&quot;,()&#x3D;&gt;&#123;document.querySelector(&quot;#bofqi&quot;).insertAdjacentHTML(&quot;beforeend&quot;,&#39;&lt;video id&#x3D;&quot;bplayer&quot; width&#x3D;&quot;100%&quot; height&#x3D;&quot;100%&quot; controls&gt;&lt;&#x2F;video&gt;&#39;),$(&quot;#player_mask_module, div.limit_area_wrap&quot;).remove();m()&#125;);let t&#x3D;&#39;&lt;ul id&#x3D;&quot;videoList&quot;&gt;&#39;;e.epList.forEach((e,o)&#x3D;&gt;&#123;t+&#x3D;u.sprintf(&#39;&lt;li data-aid&#x3D;&quot;%1&quot; data-cid&#x3D;&quot;%2&quot;&gt;%3&lt;&#x2F;li&gt;&#39;,e.aid,e.cid,z(o+1))&#125;),t+&#x3D;&quot;&lt;&#x2F;ul&gt;&quot;;document.querySelector(&quot;#player_module&quot;).insertAdjacentHTML(&quot;afterend&quot;,t),$(&quot;#videoList &gt; li&quot;).on(&quot;click&quot;,h)&#125;else if(ipod.aria2.danmaku)&#123;p(),f();history.replaceState&#x3D;u.history(&quot;replaceState&quot;),window.addEventListener(&quot;replaceState&quot;,p)&#125;&#125;,1e3))&#125;if(&quot;space.bilibili.com&quot;&#x3D;&#x3D;location.host)&#123;history.pushState&#x3D;u.history(&quot;pushState&quot;),window.addEventListener(&quot;pushState&quot;,b);b()&#125;if(&quot;search.bilibili.com&quot;&#x3D;&#x3D;location.host)&#123;history.pushState&#x3D;u.history(&quot;pushState&quot;),window.addEventListener(&quot;pushState&quot;,d);d()&#125;&#125;if(location.host.includes(&quot;baidu.com&quot;))switch(ipod.header&#x3D;[&quot;User-Agent: netdisk&quot;],ipod.defaults&#x3D;&#123;token:&quot;&quot;,jsonrpc:&quot;http:&#x2F;&#x2F;127.0.0.1:6801&#x2F;jsonrpc&quot;,dir:&quot;E:&#x2F;netdisk&quot;&#125;,location.pathname)&#123;case&quot;&#x2F;share&#x2F;init&quot;:location.hash?(document.querySelector(&quot;input&quot;).value&#x3D;location.hash.substring(1,5),document.querySelector(&quot;a.g-button-blue-large&quot;).click()):GM_xmlhttpRequest(&#123;url:&quot;https:&#x2F;&#x2F;search.pandown.cn&#x2F;api&#x2F;query?surl&#x3D;1&quot;+location.search.substring(6),method:&quot;GET&quot;,onload(e)&#123;let t&#x3D;JSON.parse(e.responseText);0&#x3D;&#x3D;t.code&amp;&amp;(document.querySelector(&quot;input&quot;).value&#x3D;t.data[0].password,document.querySelector(&quot;a.g-button-blue-large&quot;).click())&#125;&#125;);break;case&quot;&#x2F;disk&#x2F;home&quot;:S(),ipod.aria2&#x3D;u.load(&quot;aria2&quot;);null!&#x3D;ipod.aria2&amp;&amp;&quot;20200106&quot;&#x3D;&#x3D;ipod.aria2.version||(ipod.aria2&#x3D;Object.assign(ipod.defaults),A());let e&#x3D;setInterval(()&#x3D;&gt;&#123;&quot;function&quot;&#x3D;&#x3D;typeof jQuery&amp;&amp;(clearInterval(e),location.hash.startsWith(&quot;#&#x2F;all&quot;)&amp;&amp;GM_cookie.list(&#123;&#125;,e&#x3D;&gt;&#123;let t&#x3D;[&quot;BDUSS&quot;,&quot;STOKEN&quot;],o&#x3D;[];if(e.forEach(e&#x3D;&gt;&#123;t.includes(e.name)&amp;&amp;o.push(e.name+&quot;&#x3D;&quot;+e.value)&#125;),o.length)&#123;ipod.cookie&#x3D;o.join(&quot;;&quot;),$(&quot;a.g-button[data-button-id&#x3D;b5]&quot;).remove();$(&quot;div.QDDOQB&quot;).removeClass(&quot;QDDOQB&quot;).addClass(&quot;btn-group outline&quot;).css(&quot;font-size&quot;,&quot;12.5px&quot;).empty().append(&#39;&lt;button name&#x3D;&quot;zyset&quot;&gt;&lt;i class&#x3D;&quot;ion-settings&quot;&gt;&lt;&#x2F;i&gt; \u8bbe\u7f6e &lt;&#x2F;button&gt;&lt;button name&#x3D;&quot;zydl&quot;&gt;&lt;i class&#x3D;&quot;ion-download&quot;&gt;&lt;&#x2F;i&gt; \u7ebf\u8def1 &lt;&#x2F;button&gt;&lt;button name&#x3D;&quot;zydl2&quot;&gt;&lt;i class&#x3D;&quot;ion-download&quot;&gt;&lt;&#x2F;i&gt; \u7ebf\u8def2 &lt;&#x2F;button&gt;&lt;button name&#x3D;&quot;zyshare&quot;&gt;&lt;i class&#x3D;&quot;ion-share&quot;&gt;&lt;&#x2F;i&gt; \u514d\u5bc6\u5206\u4eab &lt;&#x2F;button&gt;&#39;).on(&quot;click&quot;,()&#x3D;&gt;&#123;let e&#x3D;u.zdom(1);while(!e.hasAttribute(&quot;name&quot;))e&#x3D;e.parentElement;switch(e.getAttribute(&quot;name&quot;))&#123;case&quot;zyset&quot;:A();break;case&quot;zydl&quot;:ipod.mode&#x3D;1,ipod.btn&#x3D;e.children[0];ipod.btn.setAttribute(&quot;class&quot;,&quot;ion-refresh spinner&quot;),l();break;case&quot;zydl2&quot;:ipod.mode&#x3D;2,ipod.btn&#x3D;e.children[0];ipod.btn.setAttribute(&quot;class&quot;,&quot;ion-refresh spinner&quot;),l();break;case&quot;zyshare&quot;:e.children[0].setAttribute(&quot;class&quot;,&quot;ion-refresh spinner&quot;),(()&#x3D;&gt;&#123;let e&#x3D;&#123;schannel:0,channel_list:&quot;[]&quot;,period:0,fid_list:JSON.stringify((()&#x3D;&gt;&#123;let e&#x3D;[],t&#x3D;a(r());return console.clear(),console.log(&quot;fileList &#x3D;&quot;,t.length),$(&quot;dd.g-clearfix&quot;).each((o,n)&#x3D;&gt;&#123;if(3&#x3D;&#x3D;n.getAttribute(&quot;class&quot;).replace(&quot; open-enable&quot;,&quot;&quot;).trim().split(&quot; &quot;).length)&#123;let o&#x3D;decodeURIComponent($(n).find(&quot;a&quot;).first().text());t.forEach(t&#x3D;&gt;&#123;o&#x3D;&#x3D;t.server_filename&amp;&amp;e.push(t.fs_id)&#125;)&#125;&#125;),console.log(&quot;selectedList &#x3D;&quot;,e.length),e&#125;)())&#125;;$.ajax(&#123;url:&quot;https:&#x2F;&#x2F;pan.baidu.com&#x2F;share&#x2F;set&quot;,method:&quot;POST&quot;,data:u.serialize(e),success(e)&#123;$(&quot;div.btn-group.outline &gt; button[name&#x3D;zyshare] &gt; i&quot;).attr(&quot;class&quot;,&quot;ion-share&quot;),0&#x3D;&#x3D;e.errno?GM_setClipboard(e.link,&quot;text&quot;):alert(&quot;\u64cd\u4f5c\u5931\u8d25&quot;)&#125;&#125;)&#125;)()&#125;&#125;)&#125;&#125;))&#125;,1e3);break;default:S();let t&#x3D;document.querySelector(&quot;#bd &gt; div.bd-aside&quot;);t&amp;&amp;t.setAttribute(&quot;style&quot;,&quot;display: none&quot;)&#125;if(location.host.includes(&quot;wallhaven.cc&quot;))&#123;S(),ipod.defaults&#x3D;&#123;token:&quot;&quot;,jsonrpc:&quot;http:&#x2F;&#x2F;127.0.0.1:6800&#x2F;jsonrpc&quot;,dir:&quot;E:&#x2F;\u56fe\u7247&#x2F;temp&quot;,pi:&quot;1&quot;,extype:&quot;.jpg&quot;&#125;;ipod.aria2&#x3D;u.load(&quot;aria2&quot;),null!&#x3D;ipod.aria2&amp;&amp;&quot;20200106&quot;&#x3D;&#x3D;ipod.aria2.version||(ipod.aria2&#x3D;Object.assign(ipod.defaults),A());let e&#x3D;document.querySelector(&quot;#thumbs&quot;);e&amp;&amp;e.addEventListener(&quot;click&quot;,()&#x3D;&gt;&#123;let e&#x3D;u.zdom(1);fetch(e.getAttribute(&quot;href&quot;)).then(e&#x3D;&gt;e.text()).then(e&#x3D;&gt;&#123;let t&#x3D;e.match(&#x2F;&lt;img id&#x3D;&quot;wallpaper&quot; src&#x3D;&quot;(.+?)&quot;&#x2F;);u.download(t[1])&#125;)&#125;)&#125;if(location.host.includes(&quot;nyaa&quot;))&#123;switch(S(),function()&#123;$(&quot;#navFilter-category&quot;).find(&quot;.btn&quot;).each((e,t)&#x3D;&gt;&#123;t.setAttribute(&quot;style&quot;,&quot;background-color:#fff; color:#333; font-size: 14px&quot;)&#125;),$(&quot;#navFilter-category&quot;).next(&quot;input&quot;).on(&quot;focus&quot;,function()&#123;this.value&#x3D;&quot;&quot;&#125;);$(&quot;i.fa-download&quot;).each((e,t)&#x3D;&gt;&#123;t.parentElement.remove()&#125;),$(&quot;i.fa-magnet&quot;).each((e,t)&#x3D;&gt;&#123;t.setAttribute(&quot;data-url&quot;,t.parentElement.getAttribute(&quot;href&quot;)),t.addEventListener(&quot;click&quot;,i,!1);t.parentElement.removeAttribute(&quot;href&quot;),t.parentElement.setAttribute(&quot;style&quot;,&quot;cursor: default&quot;)&#125;);$(&quot;a[title],a[rel~&#x3D;nofollow]&quot;).each((e,t)&#x3D;&gt;&#123;t.setAttribute(&quot;style&quot;,&quot;cursor: default&quot;),t.setAttribute(&quot;target&quot;,&quot;_blank&quot;)&#125;)&#125;(),ipod.defaults&#x3D;&#123;dir:&quot;E:&#x2F;netdisk&#x2F;bt&quot;,pi:&quot;1&quot;,jsonrpc:&quot;http:&#x2F;&#x2F;127.0.0.1:6800&#x2F;jsonrpc&quot;&#125;,ipod.aria2&#x3D;u.load(&quot;aria2&quot;),null!&#x3D;ipod.aria2&amp;&amp;&quot;20191120&quot;&#x3D;&#x3D;ipod.aria2.version||(ipod.aria2&#x3D;Object.assign(ipod.defaults),A()),location.host)&#123;case&quot;nyaa.fun&quot;:$(&quot;#navbar&quot;).children(&quot;ul&quot;).first().empty().append(&#39;&lt;li&gt;&lt;a id&#x3D;&quot;czyset&quot; href&#x3D;&quot;#&quot;&gt;Aria2\u8bbe\u7f6e&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;search&#x2F;c_1_1_k_0&quot;&gt;\u52a8\u6f2b&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;search&#x2F;c_1_3_k_0&quot;&gt;\u6e38\u620f&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;search&#x2F;c_1_4_k_0&quot;&gt;\u6f2b\u753b&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;search&#x2F;c_1_5_k_0&quot;&gt;\u56fe\u7247&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;search&#x2F;c_2_6_k_0&quot;&gt;\u5199\u771f&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;search&#x2F;c_2_7_k_0&quot;&gt;\u89c6\u9891&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;);break;case&quot;nyaa.mlyx.workers.dev&quot;:case&quot;nyaa.si&quot;:$(&quot;#navbar&quot;).children(&quot;ul&quot;).first().empty().append(&#39;&lt;li&gt;&lt;a id&#x3D;&quot;czyset&quot; href&#x3D;&quot;#&quot;&gt;Aria2\u8bbe\u7f6e&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;1_3&quot;&gt;Anime&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;1_1&quot;&gt;AMV&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;2_0&quot;&gt;Audio&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;5_1&quot;&gt;Graphic&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;5_2&quot;&gt;Photo&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;6_1&quot;&gt;App&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;6_2&quot;&gt;Game&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;);break;case&quot;sukebei.nyaa.si&quot;:$(&quot;#navbar&quot;).children(&quot;ul&quot;).first().empty().append(&#39;&lt;li&gt;&lt;a id&#x3D;&quot;czyset&quot; href&#x3D;&quot;#&quot;&gt;Aria2\u8bbe\u7f6e&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;1_1&quot;&gt;\u52a8\u6f2b&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;1_3&quot;&gt;\u6e38\u620f&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;1_4&quot;&gt;\u6f2b\u753b&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;1_5&quot;&gt;\u56fe\u7247&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;1_2&quot;&gt;\u540c\u4eba&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;2_1&quot;&gt;\u5199\u771f&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;&#x2F;?c&#x3D;2_2&quot;&gt;\u89c6\u9891&lt;&#x2F;a&gt;&lt;&#x2F;li&gt; &lt;li&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;nyaa.si&quot;&gt;nyaa&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;&#39;)&#125;document.querySelector(&quot;#czyset&quot;).addEventListener(&quot;click&quot;,()&#x3D;&gt;&#123;u.zdom(),A()&#125;,!1)&#125;if(location.host.includes(&quot;acg.rip&quot;))&#123;S(),ipod.defaults&#x3D;&#123;dir:&quot;E:&#x2F;netdisk&#x2F;bt&quot;,pi:&quot;1&quot;,jsonrpc:&quot;http:&#x2F;&#x2F;127.0.0.1:6800&#x2F;jsonrpc&quot;&#125;;ipod.aria2&#x3D;u.load(&quot;aria2&quot;),null!&#x3D;ipod.aria2&amp;&amp;&quot;20191120&quot;&#x3D;&#x3D;ipod.aria2.version||(ipod.aria2&#x3D;Object.assign(ipod.defaults),A());history.pushState&#x3D;u.history(&quot;pushState&quot;),window.addEventListener(&quot;pushState&quot;,o);o()&#125;if(location.host.includes(&quot;konachan&quot;))&#123;let e,t,o;if(S(),ipod.defaults&#x3D;&#123;token:&quot;&quot;,jsonrpc:&quot;http:&#x2F;&#x2F;127.0.0.1:6800&#x2F;jsonrpc&quot;,dir:&quot;E:&#x2F;\u56fe\u7247&#x2F;temp&quot;,pi:&quot;1&quot;,extype:&quot;.jpg&quot;&#125;,ipod.aria2&#x3D;u.load(&quot;aria2&quot;),null!&#x3D;ipod.aria2&amp;&amp;&quot;20200106&quot;&#x3D;&#x3D;ipod.aria2.version||(ipod.aria2&#x3D;Object.assign(ipod.defaults),A()),&quot;&#x2F;post&quot;&#x3D;&#x3D;location.pathname)&#123;if(&quot;&quot;&#x3D;&#x3D;(e&#x3D;location.search))return void(location.search&#x3D;&quot;?tags&#x3D;limit%3A56&quot;);if(-1&#x3D;&#x3D;e.indexOf(&quot;limit&quot;))return e&#x3D;e.replace(&#x2F;\++&#x2F;g,&quot;+&quot;).replace(&#x2F;\+$&#x2F;,&quot;&quot;),void(location.search&#x3D;e+&quot;+limit%3A56&quot;);for(document.querySelector(&quot;#site-title&quot;).children[1].remove(),document.querySelector(&quot;#post-list-posts&quot;).addEventListener(&quot;click&quot;,()&#x3D;&gt;&#123;u.download(u.zdom(1).getAttribute(&quot;data-url&quot;))&#125;,!1),t&#x3D;(e&#x3D;document.querySelector(&quot;#tags&quot;)).value?e.value.replace(&quot;rating:safe&quot;,&quot;&quot;).replace(&quot;limit:56&quot;,&quot;&quot;).replace(&#x2F;\s+&#x2F;,&quot; &quot;):&quot;&quot;,e.value&#x3D;&quot; &quot;&#x3D;&#x3D;t?&quot;&quot;:t,e&#x3D;document.querySelectorAll(&quot;a.thumb&quot;),t&#x3D;document.querySelectorAll(&quot;a.directlink&quot;),o&#x3D;0;e.length&gt;o;o++)e[o].setAttribute(&quot;style&quot;,&quot;cursor: default&quot;),e[o].children[0].setAttribute(&quot;data-url&quot;,t[o].getAttribute(&quot;href&quot;))&#125;&#125;&#125;();</span><br></pre></td></tr></table></figure><br>还需设置Tempermonkey才可正常使用，如下：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/baiduwp/Snipaste_2020-02-02_20-35-59.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/baiduwp/Snipaste_2020-02-02_20-36-24.jpg" alt></p>
<h2 id="4-Pandownload"><a href="#4-Pandownload" class="headerlink" title="4. Pandownload"></a>4. Pandownload</h2><p>Pandownload可以说是大名鼎鼎的百度云下载器了，但前段时间百度网盘的整改，一度被封，最近官网又发布了新的版本，恢复了下载，但我体验起来仍不稳定，且有限速的风险，我不推荐用这个，不知道后续更新如何，这里贴出它的<a href="http://pandownload.com/" target="_blank" rel="noopener">官方网站</a>。</p>
<h2 id="5-爱奇艺万能联播"><a href="#5-爱奇艺万能联播" class="headerlink" title="5. 爱奇艺万能联播"></a>5. 爱奇艺万能联播</h2><p>爱奇艺作为百度系下的产品，其应用商店提供的万能联播下载器，可以访问百度网盘下载，且不仅针对视频，对其他文件也有加速效果，但并不都是全部，且限速3M，但比起百度自身限速100k要好得多，也不用担心用第三方封号的危险。<br><a href="http://store.iqiyi.com/" target="_blank" rel="noopener">官网地址</a></p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/baiduwp/Snipaste_2020-02-09_19-30-07.jpg" alt></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>百度网盘</tag>
      </tags>
  </entry>
  <entry>
    <title>Pytorch快速安装教程</title>
    <url>/2020/01/26/Pytorch%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>进入<a href="https://pytorch.org/" target="_blank" rel="noopener">官网</a>，按照你的环境选择，得到下载命令，这里以windows为例，Ubuntu同理</p>
<h2 id="conda安装"><a href="#conda安装" class="headerlink" title="conda安装"></a>conda安装</h2><p>官网得到命令如图：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pytorch%20install/Snipaste_2020-01-26_14-06-32.jpg" alt><br>但由于墙的原因直接使用此命令下载很慢，因此请更换conda源为国内镜像<br>并将命令中 -c pytorch去掉<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">conda install pytorch torchvision cudatoolkit&#x3D;10.1</span><br></pre></td></tr></table></figure><br>即可调用国内镜像下载。</p>
<h2 id="pip安装"><a href="#pip安装" class="headerlink" title="pip安装"></a>pip安装</h2><p>官网得到命令如图：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pytorch%20install/Snipaste_2020-01-26_14-06-05.jpg" alt><br>红色框出部分为官网建议版本，但由于墙的原因直接使用此命令下载很慢，因此将pip下载地址改成国内镜像即可<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip3 install torch&#x3D;&#x3D;&#x3D;1.4.0 torchvision&#x3D;&#x3D;&#x3D;0.5.0 -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>设置Pycharm plots不在tool window显示</title>
    <url>/2020/01/26/%E8%AE%BE%E7%BD%AEPycharm-plots%E4%B8%8D%E5%9C%A8tool-window%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>Pycharm画图默认在tool windows显示，对于观看、操作其极不方便，特别是画动态图时，还会把每帧都输出，因此最好设置让它单独窗口显示。<br>如下图，把勾去掉即可。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/plot/Snipaste_2020-01-26_14-14-13.jpg" alt></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu配置SSH和Xshell连接服务器的教程</title>
    <url>/2020/01/26/Ubuntu%E9%85%8D%E7%BD%AESSH%E5%92%8CXshell%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>SSH分为客户端 openssh-client 和服务器 openssh-server，可以利用以下命令确认电脑<br>上是否安装了客户端和服务器。如果只是想远程登陆别的机器只需要安装客户端（Ubuntu默认安装了客户端），如果要本机的SSH服务就需要安装服务器。<br>首先确认ssh-server是否已经启动了，下面是已经启动过了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dpkg -l | grep ssh</span><br></pre></td></tr></table></figure><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/SSH/2019111014161410.jpg" alt><br>客户端 openssh-client 和服务器 openssh-server安装命令如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install openssh-client</span><br><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/SSH/2019111014161511.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/SSH/2019111014161512.jpg" alt><br>查看网卡对应的服务器IP地址和用户名<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ifconfig | grep inet</span><br></pre></td></tr></table></figure><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/SSH/2019111014161513.jpg" alt><br>远程登录和复制文件，需要我们进入Xshell输入命令。<br>首先登陆Xshell，新建会话，点击连接。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/SSH/2019111014161614.jpg" alt><br>输入登陆服务器IP（刚才查得的），端口22（默认），选择协议SSH。之后确认和连接，<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/SSH/2019111014161615.jpg" alt><br>首次登陆需要用户名和密码，输入进去你Ubuntu的用户名和密码。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/SSH/2019111014161617.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/SSH/2019111014161718.jpg" alt><br>查看信息是否连接，进入服务器。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/SSH/2019111014161719.jpg" alt></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>SSH</tag>
        <tag>Xshell</tag>
      </tags>
  </entry>
  <entry>
    <title>Pycharm连接远程服务器并实现远程调试</title>
    <url>/2020/01/26/Pycharm%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%B9%B6%E5%AE%9E%E7%8E%B0%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h2 id="Pycharm连接远程服务器"><a href="#Pycharm连接远程服务器" class="headerlink" title="Pycharm连接远程服务器"></a><a id="more"></a>Pycharm连接远程服务器</h2><ul>
<li>进入配置页面<br>Pycharm菜单栏，如下图所示，依次点击 Tools -&gt; Deployment -&gt; Configration…<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm%20remote%20control/20180829161124726.png" alt></li>
<li>配置连接服务器<br>如下图。name随便写个就行。<br>Connection下，协议最好选择sftp，接下来填写服务器主机IP，用户名，密码。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm%20remote%20control/2018082916114659.png" alt><br>点击Test SFTP connection会发现，如果连接成功会提示你如下<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm%20remote%20control/20180829161158768.png" alt><br>在Mapping下，选择连接windows下的那部分代码和服务器上代码相连，本地Local path，服务器path，apply，OK，表示已经把本地的代码和服务器代码连接上了。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm%20remote%20control/20180829161217756.png" alt></li>
<li>上传代码，使得本地代码和服务器代码保持同步<br>点击Upload to name（刚才填写的远程服务器名字），即可上传代码。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm%20remote%20control/20180829161235445.png" alt><br>若配置有多个不同服务器或同一个服务器配置了多个 服务器上传路径（Deployment Path），可选择 Upload to…，上传到不同的服务器/路径。</li>
</ul>
<h2 id="配置远程Python解释器"><a href="#配置远程Python解释器" class="headerlink" title="配置远程Python解释器"></a>配置远程Python解释器</h2><p>使用服务器调试Python程序的前提时在服务器上安装了Python解释器，如果没安装，请先安装。</p>
<ul>
<li>将Python解释器设置为远程服务器上的<br>在菜单栏，File -&gt; Settings… -&gt; Project ×× -&gt; Project Interpreter，点击右侧 Add按钮，添加解释器。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm%20remote%20control/20180829161249360.png" alt><br>选择SSH Interpreter，填写服务器的 Host 地址，端口Port，用户名Username，填好后，下一步Next。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm%20remote%20control/20180829161306837.png" alt><br>填写密码 Password，下一步Next。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm%20remote%20control/20180829161340812.png" alt><br>选择远程服务器上Python解释器的位置，服务器上的远程同步文件夹Sync folders（即之前配置的服务器Path），可以选择多个。如果不知道Python安装在哪，可以远程连接服务器后，使用 命令 which python 找到Python安装位置。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm%20remote%20control/20180829161653972.jpg" alt><br>Finish，配置结束。该项目现在使用的就是远程服务器上的Python解释器了。以后的项目若想/不想使用该解释器，手动更改解释器即可。</li>
</ul>
<h2 id="使用远程解释器运行本地Python程序"><a href="#使用远程解释器运行本地Python程序" class="headerlink" title="使用远程解释器运行本地Python程序"></a>使用远程解释器运行本地Python程序</h2><p>将测试代码上传至远程服务器（Tooles -&gt; Deployment -&gt; Upload to ××）。<br>Run测试代码，可以看到现在代码是在远程服务器上运行了。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Pycharm</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下Rime安装配置</title>
    <url>/2020/01/26/Ubuntu%E4%B8%8BRime%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>官方网站及文档：<a href="https://rime.im/" target="_blank" rel="noopener">https://rime.im/</a><br>输入法平台：iBus<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install ibus-rime</span><br></pre></td></tr></table></figure><br>在设置人区域和语言选择设置输入法为Rime<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/rime/1762213-d899b160aa87f944.png" alt><br>根据个人喜好修改配置文件：一般用户直接修改default.yaml即可。修改前最好备份一下。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~&#x2F;.config&#x2F;ibus&#x2F;rime&#x2F;default.yaml</span><br><span class="line"></span><br><span class="line">schema_list:   </span><br><span class="line">  - schema: luna_pinyin_simp #simp是简体，第一位是默认输入法 </span><br><span class="line">menu:</span><br><span class="line">  page_size: 9 #每页候选词个数</span><br><span class="line">ascii_composer:</span><br><span class="line">  switch_key:</span><br><span class="line">    Shift_L: commit_code #左shift提交字母</span><br></pre></td></tr></table></figure><br>重启ibus-deamon<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ibus restart</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>arxiv文章下载加速</title>
    <url>/2020/01/26/arxiv%E6%96%87%E7%AB%A0%E4%B8%8B%E8%BD%BD%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>对于我们这样的深度学习屌丝来说，没钱，没资源，没数据，没时间，只能看看别人的论文生存了，经常会到arxiv上下载一些文章，比如cvpr的文章，但是，由于国内封锁，下载很慢，甚至接连几天打不开arxiv的网站，咋办？<br>强烈推荐使用中科院arxiv的镜像地址：<a href="http://xxx.itp.ac.cn" target="_blank" rel="noopener">http://xxx.itp.ac.cn</a><br>具体使用方法：把要访问 arxiv 链接中的域名从 <a href="https://arxiv.org" target="_blank" rel="noopener">https://arxiv.org</a> 换成 <a href="http://xxx.itp.ac.cn" target="_blank" rel="noopener">http://xxx.itp.ac.cn</a> ,<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如:</span><br><span class="line">https:&#x2F;&#x2F;arxiv.org&#x2F;pdf&#x2F;1608.00367</span><br><span class="line">换成：</span><br><span class="line">http:&#x2F;&#x2F;xxx.itp.ac.cn&#x2F;pdf&#x2F;1608.00367.pdf</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">或者将：</span><br><span class="line">https:&#x2F;&#x2F;arxiv.org&#x2F;abs&#x2F;1608.00367</span><br><span class="line">换成：</span><br><span class="line">http:&#x2F;&#x2F;xxx.itp.ac.cn&#x2F;abs&#x2F;1608.00367</span><br></pre></td></tr></table></figure><br>即可打开，是不是很爽？</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>arxiv</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu16.04安装opencv教程</title>
    <url>/2020/01/19/ubuntu16.04%E5%AE%89%E8%A3%85opencv%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>1.去官网下载opencv，在本教程中选用的时opencv3.4.1，其他版本的配置方法异曲同工。<br><a href="http://opencv.org/releases.html" target="_blank" rel="noopener">下载链接</a>，选择sources版本<br>2.解压下载下来的zip包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unzip opencv-3.4.1.zip</span><br></pre></td></tr></table></figure><br>3.进入到解压后的文件包中<br>4.安装依赖库和cmake ，如果提醒需要apt-get update，那就先sudo su进入root权限，再sudo apt-get update，然后在执行下面命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install cmake</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential libgtk2.0-dev libavcodec-dev libavformat-dev libjpeg.dev libtiff4.dev libswscale-dev libjasper-dev</span><br></pre></td></tr></table></figure><br>在第二步中若提示依赖版本问题，原因在于apt源太旧，更换新的源，再进行安装。<br>5.安装完cmake之后执行命令 ,创建编译文件夹，不创建的会提示（如下图）<br>In-source builds are not allowed.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir my_build_dir</span><br><span class="line">cd my_build_dir</span><br></pre></td></tr></table></figure><br>6.cmake一下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE&#x3D;Release -D CMAKE_INSTALL_PREFIX&#x3D;&#x2F;usr&#x2F;local ..</span><br></pre></td></tr></table></figure><br>注意：如果已经在新的文件夹中编译，但是还会出现之前的报错，把cmakecache.txt删了再编译就可<br>期间可能会下载一个东西，等待一会儿就OK<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/opencv/20171005220631735.png" alt><br>7.执行命令，漫长的编译过程<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo make</span><br></pre></td></tr></table></figure><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/opencv/20171005214720292.png" alt><br>8.执行命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/opencv/20171005214847504.png" alt><br>9.sudo make install 执行完毕后OpenCV编译过程就结束了，接下来就需要配置一些OpenCV的编译环境首先将OpenCV的库添加到路径，从而可以让系统找到<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;ld.so.conf.d&#x2F;opencv.conf</span><br></pre></td></tr></table></figure><br>执行此命令后打开的可能是一个空白的文件，不用管，只需要在文件末尾添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;lib</span><br></pre></td></tr></table></figure><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/opencv/20171005215009149.png" alt><br>10.执行如下命令使得刚才的配置路径生效<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure><br>11.配置bash<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;bash.bashrc</span><br></pre></td></tr></table></figure><br>在最末尾添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">PKG_CONFIG_PATH&#x3D;$PKG_CONFIG_PATH:&#x2F;usr&#x2F;local&#x2F;lib&#x2F;pkgconfig  </span><br><span class="line">export PKG_CONFIG_PATH</span><br></pre></td></tr></table></figure><br>保存，执行如下命令使得配置生效<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source &#x2F;etc&#x2F;bash.bashrc</span><br></pre></td></tr></table></figure><br>更新<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo updatedb</span><br></pre></td></tr></table></figure><br>12.至此所有的配置都已经完成<br>下面用一个小程序测试一下</p>
<p>找到<br>cd到opencv-3.4.1/samples/cpp/example_cmake目录下<br>我们可以看到这个目录里官方已经给出了一个cmake的example我们可以拿来测试下<br>按顺序执行<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake .</span><br><span class="line">make</span><br><span class="line">.&#x2F;opencv_example</span><br></pre></td></tr></table></figure><br>即可看到打开了摄像头，在左上角有一个hello opencv<br>即表示配置成功</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Opencv</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu快速搭建C++开发环境（VS Code编辑器）</title>
    <url>/2020/01/19/Ubuntu%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAC++%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%EF%BC%88VS-Code%E7%BC%96%E8%BE%91%E5%99%A8%EF%BC%89/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>以下安装的是g++-8（目前最新）和Visual Studio Code，此方法适用于Ubuntu 14.04 64位、Ubuntu 16.04 32位/64位、Ubuntu 18.04，Ubuntu 14.04 32位及以下系统无效。打开终端并且输入以下命令即可。</p>
<h2 id="安装g-8"><a href="#安装g-8" class="headerlink" title="安装g++-8"></a>安装g++-8</h2><ul>
<li>安装software-properties-common：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install software-properties-common</span><br></pre></td></tr></table></figure></li>
<li>添加PPA到库并更新（会提示按回车继续执行，此时按回车即可）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r&#x2F;test</span><br></pre></td></tr></table></figure></li>
<li>更新软件信息：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li>安装g++：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install g++-8</span><br></pre></td></tr></table></figure></li>
<li>将g++指向g++-8：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ln -sf &#x2F;usr&#x2F;bin&#x2F;g++-8 &#x2F;usr&#x2F;bin&#x2F;g++</span><br></pre></td></tr></table></figure></li>
<li>显示g++版本号，如果正常显示版本号意味着安装成功：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">g++ --version</span><br></pre></td></tr></table></figure>
<h2 id="安装Visual-Studio-Code"><a href="#安装Visual-Studio-Code" class="headerlink" title="安装Visual Studio Code"></a>安装Visual Studio Code</h2></li>
<li>安装libgconf库：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y libgconf-2-4</span><br></pre></td></tr></table></figure></li>
<li>安装git：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install git</span><br></pre></td></tr></table></figure></li>
<li>添加PPA到库并更新（会提示按回车继续执行，此时按回车即可）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ubuntu-desktop&#x2F;ubuntu-make</span><br></pre></td></tr></table></figure></li>
<li>更新软件信息：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li>
<li>安装ubuntu-make：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get -y install ubuntu-make</span><br></pre></td></tr></table></figure></li>
<li>通过ubuntu-make安装Visual Studio Code；过程中会询问安装路径，此时不需要修改直接按回车即可；然后会询问是否接受协议，此时输入a然后回车即可：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo umake ide visual-studio-code</span><br></pre></td></tr></table></figure></li>
<li>创建软链接到程序目录下：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ln -sf &#96;env | grep ^HOME&#x3D; | cut -c 6-&#96;&#x2F;.local&#x2F;share&#x2F;umake&#x2F;ide&#x2F;visual-studio-code&#x2F;bin&#x2F;code &#x2F;usr&#x2F;bin&#x2F;code</span><br></pre></td></tr></table></figure></li>
<li>创建项目目录：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;Projects</span><br></pre></td></tr></table></figure></li>
<li>显示Visual Studio Code版本号，如果正常显示版本号意味着安装成功：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code --version</span><br></pre></td></tr></table></figure></li>
<li>运行VS Code：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code</span><br></pre></td></tr></table></figure></li>
<li>安装中文语言包：<br>1.按下键盘Ctrl+Shift+X<br>2.在输入框里输入Chinese<br>3.按下中文(简体)后面的install<br>4.安装完后按下Ctrl+Shift+P打开命令面板<br>5.输入config后选择配置语言命令<br>6.选择Configure Display Language<br>7.将”locale”:”en”改成”locale”: “zh-cn”，然后按下键盘Ctrl+S保存源文件<br>8.关闭VS Code<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/VScode/11655830-047109e9a0a075af.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/VScode/11655830-8c9880935d6bcbe8.png" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/VScode/11655830-43717f65ac98f10e.png" alt><h2 id="创建第一个C-项目（以下步骤除非有特殊说明，否则每次创建项目都要执行一次）："><a href="#创建第一个C-项目（以下步骤除非有特殊说明，否则每次创建项目都要执行一次）：" class="headerlink" title="创建第一个C++项目（以下步骤除非有特殊说明，否则每次创建项目都要执行一次）："></a>创建第一个C++项目（以下步骤除非有特殊说明，否则每次创建项目都要执行一次）：</h2></li>
<li>创建项目目录cppdemo，用于学习创建第一个C++项目，并进入cppdemo目录中：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir ~&#x2F;Projects&#x2F;cppdemo &amp;&amp; cd ~&#x2F;Projects&#x2F;cppdemo</span><br></pre></td></tr></table></figure></li>
<li>创建配置目录：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir .&#x2F;.vscode</span><br></pre></td></tr></table></figure></li>
<li>添加编译配置文件（输入以下内容然后按回车）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; .vscode&#x2F;tasks.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class="line">    &quot;tasks&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;label&quot;: &quot;build&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class="line">            &quot;command&quot;: &quot;g++&quot;,</span><br><span class="line">            &quot;args&quot;: [</span><br><span class="line">                &quot;-std&#x3D;c++17&quot;,</span><br><span class="line">                &quot;-Wall&quot;,</span><br><span class="line">                &quot;-Wextra&quot;,</span><br><span class="line">                &quot;-g&quot;,</span><br><span class="line">                &quot;-ggdb&quot;,</span><br><span class="line">                &quot;mycpp.cpp&quot;,</span><br><span class="line">                &quot;-o&quot;,</span><br><span class="line">                &quot;demoapp.out&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;group&quot;: &quot;build&quot;,</span><br><span class="line">            &quot;presentation&quot;: &#123;</span><br><span class="line">                &quot;reveal&quot;: &quot;always&quot;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &quot;problemMatcher&quot;: &quot;\$gcc&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
<li>添加运行配置文件（输入以下内容然后按回车）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &gt; .vscode&#x2F;launch.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;(gdb) Launch&quot;,</span><br><span class="line">            &quot;type&quot;: &quot;cppdbg&quot;,</span><br><span class="line">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class="line">            &quot;program&quot;: &quot;\$&#123;workspaceFolder&#125;&#x2F;demoapp.out&quot;,</span><br><span class="line">            &quot;args&quot;: [],</span><br><span class="line">            &quot;stopAtEntry&quot;: false,</span><br><span class="line">            &quot;cwd&quot;: &quot;\$&#123;workspaceFolder&#125;&quot;,</span><br><span class="line">            &quot;environment&quot;: [],</span><br><span class="line">            &quot;externalConsole&quot;: true,</span><br><span class="line">            &quot;MIMode&quot;: &quot;gdb&quot;,</span><br><span class="line">            &quot;setupCommands&quot;: [</span><br><span class="line">                &#123;</span><br><span class="line">                    &quot;description&quot;: &quot;Enable pretty-printing for gdb&quot;,</span><br><span class="line">                    &quot;text&quot;: &quot;-enable-pretty-printing&quot;,</span><br><span class="line">                    &quot;ignoreFailures&quot;: true</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            &quot;preLaunchTask&quot;: &quot;build&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
<li>添加智能提示配置文件（输入以下内容然后按回车）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if [ &#96;getconf LONG_BIT&#96; -eq &quot;64&quot; ]; then</span><br><span class="line">cat &gt; .vscode&#x2F;c_cpp_properties.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Linux&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&#x2F;c++&#x2F;8&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&#x2F;c++&#x2F;8&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&#x2F;c++&#x2F;8&#x2F;backward&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;8&#x2F;include&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;local&#x2F;include&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;8&#x2F;include-fixed&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&quot;,</span><br><span class="line">                &quot;$&#123;workspaceRoot&#125;&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [],</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;clang-x64&quot;,</span><br><span class="line">            &quot;browse&quot;: &#123;</span><br><span class="line">                &quot;path&quot;: [</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;include&#x2F;c++&#x2F;8&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&#x2F;c++&#x2F;8&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;include&#x2F;c++&#x2F;8&#x2F;backward&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;8&#x2F;include&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;local&#x2F;include&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;x86_64-linux-gnu&#x2F;8&#x2F;include-fixed&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;include&#x2F;x86_64-linux-gnu&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;include&quot;,</span><br><span class="line">                    &quot;$&#123;workspaceRoot&#125;&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;limitSymbolsToIncludedHeaders&quot;: true,</span><br><span class="line">                &quot;databaseFilename&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 3</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">else</span><br><span class="line">cat &gt; .vscode&#x2F;c_cpp_properties.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">    &quot;configurations&quot;: [</span><br><span class="line">        &#123;</span><br><span class="line">            &quot;name&quot;: &quot;Linux&quot;,</span><br><span class="line">            &quot;includePath&quot;: [</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&#x2F;c++&#x2F;8&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&#x2F;i386-linux-gnu&#x2F;c++&#x2F;8&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&#x2F;c++&#x2F;8&#x2F;backward&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;i686-linux-gnu&#x2F;8&#x2F;include&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;local&#x2F;include&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;i686-linux-gnu&#x2F;8&#x2F;include-fixed&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&#x2F;i386-linux-gnu&quot;,</span><br><span class="line">                &quot;&#x2F;usr&#x2F;include&quot;,</span><br><span class="line">                &quot;$&#123;workspaceRoot&#125;&quot;</span><br><span class="line">            ],</span><br><span class="line">            &quot;defines&quot;: [],</span><br><span class="line">            &quot;intelliSenseMode&quot;: &quot;clang-x64&quot;,</span><br><span class="line">            &quot;browse&quot;: &#123;</span><br><span class="line">                &quot;path&quot;: [</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;include&#x2F;c++&#x2F;8&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;include&#x2F;i386-linux-gnu&#x2F;c++&#x2F;8&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;include&#x2F;c++&#x2F;8&#x2F;backward&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;i686-linux-gnu&#x2F;8&#x2F;include&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;local&#x2F;include&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;lib&#x2F;gcc&#x2F;i686-linux-gnu&#x2F;8&#x2F;include-fixed&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;include&#x2F;i386-linux-gnu&quot;,</span><br><span class="line">                    &quot;&#x2F;usr&#x2F;include&quot;,</span><br><span class="line">                    &quot;$&#123;workspaceRoot&#125;&quot;</span><br><span class="line">                ],</span><br><span class="line">                &quot;limitSymbolsToIncludedHeaders&quot;: true,</span><br><span class="line">                &quot;databaseFilename&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    &quot;version&quot;: 3</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li>创建C++源文件mycpp.cpp（代码就是写在这个文件）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">touch mycpp.cpp</span><br></pre></td></tr></table></figure></li>
<li>用Visual Studio Code打开当前工作环境（不要忽略最后的点哟）：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">code .</span><br></pre></td></tr></table></figure></li>
<li>双击mycpp.cpp打开文件，第一次会提示安装C++插件，点击安装，然后等待右下角消息安装完成（只需执行一次，以后都不需要再执行）。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/VScode/11655830-84d0b75234245983.png" alt></li>
<li>双击打开mycpp.cpp，然后输入以下代码：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; &quot;小古银的C++教程&quot; &lt;&lt; std::endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/VScode/11655830-5c0e4151fa446bb1.png" alt></li>
<li>按下Ctrl+Shift+B，然后选择build，就会开始编译。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/VScode/11655830-9086cfb5ebae16ca.png" alt></li>
<li>编译完后，在终端窗口按回车键关闭终端。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/VScode/11655830-422767a1784b76a6.png" alt></li>
<li>点击菜单栏中的终端，然后点击新建终端，就会打开终端窗口。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/VScode/11655830-86304c028d93ecc7.png" alt></li>
<li>然后在终端输入以下内容，就会运行程序：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;demoapp.out</span><br></pre></td></tr></table></figure></li>
<li>运行程序将会显示小古银的C++教程。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/VScode/11655830-4ecc19bb3b0c9794.png" alt><br>此时，第一个项目，也就是第一个程序就完成了。</li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu美化</title>
    <url>/2020/01/19/Ubuntu%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><ul>
<li>安装Unity-tweak-tool<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install unity-tweak-tool</span><br></pre></td></tr></table></figure>
<img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/Ubuntu%E7%BE%8E%E5%8C%96/20180909004455285.png" alt></li>
<li>更新源<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:noobslab&#x2F;themes</span><br><span class="line">sudo apt-add-repository ppa:numix&#x2F;ppa </span><br><span class="line">sudo apt update</span><br></pre></td></tr></table></figure></li>
<li>安装主题<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:noobslab&#x2F;themes  </span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install flatabulous-theme </span><br><span class="line">sudo apt-get install arc-theme</span><br></pre></td></tr></table></figure></li>
<li>安装图标<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:noobslab&#x2F;icons  </span><br><span class="line">sudo apt-get update  </span><br><span class="line">sudo apt-get install ultra-flat-icons </span><br><span class="line">sudo apt-get install numix-icon-theme-circle</span><br></pre></td></tr></table></figure></li>
<li>选择主题<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/Ubuntu%E7%BE%8E%E5%8C%96/20180909005108750.png" alt></li>
<li>选择图标<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/Ubuntu%E7%BE%8E%E5%8C%96/20180909005211146.png" alt></li>
<li>最终效果<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/Ubuntu%E7%BE%8E%E5%8C%96/20180909005447430.png" alt></li>
</ul>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows10安装ubuntu16.04双系统教程</title>
    <url>/2020/01/19/Windows10%E5%AE%89%E8%A3%85ubuntu16.04%E5%8F%8C%E7%B3%BB%E7%BB%9F%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>BIOS模式有传统的MBR模式和新式UEFI模式，这将对安装双系统的方法产生直接影响。目前来看，大部分电脑都属于新式UEFI模式，不过也存在一些老机子仍然属于传统MBR模式。本教程只介绍新式UEFI模式下的双系统安装方法，如果你的电脑属于传统MBR模式，强烈建议你重装windows系统来更新BIOS模式到UEFI。</p>
<h2 id="制作系统盘"><a href="#制作系统盘" class="headerlink" title="制作系统盘"></a>制作系统盘</h2><p>需要准备以下工具：<br>①ubuntu系统镜像<br>②刻录软件，推荐”软碟通”，会提示注册，选择继续试用就好<br>③一个大于 2G 的 U 盘<br>1.安装并打开软碟通，插上 U 盘，并且最好备份你的 U 盘，因为之后需要格式化；<br>2.进入软碟通，选择文件，浏览到你的ubuntu镜像所在的目录，选择ubuntu镜像文件，双击打开，如图：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422030.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422031.jpg" alt><br>3.在软碟通界面菜单栏选择”启动”，选择”写入硬盘映像”，如图所示：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422032.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422033.jpg" alt><br>接下来很重要，注意次序：<br>1）看你的硬盘驱动器是否对应的是你的 U 盘（必须是） ，一般默认是；<br>2）看映像文件是否对应你的 ubuntu 镜像；<br>3）如果上述均没有错误，选择格式化，之后就会格式化你的 U 盘；<br>4）在 U 盘格式化完毕之后，选择写入，之后就是慢慢等待了，等待写入完毕；</p>
<h2 id="在windows下创建空白分区"><a href="#在windows下创建空白分区" class="headerlink" title="在windows下创建空白分区"></a>在windows下创建空白分区</h2><p>说明：这一步是为ubuntu系统分配空间，单硬盘和双硬盘存在一点区别。<br>1.”此电脑”点击右键，点击”管理”，点击”磁盘管理”：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422034.jpg" alt><br>2.为ubuntu分配空间<br>（1）如果是单硬盘，任选一个盘，在该盘点击右键，选择压缩卷，如下，输入压缩空间量，单位为M，如果空间充足，建议分出80G或100G，空间不足也可以分60G（1G=1024M）：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/20190520082545559.png" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422136.jpg" alt><br>（2）如果是双硬盘，需要先在系统盘分出200M的空白分区用来安装ubuntu的启动项，然后再在另一块硬盘分出空间，在该盘点击右键，选择压缩卷，如下，输入压缩空间量，单位为M,如果空间充足，建议分出80G或100G，空间不足也可以分60G（1G=1024M）<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422138.jpg" alt></p>
<h2 id="用做好的系统盘安装系统"><a href="#用做好的系统盘安装系统" class="headerlink" title="用做好的系统盘安装系统"></a>用做好的系统盘安装系统</h2><p>先点击桌面右下角：电源图标→电源设置→电源和睡眠→其他电源设置→选择电源按钮的功能→更改当前不可用的设置，将“关机设置”中的快速启动项关闭，保存修改。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/20190520084629381.png" alt>若呈灰色，无法修改，win+r进入gpedit.msc将系统配置中的关机选项，快速启动改为禁用，重启完即可更改。<br>1.插好系统盘，重启电脑，开机进bios，在Security页面，关掉secure boot（不同电脑secure boot可能在不同位置），然后到Boot页面，如果有Fast Boot这一项（部分联想电脑有），也把它关掉，没有忽略；然后保存更改，在Boot页面下方启动项选择 USB启动，回车，如果顺利进入安装页面，继续往下做；如果点击USB启动项无法进入，保存并退出，电脑会重启，根据自己电脑按相应的键进boot manager，找到USB启动项，回车即可进入。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422139.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422140.jpg" alt><br>2.然后会进入这个界面，选择Install Ubuntu，回车确认<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422141.jpg" alt><br>3.安装过程记住断网，否则很慢<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422143.jpg" alt><br>全不选，边安装边下载更新很慢，点击”继续”<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/20171229140050194.png" alt><br>出现以下或类似界面，一定要选择”其他选项”，因为需要手动分区<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422145.jpg" alt><br>分区界面如下<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422246.jpg" alt><br>在这里，我们进行手动分区，选择留出的空闲分区，点击”+”进行分区，如下：<br>1）efi：如果是单硬盘，在唯一的一个空闲分区上添加，大小200M，逻辑分区，空间起始位置，用于efi；如果是双硬盘，找到事先分好的200M空闲分区添加，逻辑分区，空间起始位置，用于efi。这个分区必不可少，用于安装ubuntu启动项。<br>2）swap:中文是”交换空间”，充当ubuntu的虚拟内存，一般的大小与电脑物理内存一样，可以将其分为 8G，逻辑分区，空间起始位置，用于”swap”或”交换空间”<br>3) /:这是ubuntu 的根目录,用于安装系统和软件，相当于windows的C盘，我们将其分为 20G，主分区，空间起始位置，用于”ext4日志文件系统”，挂载点为”/“（根据你的磁盘空间调整，可以大一点，毕竟ubuntu装软件都是默认装在根目录的）<br>4）/home:相当于windows的其他盘，剩下的全分给它，逻辑分区，空间起始位置，用于”ext4日志文件系统”，挂载点为”/home”<br>分区完毕，在分区界面的下方，选择安装启动项的位置，我们刚刚不是创建了200M的efi分区吗，现在你看看这个区前面的编号是多少，比如是/dev/sda1,不同的机子会有不同的编号，下拉列表选择这个efi分区编号（这里一定要注意，windows的启动项也是efi文件，大小大概是100M，而我们创建的ubuntu的efi大小是200M，一定要选对），之后点击”Install Now”<br>设置地区不重要，按你需要设置，也可以直接继续，不影响<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422248.jpg" alt><br>键盘布局默认是英语的，建议不改（默认中文也行）<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422249.jpg" alt><br>这里设置用户，自己输入就可以了，例如英文字母，尽量简单点，密码也简单点<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422250.jpg" alt><br>系统开始安装，耐心等待安装完毕就可以了<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422251.jpg" alt><br>全部完成之后，会提醒你重启，把U盘拔了，点”现在重启”，如果卡死就强制关机再重启就好<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422252.jpg" alt><br>重启后你会看到以下界面，第一项是ubuntu启动项，第二项是ubuntu高级设置，第三项是windows启动项，第四项不用管，默认选择的是第一个，回车进ubuntu系统<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/%E5%8F%8C%E7%B3%BB%E7%BB%9F/2019121214422253.jpg" alt><br>若没有出现，则进入bios将启动顺序改为Ubuntu先。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>CMake Error at /usr/share/cmake-3.5/Modules/FindQt4.cmake:634 (message)</title>
    <url>/2020/01/19/CMake%20Error/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>编译工程时出现cmake找不到Qt4的问题,如下:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CMake Warning at &#x2F;usr&#x2F;share&#x2F;cmake-3.5&#x2F;Modules&#x2F;FindQt4.cmake:626 (message):</span><br><span class="line">&#x2F;usr&#x2F;bin&#x2F;qmake-qt4 reported QT_INSTALL_LIBS as &quot;&#x2F;usr&#x2F;lib&#x2F;x86_64-linux-gnu&quot;</span><br><span class="line"> but QtCore could not be found there.  </span><br><span class="line"> Qt is NOT installed correctly for the target build environment.</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CMake Error at &#x2F;usr&#x2F;share&#x2F;cmake-3.5&#x2F;Modules&#x2F;FindQt4.cmake:634 (message):</span><br><span class="line">  Could NOT find QtCore.</span><br></pre></td></tr></table></figure><br>解决办法<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install cmake gcc g++ qt&#123;4,5&#125;-qmake libqt4-dev</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>对目录 /var/lib/apt/lists/ 加锁 问题解决方法</title>
    <url>/2020/01/19/%E5%AF%B9%E7%9B%AE%E5%BD%95-varlibaptlists-%E5%8A%A0%E9%94%81-%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo rm &#x2F;var&#x2F;lib&#x2F;apt&#x2F;lists&#x2F;lock</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu apt 更换为国内的源</title>
    <url>/2020/01/19/ubuntu-apt-%E6%9B%B4%E6%8D%A2%E4%B8%BA%E5%9B%BD%E5%86%85%E7%9A%84%E6%BA%90/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>备份原来的源：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp &#x2F;etc&#x2F;apt&#x2F;sources.list &#x2F;etc&#x2F;apt&#x2F;sources.list.bak</span><br></pre></td></tr></table></figure><br>更换源:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;apt&#x2F;sources.list</span><br></pre></td></tr></table></figure><br>将里面文件内容全部替换成下面：<br><a href="https://wiki.ubuntu.org.cn/%E6%A8%A1%E6%9D%BF:16.04source" target="_blank" rel="noopener">点击此处获得最新源</a><br>保存退出<br>执行更新：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10和Ubuntu双系统下时间不对问题</title>
    <url>/2020/01/19/Win10%E5%92%8CUbuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%B8%8B%E6%97%B6%E9%97%B4%E4%B8%8D%E5%AF%B9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>电脑安装完win10和Ubuntu双系统后，Ubuntu时间总会和Windows时间相差8小时，这是因为windows认为bios时间是本地时间，Ubuntu认为bios时间是UTC时间，所以我们需要将Ubuntu时间改成本地时间。<br>执行这条语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">timedatectl set-local-rtc 1 --adjust-system-clock</span><br></pre></td></tr></table></figure>
<p>重启进入windows，时间设置中点击立即同步即可解决。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获取OneDrive 5T网盘空间(可升级25T)</title>
    <url>/2020/01/16/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96OneDrive-5T%E7%BD%91%E7%9B%98%E7%A9%BA%E9%97%B4(%E5%8F%AF%E5%8D%87%E7%BA%A725T)/</url>
    <content><![CDATA[<p><a href="https://blog.wulel.com/post/how-to-get-5t-onedrive/" target="_blank" rel="noopener">点此跳转</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Onedrive</tag>
      </tags>
  </entry>
  <entry>
    <title>使 Onedrive 同步任意文件夹</title>
    <url>/2020/01/16/%E4%BD%BF-Onedrive-%E5%90%8C%E6%AD%A5%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%A4%B9/</url>
    <content><![CDATA[<h1 id><a href="#" class="headerlink" title></a><a id="more"></a></h1><p>onedrive默认只同步指定的onedrive文件夹，为了让它同步其他的文件夹，可以在命令行（以管理员身份运行的）使用以下代码创建一个软链接。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mklink &#x2F;j &quot;onedrive文件夹地址\需要同步的文件夹名&quot; &quot;需要同步的文件夹地址&quot;</span><br></pre></td></tr></table></figure><br>比如说我的onedrive在D:\Onedrive，我的目标文件夹test在D:\。那么<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mklink &#x2F;j &quot;D:\Onedrive\test&quot; &quot;D:\test&quot;</span><br></pre></td></tr></table></figure><br>如果成功的的话，会提示<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/onedrive/1392594-20181005094204092-1998469109.png" alt></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Onedrive</tag>
      </tags>
  </entry>
  <entry>
    <title>目标检测调研</title>
    <url>/2020/01/14/%E7%9B%AE%E6%A0%87%E6%A3%80%E6%B5%8B%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h3 id="目标检测的任务"><a href="#目标检测的任务" class="headerlink" title=" 目标检测的任务"></a><a id="more"></a> 目标检测的任务</h3><ul>
<li><strong>分类-Classification</strong>：解决“是什么？”的问题，即给定一张图片或一段视频判断里面包含什么类别的目标。</li>
<li><strong>定位-Location</strong>：解决“在哪里？”的问题，即定位出这个目标的的位置。</li>
<li><strong>检测-Detection</strong>：解决“是什么？在哪里？”的问题，即定位出这个目标的的位置并且知道目标物是什么。</li>
<li><strong>分割-Segmentation</strong>：分为实例的分割（Instance-level）和场景分割（Scene-level），解决“每一个像素属于哪个目标物或场景”的问题。</li>
</ul>
<h3 id="所面临的挑战"><a href="#所面临的挑战" class="headerlink" title="所面临的挑战"></a>所面临的挑战</h3><ul>
<li>目标可能出现在图像的任何位置。</li>
<li>目标有各种不同的大小。</li>
<li>目标可能有各种不同的形状。</li>
</ul>
<h3 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h3><p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/deep_learning_object_detection_dataset.PNG" alt></p>
<ul>
<li><p>Pascal Visual Object Classes(05-12) 是计算机视觉领域最重要的赛事之一。包含多任务，图像分类、目标检测、语义分割和行为检测。主要有两个版本的 Pascal-VOC 用于检测：VOC07 和 VOC12，前者包含 5K 张训练图像，共 12K 个标注目标。后者包含 11K 张训练图像，共 27K 个标注目标。两个数据集中包含了 20 个生活中常见的目标类（Person：person; Animal：bird, cat, cow, dog, horse, sheep; Vehicle：aeroplane, bicycle, boat, bus, car, motor-bike, train; Indoor: bottle, chair, dining table, potted plant, sofa, tv/monitor）</p>
</li>
<li><p>ImageNet Large Scale Visual Recognition Challenge(10-17) 包含检测挑战赛。Imagenet数据集有1400多万幅图片，涵盖2万多个类别，ILSVRC比赛会每年从ImageNet数据集中抽出部分样本, 检测数据集包括 200 类视觉目标，图像/目标比 VOC 大两个数量级。例如，ILSVRC-14 包含517K 图像以及 534K 注释目标。</p>
</li>
<li><p>MS-COCO 是当前最有挑战性的目标检测数据集。从 15 年开始举办比赛。它的目标类别比 ILSVRC 少，但是目标实例更多。例如，MS-COCO-17 包含 164K 张图像，来自 80 类的 897K 个标注目标。与 VOC 和 ILSVRC 相比，MS-COCO 除了边界框注释以外，每个目标通过实例分割进一步标注来帮助精确定位。此外，它包含更多小目标（面积小于图像的 1%），以及密集定位目标。这些特点使 MS−COCO中的目标分布更接近于真实世界。</p>
</li>
<li><p>Open Images</p>
<p>2018 年推出了 Open ImagesOpen~ImagesOpen Images 检测挑战赛。包含两个任务：</p>
<p>标准目标检测<br>视觉关系检测，用于检测特定关系中的匹配目标</p>
<p>目标检测，数据集包含 1910K 张图像，600 个目标类别的 15440K 个标注目标。</p>
</li>
</ul>
<h3 id="评价指标"><a href="#评价指标" class="headerlink" title="评价指标"></a>评价指标</h3><div class="table-container">
<table>
<thead>
<tr>
<th>预测\实际</th>
<th>正</th>
<th>负  </th>
</tr>
</thead>
<tbody>
<tr>
<td>正</td>
<td>TP</td>
<td>FP</td>
<td></td>
</tr>
<tr>
<td>负</td>
<td>FN</td>
<td>TN</td>
<td></td>
</tr>
</tbody>
</table>
</div>
<p>Recall=TP/(TP+FN)，召回率，<strong>可理解为正确的被判断为正确的</strong></p>
<p>Precision=TP/(TP+FP)，准确度，<strong>预测为正类中，实际为正类的比例</strong></p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/2018042521300715.png" alt></p>
<p><strong>准确率-召回率曲线（P-R曲线）</strong>：以召回率为横坐标，精确率为纵坐标</p>
<script type="math/tex; mode=display">
\mathrm{AP}=\int_{0}^{1} P(R) d(R)</script><script type="math/tex; mode=display">
\mathrm{mAP}=\frac{1}{\text { classes }} \sum_{i=1}^{\text {classes }} \int_{0}^{1} P(R) d(R)</script><p><strong>IoU</strong>：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/20180423003716617.png" alt></p>
<p>VOC07 以后使用 AP 评价检测性能。AP 定义为不同召回率下的平均检测精度，通常在某一特定类别下进行评估。为比较所有目标类的检测性能，通常使用 mAP 作为最终性能指标。</p>
<p>为度量目标定位精度，使用交并比（IoU）来检查预测框和 GT 框之间的 IoU是否大于预定义的阈值，如，0.5。如果大于阈值则表示成功检测，否则表示漏检。基于 0.5IoU 的 mAP 已经成为多年来用于目标检测问题的事实上的度量标准。</p>
<p>MS−COCO 的 AP 是在 0.5−0.95多个 IoU 阈值上的平均值。</p>
<h3 id="深度学习目标检测方法"><a href="#深度学习目标检测方法" class="headerlink" title="深度学习目标检测方法"></a>深度学习目标检测方法</h3><p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/deep_learning_object_detection_history.PNG" alt></p>
<p><strong>Two-stage Detectors（两阶段目标检测器）</strong></p>
<p>首先由算法（algorithm）生成一系列作为样本的候选框，再通过卷积神经网络进行样本（Sample）分类。</p>
<p>诸如R-CNN，Fast R-CNN，Faster R-CNN到最新的Mask Scoring R-CNN等网络结构，都属于Two-stage检测方法。</p>
<p><strong>One-stage Detectors（单阶段目标检测器）</strong></p>
<p>不需要产生候选框，直接将目标框定位的问题转化为回归（Regression）问题处理(Process)。</p>
<p>从最早的OverFeat到现在的YOLO，SSD，RetinaNet，YOLOv2，CornerNet等都属于one stage目标检测方法。</p>
<p>即：</p>
<p><strong>基于候选区域（Region Proposal）</strong>的，如R-CNN、SPP-net、Fast R-CNN、Faster R-CNN、R-FCN；</p>
<p><strong>基于端到端（End-to-End）</strong>，无需候选区域（Region Proposal）的，如YOLO、SSD。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/20180509095302426.png" alt></p>
<p>对于上述两种方式，基于候选区域（Region Proposal）的方法在检测准确率和定位精度上占优，基于端到端（End-to-End）的算法速度占优。相对于R-CNN系列的“看两眼”（候选框提取和分类），YOLO只需要“看一眼”。总之，目前来说，基于候选区域（Region Proposal）的方法依然占据上风，但端到端的方法速度上优势明显。</p>
<h3 id="各方法在各数据集上的精度"><a href="#各方法在各数据集上的精度" class="headerlink" title="各方法在各数据集上的精度"></a>各方法在各数据集上的精度</h3><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">Detector</th>
<th style="text-align:center">VOC07 (mAP@IoU=0.5)</th>
<th style="text-align:center">VOC12 (mAP@IoU=0.5)</th>
<th style="text-align:center">COCO (mAP@IoU=0.5:0.95)</th>
<th style="text-align:center">Published In</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">R-CNN</td>
<td style="text-align:center">58.5</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">CVPR’14</td>
</tr>
<tr>
<td style="text-align:center">SPP-Net</td>
<td style="text-align:center">59.2</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">ECCV’14</td>
</tr>
<tr>
<td style="text-align:center">MR-CNN</td>
<td style="text-align:center">78.2 (07+12)</td>
<td style="text-align:center">73.9 (07+12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">ICCV’15</td>
</tr>
<tr>
<td style="text-align:center">Fast R-CNN</td>
<td style="text-align:center">70.0 (07+12)</td>
<td style="text-align:center">68.4 (07++12)</td>
<td style="text-align:center">19.7</td>
<td style="text-align:center">ICCV’15</td>
</tr>
<tr>
<td style="text-align:center">Faster R-CNN</td>
<td style="text-align:center">73.2 (07+12)</td>
<td style="text-align:center">70.4 (07++12)</td>
<td style="text-align:center">21.9</td>
<td style="text-align:center">NIPS’15</td>
</tr>
<tr>
<td style="text-align:center">YOLO v1</td>
<td style="text-align:center">66.4 (07+12)</td>
<td style="text-align:center">57.9 (07++12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">CVPR’16</td>
</tr>
<tr>
<td style="text-align:center">G-CNN</td>
<td style="text-align:center">66.8</td>
<td style="text-align:center">66.4 (07+12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">CVPR’16</td>
</tr>
<tr>
<td style="text-align:center">AZNet</td>
<td style="text-align:center">70.4</td>
<td style="text-align:center">-</td>
<td style="text-align:center">22.3</td>
<td style="text-align:center">CVPR’16</td>
</tr>
<tr>
<td style="text-align:center">ION</td>
<td style="text-align:center">80.1</td>
<td style="text-align:center">77.9</td>
<td style="text-align:center">33.1</td>
<td style="text-align:center">CVPR’16</td>
</tr>
<tr>
<td style="text-align:center">HyperNet</td>
<td style="text-align:center">76.3 (07+12)</td>
<td style="text-align:center">71.4 (07++12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">CVPR’16</td>
</tr>
<tr>
<td style="text-align:center">OHEM</td>
<td style="text-align:center">78.9 (07+12)</td>
<td style="text-align:center">76.3 (07++12)</td>
<td style="text-align:center">22.4</td>
<td style="text-align:center">CVPR’16</td>
</tr>
<tr>
<td style="text-align:center">MPN</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">33.2</td>
<td style="text-align:center">BMVC’16</td>
</tr>
<tr>
<td style="text-align:center">SSD</td>
<td style="text-align:center">76.8 (07+12)</td>
<td style="text-align:center">74.9 (07++12)</td>
<td style="text-align:center">31.2</td>
<td style="text-align:center">ECCV’16</td>
</tr>
<tr>
<td style="text-align:center">GBDNet</td>
<td style="text-align:center">77.2 (07+12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">27.0</td>
<td style="text-align:center">ECCV’16</td>
</tr>
<tr>
<td style="text-align:center">CPF</td>
<td style="text-align:center">76.4 (07+12)</td>
<td style="text-align:center">72.6 (07++12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">ECCV’16</td>
</tr>
<tr>
<td style="text-align:center">R-FCN</td>
<td style="text-align:center">79.5 (07+12)</td>
<td style="text-align:center">77.6 (07++12)</td>
<td style="text-align:center">29.9</td>
<td style="text-align:center">NIPS’16</td>
</tr>
<tr>
<td style="text-align:center">DeepID-Net</td>
<td style="text-align:center">69.0</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">PAMI’16</td>
</tr>
<tr>
<td style="text-align:center">NoC</td>
<td style="text-align:center">71.6 (07+12)</td>
<td style="text-align:center">68.8 (07+12)</td>
<td style="text-align:center">27.2</td>
<td style="text-align:center">TPAMI’16</td>
</tr>
<tr>
<td style="text-align:center">DSSD</td>
<td style="text-align:center">81.5 (07+12)</td>
<td style="text-align:center">80.0 (07++12)</td>
<td style="text-align:center">33.2</td>
<td style="text-align:center">arXiv’17</td>
</tr>
<tr>
<td style="text-align:center">TDM</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">37.3</td>
<td style="text-align:center">CVPR’17</td>
</tr>
<tr>
<td style="text-align:center">FPN</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">36.2</td>
<td style="text-align:center">CVPR’17</td>
</tr>
<tr>
<td style="text-align:center">YOLO v2</td>
<td style="text-align:center">78.6 (07+12)</td>
<td style="text-align:center">73.4 (07++12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">CVPR’17</td>
</tr>
<tr>
<td style="text-align:center">RON</td>
<td style="text-align:center">77.6 (07+12)</td>
<td style="text-align:center">75.4 (07++12)</td>
<td style="text-align:center">27.4</td>
<td style="text-align:center">CVPR’17</td>
</tr>
<tr>
<td style="text-align:center">DeNet</td>
<td style="text-align:center">77.1 (07+12)</td>
<td style="text-align:center">73.9 (07++12)</td>
<td style="text-align:center">33.8</td>
<td style="text-align:center">ICCV’17</td>
</tr>
<tr>
<td style="text-align:center">CoupleNet</td>
<td style="text-align:center">82.7 (07+12)</td>
<td style="text-align:center">80.4 (07++12)</td>
<td style="text-align:center">34.4</td>
<td style="text-align:center">ICCV’17</td>
</tr>
<tr>
<td style="text-align:center">RetinaNet</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">39.1</td>
<td style="text-align:center">ICCV’17</td>
</tr>
<tr>
<td style="text-align:center">DSOD</td>
<td style="text-align:center">77.7 (07+12)</td>
<td style="text-align:center">76.3 (07++12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">ICCV’17</td>
</tr>
<tr>
<td style="text-align:center">SMN</td>
<td style="text-align:center">70.0</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">ICCV’17</td>
</tr>
<tr>
<td style="text-align:center">Light-Head R-CNN</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">41.5</td>
<td style="text-align:center">arXiv’17</td>
</tr>
<tr>
<td style="text-align:center">YOLO v3</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">33.0</td>
<td style="text-align:center">arXiv’18</td>
</tr>
<tr>
<td style="text-align:center">SIN</td>
<td style="text-align:center">76.0 (07+12)</td>
<td style="text-align:center">73.1 (07++12)</td>
<td style="text-align:center">23.2</td>
<td style="text-align:center">CVPR’18</td>
</tr>
<tr>
<td style="text-align:center">STDN</td>
<td style="text-align:center">80.9 (07+12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">CVPR’18</td>
</tr>
<tr>
<td style="text-align:center">RefineDet</td>
<td style="text-align:center">83.8 (07+12)</td>
<td style="text-align:center">83.5 (07++12)</td>
<td style="text-align:center">41.8</td>
<td style="text-align:center">CVPR’18</td>
</tr>
<tr>
<td style="text-align:center">SNIP</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">45.7</td>
<td style="text-align:center">CVPR’18</td>
</tr>
<tr>
<td style="text-align:center">Relation-Network</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">32.5</td>
<td style="text-align:center">CVPR’18</td>
</tr>
<tr>
<td style="text-align:center">Cascade R-CNN</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">42.8</td>
<td style="text-align:center">CVPR’18</td>
</tr>
<tr>
<td style="text-align:center">MLKP</td>
<td style="text-align:center">80.6 (07+12)</td>
<td style="text-align:center">77.2 (07++12)</td>
<td style="text-align:center">28.6</td>
<td style="text-align:center">CVPR’18</td>
</tr>
<tr>
<td style="text-align:center">Fitness-NMS</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">41.8</td>
<td style="text-align:center">CVPR’18</td>
</tr>
<tr>
<td style="text-align:center">RFBNet</td>
<td style="text-align:center">82.2 (07+12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">ECCV’18</td>
</tr>
<tr>
<td style="text-align:center">CornerNet</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">42.1</td>
<td style="text-align:center">ECCV’18</td>
</tr>
<tr>
<td style="text-align:center">PFPNet</td>
<td style="text-align:center">84.1 (07+12)</td>
<td style="text-align:center">83.7 (07++12)</td>
<td style="text-align:center">39.4</td>
<td style="text-align:center">ECCV’18</td>
</tr>
<tr>
<td style="text-align:center">Pelee</td>
<td style="text-align:center">70.9 (07+12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">NIPS’18</td>
</tr>
<tr>
<td style="text-align:center">HKRM</td>
<td style="text-align:center">78.8 (07+12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">37.8</td>
<td style="text-align:center">NIPS’18</td>
</tr>
<tr>
<td style="text-align:center">M2Det</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">44.2</td>
<td style="text-align:center">AAAI’19</td>
</tr>
<tr>
<td style="text-align:center">R-DAD</td>
<td style="text-align:center">81.2 (07++12)</td>
<td style="text-align:center">82.0 (07++12)</td>
<td style="text-align:center">43.1</td>
<td style="text-align:center">AAAI’19</td>
</tr>
<tr>
<td style="text-align:center">ScratchDet</td>
<td style="text-align:center">84.1 (07++12)</td>
<td style="text-align:center">83.6 (07++12)</td>
<td style="text-align:center">39.1</td>
<td style="text-align:center">CVPR’19</td>
</tr>
<tr>
<td style="text-align:center">Libra R-CNN</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">43.0</td>
<td style="text-align:center">CVPR’19</td>
</tr>
<tr>
<td style="text-align:center">Reasoning-RCNN</td>
<td style="text-align:center">82.5 (07++12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">43.2</td>
<td style="text-align:center">CVPR’19</td>
</tr>
<tr>
<td style="text-align:center">FSAF</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">44.6</td>
<td style="text-align:center">CVPR’19</td>
</tr>
<tr>
<td style="text-align:center">AmoebaNet + NAS-FPN</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">47.0</td>
<td style="text-align:center">CVPR’19</td>
</tr>
<tr>
<td style="text-align:center">Cascade-RetinaNet</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">41.1</td>
<td style="text-align:center">CVPR’19</td>
</tr>
<tr>
<td style="text-align:center">TridentNet</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">48.4</td>
<td style="text-align:center">ICCV’19</td>
</tr>
<tr>
<td style="text-align:center">DAFS</td>
<td style="text-align:center"><strong>85.3 (07+12)</strong></td>
<td style="text-align:center">83.1 (07++12)</td>
<td style="text-align:center">40.5</td>
<td style="text-align:center">ICCV’19</td>
</tr>
<tr>
<td style="text-align:center">Auto-FPN</td>
<td style="text-align:center">81.8 (07++12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">40.5</td>
<td style="text-align:center">ICCV’19</td>
</tr>
<tr>
<td style="text-align:center">FCOS</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">44.7</td>
<td style="text-align:center">ICCV’19</td>
</tr>
<tr>
<td style="text-align:center">FreeAnchor</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">44.8</td>
<td style="text-align:center">NeurIPS’19</td>
</tr>
<tr>
<td style="text-align:center">DetNAS</td>
<td style="text-align:center">81.5 (07++12)</td>
<td style="text-align:center">-</td>
<td style="text-align:center">42.0</td>
<td style="text-align:center">NeurIPS’19</td>
</tr>
<tr>
<td style="text-align:center">NATS</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">42.0</td>
<td style="text-align:center">NeurIPS’19</td>
</tr>
<tr>
<td style="text-align:center">AmoebaNet + NAS-FPN + AA</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">50.7</td>
<td style="text-align:center">arXiv’19</td>
</tr>
<tr>
<td style="text-align:center">EfficientDet</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center"><strong>51.0</strong></td>
<td style="text-align:center">arXiv’19</td>
</tr>
</tbody>
</table>
</div>
<h3 id="目标检测的候选框-Proposal"><a href="#目标检测的候选框-Proposal" class="headerlink" title="目标检测的候选框(Proposal)"></a>目标检测的候选框(Proposal)</h3><p>物体候选框获取，当前主要使用图像分割与区域生长技术。区域生长(合并)主要由于检测图像中存在的物体具有局部区域相似性(颜色、纹理等)。</p>
<p>根据目标候选区域的提取方式不同，传统目标检测算法可以分为基于滑动窗口的目标检测算法和基于选择性搜索的目标检测算法。</p>
<p><strong>滑动窗口（Sliding Window）</strong></p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/1423648-20190316210029111-840970217.png" alt></p>
<p>基本原理就是采用不同大小和比例（宽高比）的窗口在整张图片上以一定的步长进行滑动，然后对这些窗口对应的区域做图像分类</p>
<p>缺点：不知道要检测的目标大小是什么规模，所以要设置不同大小和比例的窗口去滑动，而且还要选取合适的步长。但是这样会产生很多的子区域，并且都要经过分类器去做预测，这需要很大的计算量。</p>
<p>具体步骤：首先对输入图像进行不同窗口大小的滑窗进行从左往右、从上到下的滑动。每次滑动时候对当前窗口执行分类器(分类器是事先训练好的)。如果当前窗口得到较高的分类概率，则认为检测到了物体。对每个不同窗口大小的滑窗都进行检测后，会得到不同窗口检测到的物体标记，这些窗口大小会存在重复较高的部分，最后采用非极大值抑制(Non-Maximum Suppression, NMS)的方法进行筛选。最终，经过NMS筛选后获得检测到的物体。</p>
<p><strong>非极大值抑制(Non-Maximum Suppression,NMS)</strong></p>
<p>根据分类器类别分类概率做排序</p>
<p>　　(1)从最大概率矩形框开始，分别得分后面的矩形框与其的重叠度IOU是否大于某个设定的阈值;</p>
<p>　　(2)假设重叠度超过阈值，那么就扔掉；并标记第一个矩形框，是我们保留下来的。</p>
<p>　　(3)从剩下的矩形框中，选择概率最大的，然后判断得分后面的矩形框与其的重叠度，重叠度大于一定的阈值，那么就扔掉；并标记是我们保留下来的第二个矩形框。</p>
<p>　　如此循环往复知道没有剩余的矩形框，然后找到所有被保留下来的矩形框，就是我们认为最可能包含目标的矩形框。</p>
<p><strong>R-CNN算法中NMS的具体做法</strong>：</p>
<p>　　假设有20类，2000个建议框，最后输出向量维数2000*20，则每列对应一类，一行是各个建议框的得分，NMS算法步骤如下：<br>　　① 对2000×20维矩阵中每列按从大到小进行排序；<br>　　② 从每列最大的得分建议框开始，分别与该列后面的得分建议框进行IoU计算，若IoU&gt;阈值，则剔除得分较小的建议框，否则认为图像中存在多个同一类物体；<br>　　③ 从每列次大的得分建议框开始，重复步骤②；<br>　　④ 重复步骤③直到遍历完该列所有建议框；<br>　　⑤ 遍历完2000×20维矩阵所有列，即所有物体种类都做一遍非极大值抑制；<br>　　⑥ 最后剔除各个类别中剩余建议框得分少于该类别阈值的建议框。</p>
<p><strong>选择性搜索(Selective Search)</strong></p>
<p>滑窗法类似穷举进行图像子区域搜索，但是一般情况下图像中大部分子区域是没有物体的。学者们自然而然想到只对图像中最有可能包含物体的区域进行搜索以此来提高计算效率。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/1423648-20190317100459585-1587811888.png" alt></p>
<p>选择搜索算法的主要观点：图像中物体可能存在的区域应该是有某些相似性或者连续性区域的。因此，选择搜索基于上面这一想法采用子区域合并的方法进行提取候选边界框（bounding boxes）。首先，对输入图像进行分割算法产生许多小的子区域(大约2000个子区域)。其次，根据这些子区域之间相似性(相似性标准主要有颜色、纹理、大小等等)进行区域合并，不断的进行区域迭代合并。每次迭代过程中对这些合并的子区域做外切矩形（bounding boxes），这些子区域外切矩形就是通常所说的候选框。</p>
<p>优点：<br>　　　　（a）计算效率优于滑窗法。<br>　　　　（b）由于采用子区域合并策略，所以可以包含各种大小的疑似物体框。<br>　　　　（c）合并区域相似的指标多样性，提高了检测物体的概率。</p>
<h3 id="边界框回归-Bounding-Box-regression"><a href="#边界框回归-Bounding-Box-regression" class="headerlink" title="边界框回归(Bounding-Box regression)"></a>边界框回归(Bounding-Box regression)</h3><p>窗口一般使用四维向量$(x,y,w,h)$来表示， 分别表示窗口的中心点坐标和宽高。 对于下图, 红色的框 $P$ 代表原始的Proposal, 绿色的框 $G$ 代表目标的 Ground Truth， 目标是寻找一种关系使得输入原始的窗口 $P$ 经过映射得到一个跟真实窗口 $G$ 更接近的回归窗口$\hat{G}$。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/TIM%E5%9B%BE%E7%89%8720200106182123.png" alt></p>
<p>边框回归的目的既是：给定$\left(P<em>{x}, P</em>{y}, P<em>{w}, P</em>{h}\right)$寻找一种映射$f$， 使得$f\left(P<em>{x}, P</em>{y}, P<em>{w}, P</em>{h}\right)=\left(\hat{G}<em>{x}, \hat{G}</em>{y}, \hat{G}<em>{w}, \hat{G}</em>{h}\right)$并且$\left(\hat{G}<em>{x}, \hat{G}</em>{y}, \hat{G}<em>{w}, \hat{G}</em>{h}\right) \approx\left(G<em>{x}, G</em>{y}, G<em>{w}, G</em>{h}\right)$</p>
<p>思路: 平移 + 尺度放缩</p>
<ol>
<li><p>先做平移$(\Delta x, \Delta y), \quad \Delta x=P<em>{w} d</em>{x}(P), \Delta y=P<em>{h} d</em>{y}(P)$</p>
<p>$\hat{G}<em>{x}=P</em>{w} d<em>{x}(P)+P</em>{x}$<br>$\hat{G}<em>{y}=P</em>{h} d<em>{y}(P)+P</em>{y}$</p>
</li>
<li><p>然后再做尺度缩放$\left(S<em>{w}, S</em>{h}\right), S<em>{w}=\exp \left(d</em>{w}(P)\right), S<em>{h}=\exp \left(d</em>{h}(P)\right)$</p>
<p>$\hat{G}<em>{w}=P</em>{w} \exp \left(d<em>{w}(P)\right)$<br>$\hat{G}</em>{h}=P<em>{h} \exp \left(d</em>{h}(P)\right)$</p>
</li>
</ol>
<p>边框回归就是学习$d<em>{x}(P), d</em>{y}(P), d<em>{w}(P), d</em>{h}(P)$这四个变换。</p>
<p>线性回归就是给定输入的特征向量$X$, 学习一组参数 $W$, 使得经过线性回归后的值跟真实值 $Y$(Ground Truth)非常接近. 即$Y ≈ WX$。</p>
<p>输入为：$P=\left(P<em>{x}, P</em>{y}, P<em>{w}, P</em>{h}\right)$这个窗口对应的 CNN 特征(注：训练阶段输入还包括 Ground Truth， 也就是下边提到的$t<em>{*}=\left(t</em>{x}, t<em>{y}, t</em>{w}, t_{h}\right)$ )</p>
<p>输出为：四个变换，因为有了这四个变换我们就可以直接得到 Ground Truth，真实值所对应的真正的变化为</p>
<script type="math/tex; mode=display">
\begin{aligned}
&t_{x}=\left(G_{x}-P_{x}\right) / P_{w}\\
&t_{y}=\left(G_{y}-P_{y}\right) / P_{h}\\
&t_{w}=\log \left(G_{w} / P_{w}\right)\\
&t_{h}=\log \left(G_{h} / P_{h}\right)
\end{aligned}</script><p>目标函数可以表示为$d<em>{*}(P)=w</em>{<em>}^{T} \Phi<em>{5}(P)$， $\Phi</em>{5}(P)$是输入 Proposal 的特征向量， $w_{</em>}$是要学习的参数（<em> 表示 $x,y,w,h$， 也就是每一个变换对应一个目标函数）, $d_{</em>}(P)$ 是得到的预测值。</p>
<p>损失函数：要让预测值跟真实值$t<em>{*}=\left(t</em>{x}, t<em>{y}, t</em>{w}, t_{h}\right)$差距最小</p>
<p>$Loss=\sum<em>{i}^{N}\left(t</em>{<em>}^{i}-\hat{w}_{</em>}^{T} \phi_{5}\left(P^{i}\right)\right)^{2}$</p>
<p>函数优化目标为：</p>
<script type="math/tex; mode=display">
W_{*}=\operatorname{argmin}_{w_{*}} \sum_{i}^{N}\left(t_{*}^{i}-\hat{w}_{*}^{T} \phi_{5}\left(P^{i}\right)\right)^{2}+\lambda\left\|\hat{w}_{*}\right\|^{2}</script><h3 id="R-CNN"><a href="#R-CNN" class="headerlink" title="R-CNN"></a>R-CNN</h3><p>Rich feature hierarchies for accurate object detection and semantic segmentation(CVPR 2014)</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-07_09-57-14.jpg" alt></p>
<p><strong>算法流程</strong>：</p>
<ul>
<li>使用Selective Search提取大约2000个候选区域（proposal）;</li>
<li>对每个候选区域的图像进行拉伸形变，使之成为固定大小的正方形图像，并将该图像输入到CNN中提取特征;</li>
<li>使用线性的SVM对提取的特征进行分类。</li>
</ul>
<p><strong>创新点</strong>：</p>
<ul>
<li>将大型卷积神经网络(CNNs)应用于自下而上的候选区域以定位和分割物体。</li>
<li>当带标签的训练数据不足时，先针对辅助任务进行有监督预训练，再进行特定任务的调优，就可以产生明显的性能提升。</li>
</ul>
<p><strong>R-CNN图片缩放</strong></p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/20180425214236957.png" alt></p>
<p><strong>缺点</strong>：</p>
<ul>
<li><p><strong>重复计算</strong> R-CNN虽然不再是穷举，但通过Proposal（Selective Search）的方案依然有两千个左右的候选框，这些候选框都需要单独经过backbone网络提取特征，计算量依然很大，候选框之间会有重叠，因此有不少其实是重复计算。</p>
</li>
<li><p><strong>训练测试不简洁</strong> 候选区域提取、特征提取、分类、回归都是分开操作，中间数据还需要单独保存。</p>
</li>
<li><p><strong>速度慢</strong> 前面的缺点最终导致R-CNN出奇的慢，GPU上处理一张图片需要十几秒，CPU上则需要更长时间。</p>
</li>
<li><p><strong>输入的图片Patch必须强制缩放成固定大小</strong> （原文采用227×227），会造成物体形变，导致检测性能下降。</p>
</li>
</ul>
<h3 id="SPP-Net"><a href="#SPP-Net" class="headerlink" title="SPP-Net"></a>SPP-Net</h3><p>Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition(ECCV 2014)</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-07_10-28-09.jpg" alt></p>
<p>卷积层的参数和输入图像的尺寸无关，它仅仅是一个卷积核在图像上滑动，不管输入图像是多少都没关系，只是对不同大小的图片卷积出不同大小的特征图，池化层对输入图像的尺寸也没有任何限制，只是获得不同的特征图而已，但是全连接层的参数就和输入图像大小有关，因为它要把输入的所有像素点连接起来,需要指定输入层神经元个数和输出层神经元个数，所以需要规定输入的feature的大小。</p>
<p>通过在卷积层和全连接层之间加入空间金字塔池化结构（Spatial Pyramid Pooling）代替R-CNN算法在输入卷积神经网络前对各个候选区域进行剪裁、缩放操作使其图像子块尺寸一致的做法。</p>
<p><strong>算法流程</strong>：</p>
<ul>
<li>首先通过选择性搜索，对待检测的图片进行搜索出2000个候选窗口。这一步和R-CNN一样。</li>
<li>特征提取阶段。这一步就是和R-CNN最大的区别了，同样是用卷积神经网络进行特征提取，但是SPP-Net用的是金字塔池化。这一步骤的具体操作如下：把整张待检测的图片，输入CNN中，进行一次性特征提取，得到feature maps，然后在feature maps中找到各个候选框的区域，再对各个候选框采用金字塔空间池化，提取出固定长度的特征向量。而R-CNN输入的是每个候选框，然后在进入CNN，因为SPP-Net只需要一次对整张图片进行特征提取，速度更快啊。</li>
<li>最后一步也是和R-CNN一样，采用SVM算法进行特征向量分类识别。</li>
</ul>
<p><strong>一次特征提取</strong><br>RCNN是多个regions+多次CNN+单个pooling，而SPP则是单个图像+单次CNN+多个region+多个pooling<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/20180425215129861.png" alt></p>
<p><strong>金字塔池化结构</strong><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-07_10-41-12.jpg" alt><br>利用不同大小的刻度，对一张图片进行了划分。图中，利用了三种不同大小的刻度，对一张输入的图片进行了划分，最后总共可以得到16+4+1=21个块，从这21个图片块中，分别计算每个块的最大值，从而得到一个输出特征向量。最后把一张任意大小的图片转换成了一个固定大小的21维特征（当然可以设计其它维数的输出，增加金字塔的层数，或者改变划分网格的大小）。上面的三种不同刻度的划分，每一种刻度称之为金字塔的一层，使用多个不同刻度的层，可以提高所提取特征的鲁棒性。每一个图片块大小称之为：Sliding Windows Size。如果希望金字塔的某一层输出nxn个特征，那么就要用Windows Size大小为：(w/n,h/n)进行池化。（这里有一个问题，就是如果(5x5）也要得到3x3的话，计算得到的size=2，stride=1，利用公式算出来得到的池化为（4x4）与预期的3x3不符，这里暂时还有问题，不清楚具体原因是什么）。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-07_10-46-02.jpg" alt></p>
<p><strong>创新点：</strong></p>
<ul>
<li>利用空间金字塔池化结构；</li>
<li>对整张图片只进行了一次特征提取，加快运算速度。</li>
</ul>
<p><strong>缺点</strong><br>　    和R-CNN一样，它的训练要经过多个阶段，特征也要存在磁盘中，另外，SPP中的微调只更新SPP层后面的全连接层，对很深的网络这样肯定是不行的。</p>
<h3 id="Fast-R-CNN"><a href="#Fast-R-CNN" class="headerlink" title="Fast R-CNN"></a>Fast R-CNN</h3><p>Girshick, R., Fast R-CNN, in 2015 IEEE International Conference on Computer Vision (ICCV). 2015. p. 1440-1448.</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/3940902-7569280b566d0e58.png" alt></p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/3940902-5519b489e581557a.png" alt></p>
<p>Fast R-CNN在特征提取上可以说很大程度借鉴了SPPnet，首先将图片用选择搜索算法（selective search）得到2000个候选区域（region proposals）的坐标信息。另一方面，直接将图片归一化到CNN需要的格式，整张图片送入CNN（本文选择的网络是VGG），将第五层的普通池化层替换为RoI池化层，图片然后经过5层卷积操作后，得到一张特征图（feature maps），开始得到的坐标信息通过一定的映射关系转换为对应特征图的坐标，截取对应的候选区域，经过RoI层后提取到固定长度的特征向量，送入全连接层。</p>
<p><strong>算法流程</strong>:</p>
<ul>
<li>输入的是一张完整图片图像归一化为224×224和一组（约2000个）物体建议框（也叫RoIs）送入网络。</li>
<li>对Conv feature map进行特征提取。每一个区域经过RoI pooling layer和FC layers得到一个固定长度的feature vector，这里需要注意的是，输入到后面RoI pooling layer的feature map是在Conv feature map上提取的。虽然在最开始也提取出了大量的RoI，但他们还是作为整体输入进卷积网络的，最开始提取出的RoI区域只是为了最后的Bounding box 回归时使用，用来输出原图中的位置。</li>
<li>这些特征向量在经过全接连层之后进入两个并列的输出层。第一个是分类，使用softmax，第二个是每一类的bounding box回归。利用SoftMax Loss和Smooth L1 Loss对分类概率和边框回归（Bounding Box Regression）联合训练。<br>整个结构是使用多任务损失的端到端训练（trained end-to-end with a multi-task loss）。</li>
</ul>
<p><strong>什么是ROI呢？</strong></p>
<p>RoI是Region of Interest的简写，指的是在“<strong>特征图上的框</strong>”；在Fast RCNN中， RoI是指Selective Search完成后得到的“候选框”在特征图上的映射;</p>
<p><strong>ROI Pooling的输入</strong><br>输入有两部分组成：</p>
<ul>
<li>特征图：指的是特征图，在Fast RCNN中，它位于RoI Pooling之前，通常我们常常称之为“share_conv”；</li>
<li>ROIS ：在Fast RCNN中，指的是Selective Search的输出，一堆矩形候选框框，形状为1x5x1x1（4个坐标+索引index），其中值得注意的是：坐标的参考系不是针对feature map这张图的，而是针对原图的（神经网络最开始的输入）。</li>
</ul>
<p><strong>ROI Pooling的输出</strong><br>　　输出是batch个vector，其中batch的值等于RoI的个数，vector的大小为channel x w x h；RoI Pooling的过程就是将一个个大小不同的box矩形框，都映射成大小固定（w x h）的矩形框；</p>
<p><strong>ROI Pooling的过程</strong><br>　　先把RoI中的坐标映射到feature map上，映射规则比较简单，就是把各个坐标除以“输入图片与feature map的大小的比值”，得到了feature map上的box坐标后，使用Pooling得到输出；由于输入的图片大小不一，所以这里使用的类似Spp Pooling，在Pooling的过程中需要计算Pooling后的结果对应到feature map上所占的范围，然后在那个范围中进行取max或者取average。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/3940902-a6127730f6d21abd.png" alt></p>
<ul>
<li>cls_score层用于分类，输出K+1维数组p，表示属于K类和背景的概率。</li>
<li>bbox_prdict层用于调整候选区域位置，输出4*K维数组t，表示分别属于K类时，应该平移缩放的参数。</li>
</ul>
<p><strong>最后一个阶段的特征输入到两个并行的全连层中。</strong><br>一个是对区域的分类Softmax（包括背景），另一个是对bounding box回归的微调。在SVM和Softmax的对比实验中说明，SVM的优势并不明显，故直接用Softmax将整个网络整合训练更好。总代价为两者加权和，Fast-RCNN把两个回归的loss进行联合训练。</p>
<p><strong>创新点</strong></p>
<ul>
<li>提出RoI Pooling 层，它将不同大小候选框的卷积特征图统一采样成固定大小的特征。</li>
<li>独立的SVM分类器和回归器需要大量特征作为训练样本，需要大量的硬盘空间，Fast-RCNN把类别判断和位置回归统一用深度神经网络实现，不再需要额外存储。</li>
</ul>
<p><strong>缺点</strong>：<br>检测速度仍然受限于 Selective Search</p>
<h3 id="Faster-R-CNN"><a href="#Faster-R-CNN" class="headerlink" title="Faster R-CNN"></a>Faster R-CNN</h3><p>Ren, S., et al., Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks. IEEE Trans Pattern Anal Mach Intell, 2017. 39(6): p. 1137-1149.</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/v2-e64a99b38f411c337f538eb5f093bdf3_r.jpg" alt></p>
<p><strong>算法流程</strong>:</p>
<ul>
<li>把整张图片送入CNN，进行特征提取；</li>
<li>在最后一层卷积feature map上生成region proposal（通过RPN），每张图片大约300个建议窗口；</li>
<li>通过RoI pooling层（其实是单层的SPP layer）使得每个建议窗口生成固定大小的feature map；</li>
<li>继续经过两个全连接层（FC）得到特征向量。特征向量经由各自的FC层，得到两个输出向量。第一个是分类，使用softmax，第二个是每一类的bounding box回归。利用SoftMax Loss和Smooth L1 Loss对分类概率和边框回归（Bounding Box Regression）联合训练。</li>
</ul>
<p><strong>Region Proposal Networks</strong>。RPN网络用于生成region proposals。该层通过softmax判断anchors属于positive或者negative，再利用bounding box regression修正anchors获得精确的proposals。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/v2-1908feeaba591d28bee3c4a754cca282_r.jpg" alt></p>
<p>可以看到RPN网络实际分为2条线，上面一条通过softmax分类anchors获得positive和negative分类，下面一条用于计算对于anchors的bounding box regression偏移量，以获得精确的proposal。而最后的Proposal层则负责综合positive anchors和对应bounding box regression偏移量获取proposals，同时剔除太小和超出边界的proposals。</p>
<p>所谓anchors，实际上就是一组由rpn/generate<em>anchors.py生成的矩形。直接运行作者demo中的generate_anchors.py可以得到以下输出：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[[ -84.  -40.   99.   55.]</span><br><span class="line"> [-176.  -88.  191.  103.]</span><br><span class="line"> [-360. -184.  375.  199.]</span><br><span class="line"> [ -56.  -56.   71.   71.]</span><br><span class="line"> [-120. -120.  135.  135.]</span><br><span class="line"> [-248. -248.  263.  263.]</span><br><span class="line"> [ -36.  -80.   51.   95.]</span><br><span class="line"> [ -80. -168.   95.  183.]</span><br><span class="line"> [-168. -344.  183.  359.]]</span><br></pre></td></tr></table></figure><br>其中每行的4个值$\left(x</em>{1}, y<em>{1}, x</em>{2}, y_{2}\right)$表矩形左上和右下角点坐标。9个矩形共有3种形状，长宽比为大约为width: height $\in{1: 1,1: 2,2: 1}$三种，如图。实际上通过anchors就引入了检测中常用到的多尺度方法。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/v2-7abead97efcc46a3ee5b030a2151643f_hd.jpg" alt></p>
<p>注：关于上面的anchors size，其实是根据检测图像设置的。在python demo中，会把任意大小的输入图像reshape成800x600。再回头来看anchors的大小，anchors中长宽1:2中最大为352x704，长宽2:1中最大736x384，基本是cover了800x600的各个尺度和形状。</p>
<p><strong>那么这9个anchors是做什么的呢？</strong>遍历Conv layers计算获得的feature maps，为每一个点都配备这9种anchors作为初始的检测框。这样做获得检测框很不准确，不用担心，后面还有2次bounding box regression可以修正检测框位置。</p>
<p><strong>其实RPN最终就是在原图尺度上，设置了密密麻麻的候选Anchor。然后用cnn去判断哪些Anchor是里面有目标的positive anchor，哪些是没目标的negative anchor。所以，仅仅是个二分类而已！</strong></p>
<p>一副MxN大小的矩阵送入Faster RCNN网络后，到RPN网络变为(M/16)x(N/16)，不妨设 W=M/16，H=N/16。在进入reshape与softmax之前，先做了1x1卷积<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/v2-1ab4b6c3dd607a5035b5203c76b078f3_r.jpg" alt></p>
<p>可以看到其num_output=18，也就是经过该卷积的输出图像为WxHx18大小。这也就刚好对应了feature maps每一个点都有9个anchors，同时每个anchors又有可能是positive和negative，所有这些信息都保存WxHx(9<em>2)大小的矩阵。<em>*为何这样做？</em></em>后面接softmax分类获得positive anchors，也就相当于初步提取了检测目标候选区域box（一般认为目标在positive anchors中）。</p>
<p><strong>那么为何要在softmax前后都接一个reshape layer？</strong>其实只是为了便于softmax分类,存储形式为[1, 2x9, H, W]。而在softmax分类时需要进行positive/negative二分类，所以reshape layer会将其变为[1, 2, 9xH, W]大小，即单独“腾空”出来一个维度以便softmax分类，之后再reshape回复原状。</p>
<p>RPN网络中利用anchors和softmax初步提取出positive anchors作为候选区域（另外也有实现用sigmoid代替softmax，原理类似）。</p>
<p><strong>对proposals进行bounding box regression</strong><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/v2-8241c8076d60156248916fe2f1a5674a_r.jpg" alt></p>
<p>可以看到其 num<em>output=36，即经过该卷积输出图像为WxHx36，这里相当于feature maps每个点都有9个anchors，每个anchors又都有4个用于回归的$\left[d</em>{x}(A), d<em>{y}(A), d</em>{w}(A), d_{h}(A)\right]$变化量</p>
<p><strong>创新点</strong></p>
<ul>
<li>采用RPN(Region Proposal Network)代替选择性搜索(Selective Search)，利用GPU进行计算大幅度缩减提取region proposal的速度。</li>
<li>产生建议窗口的CNN和目标检测的CNN共享。</li>
</ul>
<p>在主干网络中增加了RPN （Region Proposal Network）网络，通过一定规则设置不同尺度的锚点（Anchor）在RPN的卷积特征层提取候选框来代替Selective Search等传统的候选框生成方法，实现了网络的端到端训练。候选区域生成、候选区域特征提取、框回归和分类全过程一气呵成，在训练过程中模型各部分不仅学习如何完成自己的任务，还自主学习如何相互配合。这也是第一个真正意义上的深度学习目标检测算法。</p>
<h3 id="YOLO"><a href="#YOLO" class="headerlink" title="YOLO"></a>YOLO</h3><p>Redmon, J., et al., You Only Look Once: Unified, Real-Time Object Detection, in 2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR). 2016. p. 779-788.</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/6983308-d54136f1eb0cd733.png" alt></p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/6983308-0d1e8d42480e1c1a.png" alt></p>
<p><strong>算法流程</strong></p>
<ul>
<li>将图像resize到448 * 448作为神经网络的输入 ；</li>
<li>运行神经网络，得到一些bounding box坐标、box中包含物体的置信度和class probabilities ；</li>
<li>进行非极大值抑制，筛选Boxes。</li>
</ul>
<p><strong>创新点</strong></p>
<ul>
<li>YOLO将目标检测问题转化为回归问题，不需要复杂的流程。在实时检测系统中， YOLO的效果是最好的。</li>
<li>YOLO 在做出预测时是推理整个图像的。与滑动窗口和候选区域算法不同， YOLO 在训练和测试时，从整个图像综合考虑，不仅分析物体的 appearance 还分析其 contextual 信息。Fast R-CNN 比较容易将背景误检测为物体，因为它不考虑 contextual 信息。YOLO 把背景误检测为物体的概率不到 Fast R-CNN 的一半。</li>
<li>YOLO 对物体的泛化能力比较好。当在自然图像上训练，在艺术图像上检测时，YOLO的效果要比 DPM 和 R-CNN 好很多。</li>
</ul>
<p>YOLO没有选择滑动窗口（silding window）或提取proposal的方式训练网络，而是直接选用整图训练模型，将 Object Detection 的问题转化成一个 Regression 问题。</p>
<p>将图片分为$S\times S$个单元格(原文中S=7)，之后的输出是以单元格为单位进行的：</p>
<ul>
<li>如果一个object的中心落在某个单元格上，那么这个单元格负责预测这个物体。</li>
<li>每个单元格需要预测B个bbox值(bbox值包括坐标和宽高，原文中B=2)，同时为每个bbox值预测一个置信度(confidence scores)。也就是每个单元格需要预测B×(4+1)个值。</li>
<li>每个单元格需要预测C(物体种类个数，原文C=20，这个与使用的数据库有关)个条件概率值.</li>
</ul>
<p>所以，最后网络的输出维度为$S \times S \times (B\times 5 + C)$，这里输出为$7\times7\times(2\times5+20)$, 虽然每个单元格负责预测一种物体(这也是这篇文章的问题，当有小物体时可能会有问题)，但是每个单元格可以预测多个bbox值(这里可以认为有多个不同形状的bbox，为了更准确的定位出物体，如下图所示)。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/6983308-29a33d2e79ed722b.png" alt></p>
<p><strong>(x,y)是bbox的中心相对于单元格的offset</strong><br>单元格坐标为$(x<em>{col},y</em>{row})$，假设它预测的输出的bbox中心坐标为$(x_c,y_c)$,那么最终预测出来的(x,y)是经过归一化处理的，表示的是中心相对于单元格的offset</p>
<p><strong>(w,h)是bbox相对于整个图片的比例</strong><br>预测的bbox的宽高为$w_b,h_b$，(w,h)表示的是bbox的是相对于整张图片的占比</p>
<p><strong>confidence</strong><br>这个置信度是由两部分组成，一是格子内是否有目标，二是bbox的准确度。定义置信度为$P<em>r(Object)∗IOU^{truth}</em>{pred}$<br>这里，如果格子内有物体，则$P_r(Object)=1$，此时置信度等于IoU。如果格子内没有物体，则$P_r(Object)=0$，此时置信度为0</p>
<p><strong>C类的条件概率</strong><br>条件概率定义为$P_r(Class_i |Object)$，表示该单元格存在物体且属于第i类的概率。</p>
<p>在测试的时候每个单元格预测最终输出的概率定义为，如下两图所示（两幅图不一样，代表一个框会输出B列概率值）<br>$P<em>r(Class_i|Object) ∗ P_r(Object) ∗ IOU^{truth}</em>{pred} = P<em>r(Class_i) ∗ IOU^{truth}</em>{pred}$</p>
<p>最后将$(S\times S)\times B\times20$ 列的结果送入NMS，最后即可得到最终的输出框结果</p>
<p><strong>损失函数</strong></p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/20180511204751564.png" alt></p>
<p>这里强调两点：<br> 1.每个图片的每个单元格不一定都包含object，如果没有object，那么confidence就会变成0，这样在优化模型的时候可能会让梯度跨越太大，模型不稳定跑飞了。为了平衡这一点，在损失函数中，设置两个参数$λ<em>{corrd}$和$λ</em>{noobj}$，其中$λ<em>{corrd}$控制bbox预测位置的损失，$λ</em>{noobj}$控制单个格内没有目标的损失。<br> 2.对于大的物体，小的偏差对于小的物体影响较大，为了减少这个影响，所以对bbox的宽高都开根号。</p>
<p><strong>缺点</strong></p>
<ul>
<li>YOLO的物体检测精度低于其他state-of-the-art的物体检测系统。</li>
<li>YOLO容易产生物体的定位错误。</li>
<li>YOLO对小物体的检测效果不好（尤其是密集的小物体，因为一个栅格只能预测2个物体）。</li>
</ul>
<h3 id="YOLO-v2"><a href="#YOLO-v2" class="headerlink" title="YOLO v2"></a>YOLO v2</h3><p>Redmon, J. and A. Farhadi, YOLO9000: Better, Faster, Stronger. (CVPR 2017)</p>
<p><strong>改进</strong>：</p>
<ul>
<li><p><strong>Batch Normalization</strong></p>
<p>Batch Normalization可以提升模型收敛速度，而且可以起到一定正则化效果，降低模型的过拟合。在YOLOv2中，每个卷积层后面都添加了Batch Normalization层，并且不再使用droput。使用Batch Normalization后，YOLOv2的mAP提升了2.4%。</p>
</li>
<li><p><strong>High Resolution Classifier</strong></p>
<p>目前大部分的检测模型都会在先在ImageNet分类数据集上预训练模型的主体部分（CNN特征提取器），由于历史原因，ImageNet分类模型基本采用大小为$224 \times 224$的图片作为输入，分辨率相对较低，不利于检测模型。所以YOLOv1在采用$224 \times 224$分类模型预训练后，将分辨率增加至$448 \times 448$，并使用这个高分辨率在检测数据集上fine tune。但是直接切换分辨率，检测模型可能难以快速适应高分辨率。所以YOLOv2增加了在ImageNet数据集上使用$448 \times 448$来fine tune分类网络这一中间过程（10 epochs），这可以使得模型在检测数据集上fine tune之前已经适用高分辨率输入。使用高分辨率分类器后，YOLOv2的mAP提升了约4%。</p>
</li>
<li><p><strong>Convolutionlal With Anchor Boxes</strong></p>
<p>anchor是RNP网络中的一个关键步骤，说的是在卷积特征图上进行滑窗操作，每一个中心可以预测9种不同大小的建议框。</p>
<p><strong>YOLO v1： S*S* (B*5 + C) =&gt; 7*7（2*5+20）</strong><br>　　 其中B对应Box数量，5对应 Rect 定位+置信度。每个Grid只能预测对应两个Box，这两个Box共用一个分类结果（20 classes），这是很不合理的临时方案。</p>
<p><strong>YOLO v2： S*S*K* (5 + C) =&gt; 13*13*9（5+20）</strong><br>　　分辨率改成了13*13，更细的格子划分对小目标适应更好，再加上与Faster一样的K=9，计算量增加了不少。通过Anchor Box改进，mAP由69.5下降到69.2，Recall由81%提升到了88%。<br>　　<br>　　为了引入anchor boxes来预测bounding boxes，作者在网络中果断去掉了全连接层。首先，作者去掉了后面的一个池化层以确保输出的卷积特征图有更高的分辨率。然后，通过缩减网络，让图片输入分辨率为416x416，这一步的目的是为了让后面产生的卷积特征图宽高都为奇数，这样就可以产生一个center cell。作者观察到，大物体通常占据了图像的中间位置， 就可以只用中心的一个cell来预测这些物体的位置，否则就要用中间的4个cell来进行预测，这个技巧可稍稍提升效率。最后，YOLOv2使用了卷积层降采样（factor为32），使得输入卷积网络的416x416图片最终得到13x13的卷积特征图（416/32=13）。<br>　　加入了anchor boxes后，可以预料到的结果是召回率上升，准确率下降。我们来计算一下，假设每个cell预测9个建议框，那么总共会预测13x13x9 = 1521个boxes，而之前的网络仅仅预测7x7x2 = 98个boxes。具体数据为：没有anchor boxes，模型recall为81%，mAP为69.5%；加入anchor boxes，模型recall为88%，mAP为69.2%。这样看来，准确率只有小幅度的下降，而召回率则提升了7%，说明可以通过进一步的工作来加强准确率，的确有改进空间。</p>
</li>
<li><p><strong>New Network——Darknet-19</strong></p>
<p>YOLOv2使用了一个新的分类网络作为特征提取部分，参考了前人的先进经验，比如类似于VGG，作者使用了较多的3x3卷积核，在每一次池化操作后把通道数翻倍。借鉴了network in network的思想，网络使用了全局平均池化（global average pooling），把1x1的卷积核置于3x3的卷积核之间，用来压缩特征。也用了batch normalization稳定模型训练。模型参数相对小一些。使用Darknet-19之后，YOLOv2的mAP值没有显著提升，但是计算量却可以减少约33%。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-07_18-40-15.jpg" alt></p>
</li>
</ul>
<ul>
<li><p><strong>Dimension Clusters</strong></p>
<p>在Faster R-CNN和SSD中，先验框的维度（长和宽）都是手动设定的，带有一定的主观性。如果选取的先验框维度比较合适，那么模型更容易学习，从而做出更好的预测。因此，YOLOv2采用k-means聚类方法对训练集中的边界框做了聚类分析。因为设置先验框的主要目的是为了使得预测框与ground truth的IOU更好，所以聚类分析时选用box与聚类中心box之间的IOU值作为距离指标： $d(\text { box }, \text { centroid })=1-\mathrm{IOU}(\text { box }, \text { centroid })$</p>
</li>
<li><p><strong>Direct location prediction</strong></p>
<script type="math/tex; mode=display">
x=\left(t_{x} * w_{a}\right)-x_{a}</script><script type="math/tex; mode=display">
y=\left(t_{y} * h_{a}\right)-y_{a}</script><p>这个公式的理解为：当预测tx=1，就会把box向右边移动一定距离（具体为anchor box的宽度），预测tx=-1，就会把box向左边移动相同的距离，该公式没有任何约束，中心点可能会出现在图像任何位置，这就有可能导致回归过程震荡，甚至无法收敛。</p>
<p><strong>强约束方法</strong>：</p>
<ul>
<li>对应 Cell 距离左上角的边距为$\left(C<em>{x}, C</em>{y}\right)$，σ定义为sigmoid激活函数，将函数值约束到［0，1］，用来预测相对于该Cell中心的偏移（不会偏离cell）；</li>
<li>预定Anchor（文中描述为bounding box prior）对应的宽高为$\left(P<em>{w}, P</em>{h}\right)$，预测 Location 是相对于Anchor的宽高乘以系数得到；</li>
</ul>
</li>
</ul>
<p>  如果这个cell距离图像左上角的边距为$\left(C<em>{x}, C</em>{y}\right)$以及该cell对应的box维度（bounding box prior）的长和宽分别为$\left(P<em>{w}, P</em>{h}\right)$，那么预测值可以表示为： </p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-07_18-53-58.jpg" alt></p>
<ul>
<li><p><strong>Fine-Grained Features</strong><br>YOLO最终在13x13的特征图上进行预测，虽然这足以胜任大尺度物体的检测，但对于小物体还需要更精细的特征图（Fine-Grained Features），前面更精细的特征图可以用来预测小物体。<br>YOLOv2提出了一种passthrough层来利用更精细的特征图。YOLOv2所利用的Fine-Grained Features是26x26大小的特征图（最后一个maxpooling层的输入），对于Darknet-19模型来说就是大小为26x26x512的特征图。passthrough层与ResNet网络的shortcut类似，以前面更高分辨率的特征图为输入，然后将其连接到后面的低分辨率特征图上。前面的特征图维度是后面的特征图的2倍，passthrough层抽取前面层的每个2x2的局部区域，然后将其转化为channel维度，对于26x26x512的特征图，经passthrough层处理之后就变成了13x13x2048的新特征图（特征图大小降低4倍，而channles增加4倍），这样就可以与后面的13x13x1024特征图连接在一起形成13x13x3072的特征图，然后在此特征图基础上卷积做预测。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-07_19-14-51.jpg" alt></p>
</li>
</ul>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/20161229150249883.jpg" alt></p>
<ul>
<li><p><strong>Multi-Scale Training</strong><br>　　为了让 YOLOv2 适应不同Scale下的检测任务，作者尝试通过不同分辨率图片的训练来提高网络的适应性。(网络只用到了卷积层和池化层，可以进行动态调整（检测任意大小图片）)<br>具体做法是：<br>　　 每经过10次训练（10 epoch），就会随机选择新的图片尺寸。YOLO网络使用的降采样参数为32，那么就使用32的倍数进行尺度池化{320,352，…，608}。最终最小的尺寸为320 <em> 320，最大的尺寸为608 </em> 608。接着按照输入尺寸调整网络进行训练。</p>
<p>​         这种机制使得网络可以更好地预测不同尺寸的图片，意味着同一个网络可以进行不同分辨率的检测任务，在小尺寸图片上YOLOv2运行更快，在速度和精度上达到了平衡。</p>
</li>
<li><p><strong>交叉数据训练</strong></p>
<p>YOLO9000是在YOLOv2的基础上提出的一种可以检测超过9000个类别的模型，其主要贡献点在于提出了一种分类和检测的联合训练策略。众多周知，检测数据集的标注要比分类数据集打标签繁琐的多，所以ImageNet分类数据集比VOC等检测数据集高出几个数量级。在YOLO中，边界框的预测其实并不依赖于物体的标签，所以YOLO可以实现在分类和检测数据集上的联合训练。对于检测数据集，可以用来学习预测物体的边界框、置信度以及为物体分类，而对于分类数据集可以仅用来学习分类，但是其可以大大扩充模型所能检测的物体种类。</p>
<p>作者选择在COCO和ImageNet数据集上进行联合训练，但是遇到的第一问题是两者的类别并不是完全互斥的，比如”Norfolk terrier”明显属于”dog”，所以作者提出了一种层级分类方法（Hierarchical classification），主要思路是根据各个类别之间的从属关系（根据WordNet）建立一种树结构WordTree，结合COCO和ImageNet建立的WordTree如下图所示：</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-08_09-22-20.jpg" alt><br>分类时的概率计算借用了决策树思想，某个节点的概率值等于 该节点到根节点的所有条件概率之积。<br>如果想求得特定节点的绝对概率，只需要沿着路径做连续乘积。例如 如果想知道一张图片是不是“Norfolk terrier ”需要计算：</p>
<p>$\operatorname{Pr}(\text { Norfolk terrier })=\operatorname{Pr}(\text { Norfolk terrier } | \text { terrier })$<br>*$\operatorname{Pr}(\text { terrier } | \text { hunting dog })$</p>
<p><em>. . . </em></p>
<p><em>$\operatorname{Pr}(\text { mammal } |\text { animal })$
  </em>$\operatorname{Pr}(\text { animal } | \text { physical object })$<br>softmax操作也同时应该采用分组操作，基于所有“同义词集”计算softmax，其中“同义词集”是同一概念的下位词。</p>
</li>
</ul>
<h3 id="YOLO-v3"><a href="#YOLO-v3" class="headerlink" title="YOLO v3"></a>YOLO v3</h3><p>Redmon, J. and A. Farhadi, YOLOv3: An Incremental Improvement. 2018.</p>
<ul>
<li><p><strong>新的网络结构Darknet-53</strong><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/2709767-e65c08c61bfaa7c7.png" alt></p>
<p>借鉴了残差网络residual network的做法，在一些层之间设置了快捷链路（shortcut connections）。每个残差组 件有两个卷积层和一个快捷链路。</p>
</li>
<li><p><strong>利用多尺度特征进行对象检测</strong><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/2709767-bc5def91d05e4d3a.png" alt><br>YOLO2曾采用passthrough结构来检测细粒度特征，在YOLO3更进一步采用了3个不同尺度的特征图来进行对象检测。</p>
<p>结合上图看，卷积网络在79层后，经过下方几个黄色的卷积层得到一种尺度的检测结果。相比输入图像，这里用于检测的特征图有32倍的下采样。比如输入是416x416的话，这里的特征图就是13x13了。由于下采样倍数高，这里特征图的感受野比较大，因此适合检测图像中尺寸比较大的对象。</p>
<p>为了实现细粒度的检测，第79层的特征图又开始作上采样（从79层往右开始上采样卷积），然后与第61层特征图融合（Concatenation），这样得到第91层较细粒度的特征图，同样经过几个卷积层后得到相对输入图像16倍下采样的特征图。它具有中等尺度的感受野，适合检测中等尺度的对象。</p>
<p>最后，第91层特征图再次上采样，并与第36层特征图融合（Concatenation），最后得到相对输入图像8倍下采样的特征图。它的感受野最小，适合检测小尺寸的对象。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/2709767-9b28d0f1c682b80a.png" alt></p>
<p>对于一个416x416的输入图像，在每个尺度的特征图的每个网格设置3个先验框，总共有 13x13x3 + 26x26x3 + 52x52x3 = 10647 个预测。每一个预测是一个(4+1+80)=85维向量，这个85维向量包含边框坐标（4个数值），边框置信度（1个数值），对象类别的概率（对于COCO数据集，有80种对象）。</p>
<p>对比一下，YOLO2采用13x13x5 = 845个预测，YOLO3的尝试预测边框数量增加了10多倍，而且是在不同分辨率上进行，所以mAP以及对小物体的检测效果有一定的提升。</p>
</li>
<li><p><strong>9种尺度的先验框</strong><br>随着输出的特征图的数量和尺度的变化，先验框的尺寸也需要相应的调整。YOLO2已经开始采用K-means聚类得到先验框的尺寸，YOLO3延续了这种方法，为每种下采样尺度设定3种先验框，总共聚类出9种尺寸的先验框。在COCO数据集这9个先验框是：(10x13)，(16x30)，(33x23)，(30x61)，(62x45)，(59x119)，(116x90)，(156x198)，(373x326)。</p>
<p>分配上，在最小的13x13特征图上（有最大的感受野）应用较大的先验框(116x90)，(156x198)，(373x326)，适合检测较大的对象。中等的26x26特征图上（中等感受野）应用中等的先验框(30x61)，(62x45)，(59x119)，适合检测中等大小的对象。较大的52x52特征图上（较小的感受野）应用较小的先验框(10x13)，(16x30)，(33x23)，适合检测较小的对象。</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/2709767-5cc00a60004e0473.png" alt></p>
</li>
<li><p><strong>对象分类softmax改成logistic</strong><br>YOLOv3 不使用 Softmax 对每个框进行分类，主要考虑因素有两个：</p>
<ul>
<li>Softmax 使得每个框分配一个类别（得分最高的一个），而对于 Open Images这种数据集，目标可能有重叠的类别标签，因此 Softmax不适用于多标签分类。</li>
<li>Softmax 可被独立的多个 logistic 分类器替代，且准确率不会下降。<br>所以预测对象类别时不使用softmax，改成使用logistic的输出进行预测。这样能够支持多标签对象。</li>
</ul>
</li>
</ul>
<h3 id="SSD"><a href="#SSD" class="headerlink" title="SSD"></a>SSD</h3><p>Liu, W., et al., SSD: Single Shot MultiBox Detector. (ECCV 2016)</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-08_14-51-11.jpg" alt></p>
<p><strong>创新点</strong></p>
<ul>
<li><p><strong>在多层多尺度特征图上进行检测</strong></p>
<p>低层特征图具有细节信息，看得比较细，而高层特征图中具有高级语义信息，看得比较广，SSD提出同时利用低层特征图和高层特征图进行检测。SSD为了避免利用太低层的特征，从VGG后面开始，又往后添加了4层卷积层，如此就得到了多层次的特征图。这6层特征图的大小分别为：38x38, 19x19, 10x10, 5x5, 3x3, 1x1</p>
</li>
<li><p><strong>default boxes</strong></p>
<p>two-stage 方法太慢，计算代价大。SSD中避免使用region proposals,而采用default boxes。SSD借鉴RPN网络中的anchor box概念。首先将feature map划分为小格子叫做feature map cell，再在每个cell中设置一系列不同长宽比的default box。将其应用于不同分辨率的特征图中。在多个特征图中使用不同的默认框形状，可以有效地离散可能的输出框形状空间。</p>
</li>
<li><p><strong>用卷积层来预</strong><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/2148039-cec47c5d71ce8f22.png" alt>3x3的卷积在特征图上进行操作，在特征图的每个点提取特征，然后对每个default box生成四个偏移量来表示生成的bounding box，这四个偏移量分别表示生成框中心x坐标、y坐标、宽度、高度对应于当前default box的偏移量，这里的计算方法采用了RPN中的方法。同时，针对每个bounding box, 卷积会进行分类操作，输出C个分类数值，注意这里的C包括背景类。因此对于每个default box有C+4个输出值，而K个default box就有K(C+4)个输出值，因此，总共需要K*(C+4)个3x3卷积。</p>
<p>总的来说就是采用default box的方式，在多层多尺度的特征图上使用卷积进行检测（分类+回归）。</p>
</li>
<li><p><strong>数据增广</strong><br>为了使得模型对于不同大小、不同形状的物体具有鲁棒性，因此采用了data augmentation。这篇论文在训练时，首先对一张图片进行random crop，然后将其resize的原图尺度，然后以0.5的概率进行水平翻转、同时添加一些色彩变换。</p>
</li>
<li><p><strong>加入atrous</strong><br>将 VGG 中的 FC6 layer、FC7 layer 转成为 卷积层，并从模型的 FC6、FC7 上的参数，进行采样得到这两个卷积层的 parameters。还将 Pool5 layer 的参数，从2×2−s2转变成 3×3−s4，外加一个 pad（1）（猜想是不想reduce特征图大小），为了配合这种变化，采用了一种Atrous Algorithm，其实就是conv6采用扩展卷积或带孔卷积（Dilation Conv），其在不增加参数与模型复杂度的条件下指数级扩大卷积的视野，其使用扩张率(dilation rate)参数，来表示扩张的大小。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-08_15-32-00.jpg" alt><br>带孔卷积并不是卷积核里带孔，而是在卷积的时候，跳着的去卷积map（比如dilated＝2的孔卷积，就是隔一个像素点，“卷”一下，这就相当于把卷积核给放大了（3x3的核变成7x7的核，多出位置的weights给0就是。）这样就使得3x3的卷积核也能达到7x7卷积核的感受野</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/2018051716490729.png" alt></p>
</li>
</ul>
<p><strong>缺点</strong><br>SSD存在的缺点：</p>
<ul>
<li>需要手动设置参数prior box，无法通过训练得到，依赖经验。</li>
<li>存在着对小目标检测效果不好的现象。</li>
</ul>
<h3 id="DSSD"><a href="#DSSD" class="headerlink" title="DSSD"></a>DSSD</h3><p>Fu, C., et al., DSSD : Deconvolutional Single Shot Detector. (CVPR 2017)</p>
<p>DSSD针对小目标鲁棒性太差，提出了以下两个贡献：</p>
<ul>
<li>把SSD的基准网络从VGG换成了Resnet-101，增强了特征提取能力；</li>
<li>使用反卷积层（deconvolution layer ）增加了大量上下文信息。</li>
</ul>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-08_16-00-32.jpg" alt></p>
<p>换完base network之后，作者通过实验发现，准确率从77.5%降至了76.4%，说明只换网络并不能够提高准确率。如果能够提高每一个子网络的准确率，那整个网络的准确率也会得到提升。所以作者在每次预测之前加入了一个“预测模块”（prediction module）：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-08_16-11-49.jpg" alt><br>如上图所示：<br>(a)为原SSD对于特征信息进行分类与定位的模型，其实并没有预测模块，直接进行预测；<br>(b)为作者在预测之前加入了residual block模块；<br>(c)将residual block模块中直接映射identity mapping换成了1x1卷积<br>(d)堆积residual block模块</p>
<p>经过实验证明，（c）能够获得更好的准确率。</p>
<p>第二个贡献就是添加了反卷积模块，引入了空间上下文信息，从而大大提高了检测准确率。添加了反卷积之后，整个网络形成不对称的沙漏结构。</p>
<p>蓝色块为卷积层，红色块为反卷积层。红色块做反卷积操作，然后与同大小的卷积层融合，之后再进行物体检测。其中的“反卷积模块”（Deconvolution module）</p>
<p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/object%20detection/Snipaste_2020-01-08_16-17-17.jpg" alt></p>
<p>其中Eltw Product是元素点积操作。作者也尝试了元素求和，但是点积操作的准确率稍高一些。</p>
<h3 id="目标检测进展"><a href="#目标检测进展" class="headerlink" title="目标检测进展"></a>目标检测进展</h3><ul>
<li><p>用更好的引擎检测</p>
<p>AlexNet<br>VGG： 16—19层，使用 3×3 卷积核取代 5×5 和 7×7。<br>GoogLeNet： 即，Inception 网络家族，增加卷积神经网络深度和宽度。<br>ResNet<br>DenseNet： 受 short cut 连接的影响，作者将每一层以前馈的方式和其他所有层相连。<br>SENet： 主要贡献是将全局池化与 shuffling 结合，学习特征图通道的重要性。</p>
</li>
<li><p>用更好的特征检测<br>研究者在最新检测引擎的基础上，努力提高图像特征质量，最重要的两组方法是：</p>
<ul>
<li>特征融合<br>-自底向上融合：通过跳跃连接将浅层特征传递到深层<br>-自顶向下融合：将深层特征反馈给浅层<br>特征融合可以被看做是不同特征图间的元素运算。主要有几组方法：<br>元素求和<br>元素乘积<br>串联<br>元素乘积的优点是可以抑制或者强调某一区域内特征，可能有利于小目标检测。特征串联的优点是可以整合不同区域的上下文特征，缺点是增加内存消耗。</li>
<li>学习具有大感受野的高分辨率特征<br>小感受野更关注局部细节。特征图分辨率越小，越难检测小目标。增加特征分辨率最直接的方法是去除池化层，或者减小卷积下采样率。但是这样同时会减小感受野。<br>同时增加感受野和分辨率的方法是引入空洞卷积。</li>
</ul>
</li>
<li>定位提升<br>主要有两种方法：<br>边界框精炼<br>设计新的损失函数</li>
<li>对旋转和尺度变化鲁棒的检测<br>数据增强<br>为不同方位训练独立检测器</li>
</ul>
<h3 id="未来的研究"><a href="#未来的研究" class="headerlink" title="未来的研究"></a>未来的研究</h3><ul>
<li>轻量级目标检测：加速检测算法，使其能够在移动设备上平稳运行。</li>
<li>检测与AutoML：未来的一个方向是使用神经结构搜索，减少设计检测模型时的人为干预(例如，如何设计引擎，如何设置Anchor)</li>
<li>Proposal的Anchor生成方式</li>
<li>弱监督检测</li>
<li>小目标检测</li>
<li>视频中的检测（实时）</li>
<li>信息融合检测</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>目标检测</tag>
      </tags>
  </entry>
  <entry>
    <title>PyQt5与Opencv的小小融合</title>
    <url>/2019/03/20/PyQt5%E4%B8%8EOpencv%E7%9A%84%E5%B0%8F%E5%B0%8F%E8%9E%8D%E5%90%88/</url>
    <content><![CDATA[<h2 id="一些核心代码"><a href="#一些核心代码" class="headerlink" title="一些核心代码"></a><a id="more"></a>一些核心代码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class myLabel(QLabel):</span><br><span class="line">    x0 &#x3D; 0</span><br><span class="line">    y0 &#x3D; 0</span><br><span class="line">    x1 &#x3D; 0</span><br><span class="line">    y1 &#x3D; 0</span><br><span class="line">    flag &#x3D; False</span><br><span class="line"></span><br><span class="line">    def mousePressEvent(self,event):</span><br><span class="line">        self.flag &#x3D; True</span><br><span class="line">        self.x0 &#x3D; event.x()</span><br><span class="line">        self.y0 &#x3D; event.y()</span><br><span class="line">    def mouseReleaseEvent(self,event):</span><br><span class="line">        self.flag &#x3D; False</span><br><span class="line"></span><br><span class="line">    def mouseMoveEvent(self,event):</span><br><span class="line">        if self.flag:</span><br><span class="line">            self.x1 &#x3D; event.x()</span><br><span class="line">            self.y1 &#x3D; event.y()</span><br><span class="line">            self.update()</span><br><span class="line">    def paintEvent(self, event):</span><br><span class="line">        super().paintEvent(event)</span><br><span class="line">        rect &#x3D;QRect(self.x0, self.y0, abs(self.x1-self.x0), abs(self.y1-self.y0))</span><br><span class="line">        painter &#x3D; QPainter(self)</span><br><span class="line">        painter.setPen(QPen(Qt.red,4,Qt.SolidLine))</span><br><span class="line">        painter.drawRect(rect)</span><br><span class="line"></span><br><span class="line">        pqscreen  &#x3D; QGuiApplication.primaryScreen()</span><br><span class="line">        pixmap2 &#x3D; pqscreen.grabWindow(self.winId(), self.x0, self.y0, abs(self.x1-self.x0), abs(self.y1-self.y0))</span><br><span class="line">        pixmap2.save(&#39;555.png&#39;)</span><br><span class="line">    </span><br><span class="line">class Example(QWidget):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.initUI()</span><br><span class="line">    def initUI(self):</span><br><span class="line">        self.resize(675, 300)</span><br><span class="line">        self.setWindowTitle(&#39;关注微信公众号：学点编程吧--opencv、PyQt5的小小融合&#39;)</span><br><span class="line"></span><br><span class="line">        self.lb &#x3D; myLabel(self)</span><br><span class="line">        self.lb.setGeometry(QRect(140, 30, 511, 241))</span><br><span class="line"></span><br><span class="line">        img &#x3D; cv2.imread(&#39;xxx.jpg&#39;)</span><br><span class="line">        height, width, bytesPerComponent &#x3D; img.shape</span><br><span class="line">        bytesPerLine &#x3D; 3 * width</span><br><span class="line">        cv2.cvtColor(img, cv2.COLOR_BGR2RGB, img)</span><br><span class="line">        QImg &#x3D; QImage(img.data, width, height, bytesPerLine, QImage.Format_RGB888)</span><br><span class="line">        pixmap &#x3D; QPixmap.fromImage(QImg)</span><br><span class="line"></span><br><span class="line">        self.lb.setPixmap(pixmap)</span><br><span class="line">        self.lb.setCursor(Qt.CrossCursor)</span><br><span class="line"></span><br><span class="line">        self.show()</span><br></pre></td></tr></table></figure>
<h2 id="实现大体思路"><a href="#实现大体思路" class="headerlink" title="实现大体思路"></a>实现大体思路</h2><ul>
<li>重新实现QLabel类，在类中重新实现了鼠标的点击、拖动、释放、以及绘画事件</li>
<li>在窗体上新建了一个label标签，然后载入图片</li>
<li>label标签载入的图像是由Opencv实现的</li>
</ul>
<h2 id="鼠标画矩形的思路"><a href="#鼠标画矩形的思路" class="headerlink" title="鼠标画矩形的思路"></a>鼠标画矩形的思路</h2><ul>
<li>新建一个矩形是否完成标志flag，默认是Flase，表示未完成</li>
<li>鼠标点击的时候，记录当前鼠标所在位置的坐标，flag标志置为True，表示开始画矩形了</li>
<li>鼠标拖动的时候，因为flag为True，所以记录当前鼠标所在位置的坐标</li>
<li>鼠标释放的时候，flag置为False，表示矩形画完了，准备画下一个了</li>
</ul>
<h2 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h2><h3 id="Opencv图像的转换"><a href="#Opencv图像的转换" class="headerlink" title="Opencv图像的转换"></a>Opencv图像的转换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">img &#x3D; cv2.imread(&#39;xxx.jpg&#39;)</span><br><span class="line">height, width, bytesPerComponent &#x3D; img.shape</span><br><span class="line">bytesPerLine &#x3D; 3 * width</span><br><span class="line">cv2.cvtColor(img, cv2.COLOR_BGR2RGB, img)</span><br><span class="line">QImg &#x3D; QImage(img.data, width, height, bytesPerLine, QImage.Format_RGB888)</span><br><span class="line">pixmap &#x3D; QPixmap.fromImage(QImg)</span><br></pre></td></tr></table></figure>
<p>这个就是Opencv和PyQt对象的转化了。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">img &#x3D; cv2.imread(&#39;xxx.jpg&#39;)</span><br></pre></td></tr></table></figure><br>使用Opencv读取图像。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">height, width, bytesPerComponent &#x3D; img.shape</span><br></pre></td></tr></table></figure><br>在OpenCV-Python绑定中，图像使用NumPy数组的属性(这就解释了为什么要更新numpy)来表示图像的尺寸和通道信息。此时如果我们输出img.shape，将得到(200, 360, 3)。最后的3表示这是一个RGB图像。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cv2.cvtColor(img, cv2.COLOR_BGR2RGB, img)</span><br></pre></td></tr></table></figure><br>将图像从一个颜色空间转换为另一个颜色空间。<br>Python中的函数要求是这样的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Python：cv2.cvtColor（src，code [，dst [，dstCn]]）→dst</span><br></pre></td></tr></table></figure><br>参数：</p>
<ol>
<li>src - 输入图像：8位无符号，16位无符号（CV_16UC …）或单精度浮点数。</li>
<li>dst - 输出与src相同大小和深度的图像。</li>
<li>code - 颜色空间转换代码（请参阅下面的说明）。</li>
<li>dstCn - 目标图像中的通道数量；如果参数是0，则通道的数量是从src和代码自动导出的。</li>
</ol>
<p>该函数将输入图像从一个颜色空间转换为另一个颜色空间。在从RGB颜色空间转换到RGB颜色空间的情况下，通道的顺序应明确指定（RGB或BGR）。请注意，OpenCV中的默认颜色格式通常被称为RGB，但实际上是BGR（字节相反）。因此，标准（24位）彩色图像中的第一个字节将是一个8位蓝色分量，第二个字节将是绿色，而第三个字节将是红色。第四，五，六字节将是第二个像素（蓝色，然后是绿色，然后是红色），依此类推。</p>
<p>这里我们就是要求从Opencv的BGR图像转换成RGB图像了。为什么？因为要转换成PyQt5可以识别的啊！<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bytesPerLine &#x3D; 3 * width</span><br><span class="line">QImg &#x3D; QImage(img.data, width, height, bytesPerLine, QImage.Format_RGB888)</span><br></pre></td></tr></table></figure><br>QImage类提供了独立于硬件的图像表示形式，允许直接访问像素数据，并可用作绘画设备。Qt提供了四个类来处理图像数据：QImage，QPixmap，QBitmap和QPicture。QImage是为I/O设计和优化的，并且可以直接进行像素访问和操作，而QPixmap则是针对在屏幕上显示图像而设计和优化的。 </p>
<p>QBitmap只是一个继承QPixmap的便利类，深度为1。最后，QPicture类是一个记录和重放QPainter命令的绘图设备。</p>
<p>因为QImage是一个QPaintDevice子类，QPainter可以用来直接绘制图像。在QImage上使用QPainter时，可以在当前GUI线程之外的另一个线程中执行绘制。QImage提供了一系列功能，可用于获取有关图像的各种信息。也有几个功能，使图像转换。<br>详见官网介绍：<a href="https://doc.qt.io/qt-5/qimage.html" target="_blank" rel="noopener">QImage Class | Qt GUI 5.10</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QImg &#x3D; QImage(img.data, width, height, bytesPerLine, QImage.Format_RGB888)</span><br></pre></td></tr></table></figure>
<p>函数原型是：<strong>QImage(str, int, int, int, QImage.Format)</strong>，用给定的宽度，高度和格式构造一个使用现有内存缓冲区数据的图像。宽度和高度必须以像素指定。bytesPerLine指定每行的字节数。</p>
<p><strong>这里有个疑问：为什么bytesPerLine = 3 * width？</strong><br>我的理解是：当1个像素占3个字节，此时图像为真彩色图像。</p>
<p><strong>QImage.Format_RGB888</strong>表示的是图像存储使用8-8-8 24位RGB格式。当然还有更多的格式，详见QImage的官方介绍，限于篇幅这里不展开。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pixmap &#x3D; QPixmap.fromImage(QImg)</span><br></pre></td></tr></table></figure><br>这个很好理解，就是想QImage对象转换成QPixmap对象，便于下步我们将Label标签中设置图像。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.lb.setPixmap(pixmap)</span><br></pre></td></tr></table></figure><br>设置标签的图像信息。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.lb.setCursor(Qt.CrossCursor)</span><br></pre></td></tr></table></figure><br>设置鼠标在QLabel对象中的样式，只是为了画画好看些而已，没其它的意思。除了这个十字架的，还有其它很多样式，如下图：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/v2-cf7bf8978adbaa898f059207f52f3d5b_hd.jpg" alt></p>
<h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>按照上文中我们介绍的思路，我们自定义了一个QLabel类myLabel，当然是继承了QLabel。然后我们用几个类变量记录鼠标的坐标和矩形是否完成的标志。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">def mousePressEvent(self,event):</span><br><span class="line">    self.flag &#x3D; True</span><br><span class="line">    self.x0 &#x3D; event.x()</span><br><span class="line">    self.y0 &#x3D; event.y()</span><br><span class="line"></span><br><span class="line">def mouseReleaseEvent(self,event):</span><br><span class="line">    self.flag &#x3D; False</span><br><span class="line"></span><br><span class="line">def mouseMoveEvent(self,event):</span><br><span class="line">    if self.flag:</span><br><span class="line">        self.x1 &#x3D; event.x()</span><br><span class="line">        self.y1 &#x3D; event.y()</span><br><span class="line">        self.update()</span><br></pre></td></tr></table></figure><br>这里就是重载了鼠标产生的几个事件，是我们自定义的。分别记录了点击鼠标后初始的鼠标坐标，以及释放鼠标后的鼠标坐标。并在鼠标移动的时候更新UI。也就是我们上面所说的鼠标画矩形的思路。</p>
<h3 id="画矩形"><a href="#画矩形" class="headerlink" title="画矩形"></a>画矩形</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def paintEvent(self, event):</span><br><span class="line">    super().paintEvent(event)</span><br><span class="line">    rect &#x3D;QRect(self.x0, self.y0, abs(self.x1-self.x0), abs(self.y1-self.y0))</span><br><span class="line">    painter &#x3D; QPainter(self)</span><br><span class="line">    painter.setPen(QPen(Qt.red,4,Qt.SolidLine))</span><br><span class="line">    painter.drawRect(rect)</span><br><span class="line"></span><br><span class="line">    pqscreen  &#x3D; QGuiApplication.primaryScreen()</span><br><span class="line">    pixmap2 &#x3D; pqscreen.grabWindow(self.winId(), self.x0, self.y0, abs(self.x1-self.x0), abs(self.y1-self.y0))</span><br><span class="line">    pixmap2.save(&#39;555.png&#39;)</span><br></pre></td></tr></table></figure>
<p>这个是关键点啊！<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">super().paintEvent(event)</span><br></pre></td></tr></table></figure><br>调用父类的paintEvent()，这个是为了显示你设置的效果。否则会是一片空白。大家可以试试注释这句话，看看效果啊！<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rect &#x3D;QRect(self.x0, self.y0, abs(self.x1-self.x0), abs(self.y1-self.y0))</span><br></pre></td></tr></table></figure><br>QRect类使用整数精度在平面中定义一个矩形。矩形通常表示为左上角和大小。QRect的大小（宽度和高度）始终等同于构成其渲染基础的数学矩形。QRect可以用一组左，上，宽和高整数，或者从QPoint和QSize构成。以下代码创建两个相同的矩形。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QRect(100, 200, 11, 16)</span><br><span class="line">QRect(QPoint(100, 200), QSize(11, 16))</span><br><span class="line">painter &#x3D; QPainter(self)</span><br><span class="line">painter.setPen(QPen(Qt.red,4,Qt.SolidLine))</span><br><span class="line">painter.drawRect(rect)</span><br></pre></td></tr></table></figure><br>构建一个QPainter对象，设置它的画笔，然后画一个矩形。貌似感觉好简单！^_^”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pqscreen  &#x3D; QGuiApplication.primaryScreen()</span><br><span class="line">pixmap2 &#x3D; pqscreen.grabWindow(self.winId(), self.x0, self.y0, abs(self.x1-self.x0), abs(self.y1-self.y0))</span><br><span class="line">pixmap2.save(&#39;555.png&#39;)</span><br></pre></td></tr></table></figure>
<p>截屏的原理呢，主要还是运用QScreen类中的grabWindow方法。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">QScreen.grabWindow(WId window, int x &#x3D; 0, int y &#x3D; 0, int width &#x3D; -1, int height &#x3D; -1)</span><br></pre></td></tr></table></figure><br>大致意思是创建并返回通过抓取由QRect（x，y，width，height）限制的给定窗口构造的像素图。</p>
<p>参数（x，y）指定窗口中的偏移量，而（宽度，高度）指定要复制的区域。如果宽度为负数，则该函数将所有内容复制到窗口的右边界。如果高度为负数，则该函数将所有内容复制到窗口的底部。</p>
<p>窗口系统标识符（WId）可以使用QWidget.winId（）函数进行检索。grabWindow（）函数从屏幕抓取像素，而不是从窗口抓取像素，即，如果有另一个窗口部分或全部覆盖抓取的像素，则也会从上面的窗口获取像素。鼠标光标一般不会被抓取。详见官网介绍：QScreen Class | Qt GUI 5.10</p>
<p>由于QScreen类无构造函数，所以我们使用QGuiApplication.primaryScreen()创建了一个Qscreen类对象。最后使用pixmap2.save(‘555.png’)，保存具体的截图。</p>
<p>如果你想保存的图片没有红框，可以参考这里：<br><a href="http://www.xdbcb8.com/forum/topic/%e3%80%8apyqt5%e4%b8%8eopencv%e7%9a%84%e5%b0%8f%e5%b0%8f%e8%9e%8d%e5%90%88%e3%80%8b%e8%bf%99%e7%af%87%e6%96%87%e7%ab%a0%e4%b8%ad%e5%a6%82%e4%bd%95%e5%ae%9e%e7%8e%b0%e4%bf%9d%e5%ad%98%e4%b8%8b%e6%9d%a5" target="_blank" rel="noopener">《pyqt5与opencv的小小融合》这篇文章中如何实现保存下来</a></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Opencv</tag>
        <tag>PyQt5</tag>
      </tags>
  </entry>
  <entry>
    <title>Permmision denied解决方法</title>
    <url>/2019/03/19/Permmision%20denied%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>这是因为要管理员权限的，而ubuntu又不想给普通用户赋予管理员权限。所以这里开启root账号</p>
<h2 id="首先设置-root-密码"><a href="#首先设置-root-密码" class="headerlink" title=" 首先设置 root 密码"></a><a id="more"></a> 首先设置 root 密码</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo passwd</span><br></pre></td></tr></table></figure>
<p>会出现以下画面：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[sudo] password for luban:                        &#x2F;&#x2F;输入当前普通用户的密码</span><br><span class="line"></span><br><span class="line">Enter new UNIX password:                          &#x2F;&#x2F;给root设置密码</span><br><span class="line"></span><br><span class="line">Retype new UNIX password:                         &#x2F;&#x2F;确认输入密码</span><br><span class="line"></span><br><span class="line">passwd: password updated successfully</span><br></pre></td></tr></table></figure></p>
<h2 id="开启root"><a href="#开启root" class="headerlink" title="开启root"></a>开启root</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">su root</span><br></pre></td></tr></table></figure>
<h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>为了获得执行权限，借助chmod指令修改文件权限即可。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">chmod 777 文件夹或文件路径</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Python新环境下快速安装依赖包的小技巧</title>
    <url>/2019/03/19/Python%E6%96%B0%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96%E5%8C%85%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>当你新创一个Python环境时，若还用pip一个个装你所需要的库，明显效率十分低下。这里有个小技巧，你可以从已配置好的旧环境中，导出一个requirements.txt 文件，用于记录所有依赖包及其精确的版本号。以便新环境部署。<br><a id="more"></a><br>在旧环境中执行以下命令，生成requirements.txt文件：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><br>requirements.txt中的内容类似如下，记录了你旧有环境的依赖包及其精确的版本号：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appdirs&#x3D;&#x3D;1.4.3</span><br><span class="line">backports.functools-lru-cache&#x3D;&#x3D;1.5</span><br><span class="line">beautifulsoup4&#x3D;&#x3D;4.5.3</span><br><span class="line">bs4&#x3D;&#x3D;0.0.1</span><br><span class="line">cycler&#x3D;&#x3D;0.10.0</span><br><span class="line">kiwisolver&#x3D;&#x3D;1.0.1</span><br><span class="line">lxml&#x3D;&#x3D;3.7.3</span><br><span class="line">matplotlib&#x3D;&#x3D;2.2.0</span><br><span class="line">numpy&#x3D;&#x3D;1.14.1</span><br><span class="line">pandas&#x3D;&#x3D;0.22.0</span><br><span class="line">pyparsing&#x3D;&#x3D;2.2.0</span><br><span class="line">python-dateutil&#x3D;&#x3D;2.6.1</span><br><span class="line">pytz&#x3D;&#x3D;2018.3</span><br><span class="line">six&#x3D;&#x3D;1.11.0</span><br><span class="line">virtualenv&#x3D;&#x3D;15.1.0</span><br></pre></td></tr></table></figure><br>这时你可以把requirements.txt拷入新配置的Python目录下，执行以下命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><br>则会按照requirements.txt中所写的依赖包和版本依序进行安装。<br>注意：<br>若迁入的系统不同或Python版本不同，在安装过程中可能会因为找不到相应的依赖包版本而报错<br>这时你可以进入requirements.txt把报错的依赖包后的版本信息去掉，保存，重新执行命令即可，它会自动下载匹配的最新版本。<br>也可以把==改成&lt;=，代表它会搜索不大于此版本的最高版本进行安装。<br>由于pip下载源在国外，若无合适的VPN，此期间下载过程会十分漫长，这里提供几个常用的国内镜像源：</p>
<ul>
<li>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a></li>
<li>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></li>
<li>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a></li>
<li>豆瓣 <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a></li>
<li>华中科技大学 <a href="http://pypi.hustunique.com/" target="_blank" rel="noopener">http://pypi.hustunique.com/</a></li>
</ul>
<p>可以在使用pip的时候，加上参数-i和镜像地址，指定下载源，加速下载过程，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt -i https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04下配置GPU版CUDA和cuDNN</title>
    <url>/2019/03/19/Ubuntu-16.04%E4%B8%8B%E9%85%8D%E7%BD%AEGPU%E7%89%88CUDA%E5%92%8CcuDNN/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>先介绍下我自己配置的环境</p>
<ul>
<li>Ubuntu 16.04</li>
<li>GTX2080ti显卡</li>
<li>NVIDIA 418.3</li>
<li>CUDA 10.0</li>
<li>cuDNN 7.6.2</li>
</ul>
<p>以下教程针对从零开始的用户，若系统中已装有CUDA和cuDNN，却在当前用户下无法使用，请<a href="#添加环境变量">添加环境变量</a></p>
<h2 id="安装NVIDIA显卡驱动"><a href="#安装NVIDIA显卡驱动" class="headerlink" title="安装NVIDIA显卡驱动"></a>安装NVIDIA显卡驱动</h2><p>1.先在<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">NVIDIA官网</a>上下载对应的驱动程序，可根据自己的GPU的型号下载相应的.run文件<br>例如NVIDIA-Linux-x86_64-3xx.xx.run形式的文件名</p>
<p>2.禁用开源nouveau驱动<strong>（非常重要）</strong><br>Ubuntu系统集成的显卡驱动程序是nouveau，它是第三方为NVIDIA开发的开源驱动，我们需要先将其屏蔽才能安装NVIDIA官方驱动。<br>将驱动添加到黑名单blacklist.conf中，但是由于该文件的属性不允许修改。所以需要先修改文件属性。<br>查看属性<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo ls -lh &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf</span><br></pre></td></tr></table></figure><br>修改属性<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod 666 &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf</span><br></pre></td></tr></table></figure><br>用gedit编辑器打开<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo gedit &#x2F;etc&#x2F;modprobe.d&#x2F;blacklist.conf</span><br></pre></td></tr></table></figure><br>在该文件后添加一下几行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blacklist vga16fb</span><br><span class="line">blacklist nouveau</span><br><span class="line">blacklist rivafb</span><br><span class="line">blacklist rivatv</span><br><span class="line">blacklist nvidiafb</span><br></pre></td></tr></table></figure><br>3.开始安装<br>先按Ctrl + Alt + F1到控制台，关闭当前图形环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service lightdm stop</span><br></pre></td></tr></table></figure><br>再安装驱动程序<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod a+x NVIDIA-Linux-x86_64-xxx.run</span><br><span class="line">sudo .&#x2F;NVIDIA-Linux-x86_64-xxx.run -no-x-check -no-nouveau-check -no-opengl-files</span><br></pre></td></tr></table></figure><br>最后重新启动图形环境<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo service lightdm start</span><br></pre></td></tr></table></figure><br>在终端里输入：nvidia-smi ，输出以下图片的代码则安装成功<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/CUDA%26cuDNN/2019051413224071.png" alt></p>
<h2 id="cuda-10-0安装"><a href="#cuda-10-0安装" class="headerlink" title="cuda 10.0安装"></a>cuda 10.0安装</h2><p><a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">官方下载</a><br><a href="https://pan.baidu.com/s/1piTbzIIL3wTx1dCeUDDiOw" target="_blank" rel="noopener">网盘下载</a> 提取码: aarn<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod a+x cuda_10.0.130_410.48_linux.run &#x2F;&#x2F; 获取权限</span><br><span class="line">sudo sh cuda_10.0.130_410.48_linux.run --tmpdir&#x3D;&#x2F;home&#x2F;max&#x2F;temp</span><br></pre></td></tr></table></figure><br>这里加 —tmpdir 主要是直接运行后，会提示空间不足的问题<br>接下来进入英文选择界面按住空格键可以快速浏览<br>在安装过程中选项选择：<br>accept #同意安装<br>n #不安装Driver，因为已安装驱动<strong>（这里需要强调一下）</strong><br>y #安装CUDA Toolkit</p>
<h1 id="安装到默认目录"><a href="#安装到默认目录" class="headerlink" title="安装到默认目录"></a>安装到默认目录</h1><p>y #创建安装目录的软链接<br>n #不复制Samples，因为在安装目录下有/samples</p>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><p>home文件下 ctrl+H显示隐藏文件 打开 .bashrc文件在最后添加<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-10.0&#x2F;bin$&#123;PATH:+:$&#123;PATH&#125;&#125;</span><br><span class="line">export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;cuda-10.0&#x2F;lib64$&#123;LD_LIBRARY_PATH:+:$&#123;LD_LIBRARY_PATH&#125;&#125;</span><br></pre></td></tr></table></figure><br>终端运行如下命令，保存操作<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source ~&#x2F;.bashrc</span><br></pre></td></tr></table></figure><br>检查cuda是否安装成功<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nvcc -V</span><br><span class="line">nvcc --version</span><br></pre></td></tr></table></figure><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/CUDA%26cuDNN/20190514132130343.png" alt></p>
<h2 id="cuDnn-10-0安装"><a href="#cuDnn-10-0安装" class="headerlink" title="cuDnn 10.0安装"></a>cuDnn 10.0安装</h2><p><a href="https://developer.nvidia.com/rdp/cudnn-archive" target="_blank" rel="noopener">官方下载</a><br><a href="https://www.jianguoyun.com/p/DdS0_A4QlZ_3Bhjw8LEC" target="_blank" rel="noopener">网盘下载</a><br>注意：需跟CUDA版本对应<br>切换到下载目录进行解压：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo tar -zxvf .&#x2F;cudnn-10.0-linux-x64-xxx.tgz</span><br></pre></td></tr></table></figure><br>解压下载的文件，可以看到cuda文件夹，在当前目录打开终端，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp cuda&#x2F;include&#x2F;cudnn.h &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;</span><br><span class="line"> </span><br><span class="line">sudo cp cuda&#x2F;lib64&#x2F;libcudnn* &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;</span><br><span class="line"> </span><br><span class="line">sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h</span><br><span class="line"> </span><br><span class="line">sudo chmod a+r &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;lib64&#x2F;libcudnn*</span><br></pre></td></tr></table></figure><br>在终端输入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat &#x2F;usr&#x2F;local&#x2F;cuda&#x2F;include&#x2F;cudnn.h | grep CUDNN_MAJOR -A 2</span><br></pre></td></tr></table></figure><br>如果出现下图所示版本信息，说明安装成功<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/CUDA%26cuDNN/20180815114007852.png" alt></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Ubuntu</tag>
        <tag>CUDA</tag>
        <tag>cuDNN</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu16.04下Tensorflow-gpu安装</title>
    <url>/2019/03/19/Ubuntu16.04%E4%B8%8BTensorflow-gpu%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>在开始之前，请先确定安装好显卡驱动、CUDA、cuDNN，可以参考我的<a href="https://qiyuan-z.github.io/2019/03/19/Ubuntu-16.04下配置GPU版CUDA和cuDNN/">另一篇博客</a><br><a id="more"></a><br>1.安装Numpy<br>推荐安装1.16.0版本，若之前已安装，请先卸载<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip uninstall numpy</span><br></pre></td></tr></table></figure><br>然后执行安装<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install numpy&#x3D;&#x3D;1.16.0</span><br></pre></td></tr></table></figure><br>2.安装Tensorflow-gpu<br>推荐安装1.14.0版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install tensorflow-gpu&#x3D;&#x3D;1.14.0</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Ubuntu</tag>
        <tag>Tensorflow</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下virtualenv的使用与pycharm的基本配置</title>
    <url>/2019/03/19/Ubuntu%E4%B8%8Bvirtualenv%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8Epycharm%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a><a id="more"></a>安装virtualenv</h2><p>virtualenv是 Python 多版本管理的利器，不同版本的开发调试全靠它了（没有多版本尽量也装上吧）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br></pre></td></tr></table></figure></p>
<h2 id="创建一个virtualenv环境"><a href="#创建一个virtualenv环境" class="headerlink" title="创建一个virtualenv环境"></a>创建一个virtualenv环境</h2><p>使用如下语句：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">virtualenv + 路径</span><br></pre></td></tr></table></figure><br>以这种方式创建环境将不包含系统的python包，新的环境里面只有pip、setuptools和wheel这些包，则许多包要用pip重新安装。</p>
<p>若需指定python版本：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">virtualenv –p python3 + 路径</span><br></pre></td></tr></table></figure></p>
<h2 id="激活virtualenv环境"><a href="#激活virtualenv环境" class="headerlink" title="激活virtualenv环境"></a>激活virtualenv环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source 路径&#x2F;bin&#x2F;activate</span><br></pre></td></tr></table></figure>
<p>也可以直接进到所创环境的bin目录中右键终端，运行source activate<br>注意：激活只对当前终端有效，如果新打开了一个终端的话，重新运行上面的命令。 激活后终端前面会多一个(**)的东西，提示当前virtualenv的名称。</p>
<p>激活后可以在当前终端通过python 文件名.py的方式运行python脚本，如果脚本中使用了当前环境中没有的包，将会报错。</p>
<p>可以在激活环境后使用pip安装对应的包。<strong>注意不要使用sudo</strong>，否则包会安装到系统当中去，而不是当前的virtualenv目录中。</p>
<h2 id="退出virtualenv环境"><a href="#退出virtualenv环境" class="headerlink" title="退出virtualenv环境"></a>退出virtualenv环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>
<p>也可直接关闭当前终端。</p>
<h2 id="删除virtualenv环境"><a href="#删除virtualenv环境" class="headerlink" title="删除virtualenv环境"></a>删除virtualenv环境</h2><p>直接删除对应目录即可删除virtualenv环境，不会对系统产生任何影响，所以在virtualenv中可以放心操作。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rm -rvf  + 路径</span><br></pre></td></tr></table></figure><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/virtualenv/5aafafdaa2aca.webp" alt></p>
<h2 id="Pycharm配置"><a href="#Pycharm配置" class="headerlink" title="Pycharm配置"></a>Pycharm配置</h2><p>新建项目<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/virtualenv/5aafb0d3811f2.webp" alt></p>
<ul>
<li><p>New environment using Virtualenv: 将在项目的目录下创建一个virtualenv环境，然后使用它当作当前项目的python解释器，默认不包含系统的python包。<br>相当于： virtualenv + 路径</p>
</li>
<li><p>location:为新建的环境的位置，默认为当前工程下的venv。</p>
</li>
<li><p>Base interpreter:基于系统中的python版本，新建的环境中的python版本与此一致，可以选择python2或者python3, 取决于项目的需要，相当于virtualenv –p python版本 +路径。<br>勾选Inherit global site-packages，包含系统的python包，相当于： virtualenv –system-site-packages + 路径<br>勾选Make available to all projects，下次新建项目的时候会在Existing interpreter中找到这个环境， 可以重复使用这个环境。</p>
</li>
<li><p>Existing interpreter：使用已有的python环境，点击后会出现后面的设置会出现这个界面，分别是virtualenv, conda和系统的python环境。可以选择已有的virtualenv环境，或者直接使用系统的python解释器。 Conda是anaconda(一个科学计算的python发行版)的包管理器，也可以用来建立python环境。</p>
</li>
</ul>
<p>会发现生成的项目中有一个叫venv的文件夹，它实质上和直接用virtualenv创建的一样。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/virtualenv/5aafb2bd99f29.webp" alt><br>可以用virtualenv的管理方法管理它，比如安装numpy，安装之后可以在pycharm正常使用。（注意在virtualenv中<strong>不要使用sudo</strong>）<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/virtualenv/5aafb2bdb011c.webp" alt><br>也可以在pycharm中使用 file-settings-project-project interpreter中管理环境中的python包，可以对该环境下的python包进行删除和安装。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Ubuntu</tag>
        <tag>virtualenv</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下如何添加新用户并增加管理员权限</title>
    <url>/2019/03/19/Ubuntu%E4%B8%8B%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%96%B0%E7%94%A8%E6%88%B7%E5%B9%B6%E5%A2%9E%E5%8A%A0%E7%AE%A1%E7%90%86%E5%91%98%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h2 id="添加新用户"><a href="#添加新用户" class="headerlink" title=" 添加新用户"></a><a id="more"></a> 添加新用户</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo adduser xxx #xxx为用户名</span><br></pre></td></tr></table></figure>
<p>输入密码后，出现如下信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">正在添加用户&quot;xxx&quot;…</span><br><span class="line">正在添加新组&quot;xxx&quot; (1003)…</span><br><span class="line">正在添加新用户&quot;xxx&quot; (1003) 到组&quot;xxx&quot;…</span><br><span class="line">创建主目录&quot;&#x2F;home&#x2F;xxx&quot;…</span><br><span class="line">正在从&quot;&#x2F;etc&#x2F;skel&quot;复制文件…</span><br><span class="line">输入新的 UNIX 密码：</span><br><span class="line">重新输入新的 UNIX 密码：</span><br><span class="line">passwd：已成功更新密码</span><br><span class="line">正在改变 xxx 的用户信息</span><br><span class="line">请输入新值，或直接敲回车以使用默认值</span><br><span class="line">        全名 [ ]：</span><br><span class="line">        房间号码 [ ]：</span><br><span class="line">        工作电话 [ ]：</span><br><span class="line">        家庭电话 [ ]：</span><br><span class="line">        其它 [ ]：</span><br><span class="line">这些信息是否正确？ [Y&#x2F;n] y</span><br></pre></td></tr></table></figure><br>到这里，新用户添加成功。</p>
<h2 id="增加管理员权限"><a href="#增加管理员权限" class="headerlink" title="增加管理员权限"></a>增加管理员权限</h2><p>需要让此用户有root权限，执行命令：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo nano &#x2F;etc&#x2F;sudoers</span><br></pre></td></tr></table></figure><br>往下拉，修改文件并添加：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">xxx ALL&#x3D;(ALL：ALL) ALL #xxx为你之前所创的用户名</span><br></pre></td></tr></table></figure><br>添加完成按下Ctrl + X保存并退出，再次按下Enter,完成<br>现在你可以点击右上角，看到你新创的用户，点击并切换了！</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下安装Pycharm</title>
    <url>/2019/03/19/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85Pycharm/</url>
    <content><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a><a id="more"></a>下载</h2><p>有社区版和专业版，专业版需要激活，社区版免费，我下载的是社区版。<br><a href="https://www.jetbrains.com/pycharm/download/#section=linux" target="_blank" rel="noopener">官方下载</a><br><a href="https://www.jianguoyun.com/p/DfZJG3QQlZ_3Bhj8mrEC" target="_blank" rel="noopener">网盘下载</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>进入download目录，对下载好的Pycharm压缩包进行解压操作，选中文件右键提取到此处即可。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm/u%3D1664510513%2C942693123%26fm%3D173%26app%3D49%26f%3DJPEG.jpg" alt><br>进入解压后的Pycharm文件夹，进入bin目录，可以看到很多文件，其中有一个文件叫做pycharm.sh。也就是下图中所选中的文件：<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm/u%3D101055722%2C4258535600%26fm%3D173%26app%3D49%26f%3DJPEG.jpg" alt><br>此时在bin文件夹下右键打开终端，输入运行命令, 执行Pycharm程序<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.&#x2F;pycharm.sh</span><br></pre></td></tr></table></figure><br>如果提示没有权限，大家可以添加sudo命令进行操作：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo .&#x2F;pycharm.sh</span><br></pre></td></tr></table></figure><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm/u%3D805484803%2C1629350165%26fm%3D173%26app%3D49%26f%3DJPEG.jpg" alt><br>大家点击OK即可进入下一步操作，根据提示的内容进行勾选同意协议，然后点击continue进入下一步，大家可以点击don’t send进入下一步，选择喜欢的界面风格，然后再次点击next进入下一步，直到提示start启动程序。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm/u%3D227808303%2C3066408894%26fm%3D173%26app%3D49%26f%3DJPEG.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm/u%3D22323540%2C1357101677%26fm%3D173%26app%3D49%26f%3DJPEG.jpg" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm/u%3D1914658415%2C2906990210%26fm%3D173%26app%3D49%26f%3DJPEG.jpg" alt><br>为了方便以后的使用，我们可以将Pycharm的图标（快捷键）锁定到启动器。之后不用再去在终端中启动Pycharm了，直接点击图标启动即可。<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/pycharm/u%3D1149108563%2C3867497858%26fm%3D173%26app%3D49%26f%3DJPEG.jpg" alt></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下安装更新pip</title>
    <url>/2019/03/19/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85%E6%9B%B4%E6%96%B0pip/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a><a id="more"></a>安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install python-pip</span><br></pre></td></tr></table></figure>
<p>若同时装有Python2、Python3上条命令装的是pip2，若还需装pip3，则再执行以下命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt install python3-pip</span><br></pre></td></tr></table></figure></p>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>安装成功后进行更新：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pip install --upgrade pip</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo pip3 install --upgrade pip</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu下如何安装搜狗输入法</title>
    <url>/2019/03/19/sougou/</url>
    <content><![CDATA[<h2 id="Ubuntu系统配置"><a href="#Ubuntu系统配置" class="headerlink" title=" Ubuntu系统配置"></a><a id="more"></a> Ubuntu系统配置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">system settings-&gt;language support-&gt;install&#x2F;remove languages</span><br></pre></td></tr></table></figure>
<p>在弹出的菜单中选择Chinese(simplified),点击apply<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/sougou/20180729142927736.png" alt><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/sougou/20180729142927712.png" alt></p>
<h2 id="配置输入法框架"><a href="#配置输入法框架" class="headerlink" title="配置输入法框架"></a>配置输入法框架</h2><p>搜狗输入法是建立在fcitx框架之上的，所以要将输入法框架选择为fictx<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/sougou/20180729142927666.png" alt><br>注意：如果没有fcitx选项，那么你就需要安装fcitx框架之后在进行配置，安装方法如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:fcitx-team&#x2F;nightly   &#x2F;&#x2F;添加FCITX仓库</span><br><span class="line"></span><br><span class="line">sudo apt-get update                              &#x2F;&#x2F;更新仓库</span><br><span class="line"></span><br><span class="line">sudo apt-get install fcitx                       &#x2F;&#x2F;安装fcitx输入法框架</span><br></pre></td></tr></table></figure><br>配置好输入法框架之后，重启ubuntu系统。重启之后如果配置成功，在任务栏的右上角会出现fcitx的设置选项（一个小键盘图标）<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/sougou/20180729142927651.png" alt></p>
<h2 id="去搜狗官网下载输入法for-Linux"><a href="#去搜狗官网下载输入法for-Linux" class="headerlink" title="去搜狗官网下载输入法for Linux"></a>去搜狗官网下载输入法for Linux</h2><p><a href="https://pinyin.sogou.com/linux/" target="_blank" rel="noopener">官方下载</a><br><a href="https://www.jianguoyun.com/p/DeShNo0QlZ_3Bhic5rAC" target="_blank" rel="noopener">网盘下载</a><br>下载完成之后，在download目录下找到下载的文件，双击安装即可，点击install即可<br>或者在终端的命令窗口中输入如下的指令安装：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i 安装包名称.deb</span><br></pre></td></tr></table></figure><br>如果在安装过程中出现相关依赖文件的错误。则需要先安装其依赖的软件包<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/sougou/Snipaste_2019-12-13_14-33-14.jpg" alt><br>在终端窗口来执行以下命令，安装缺少的依赖文件:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get -f install</span><br></pre></td></tr></table></figure><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/sougou/Snipaste_2019-12-13_14-33-49.jpg" alt><br>安装完成后，首先打开右上角系统设置，选择第一行的最后一个选项”Text Entry“，点击左下角的+号，在打开的窗口中找到搜狗输入法Sogou pinyin点击Add添加进去<br>仅显示当前语言一定要去掉那个勾，才可以找到搜狗输入法，然后添加就是<br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/sougou/2019050512074094.png" alt><br>这时就可以在右上方小键盘选择搜狗输入法了！</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu下 teamviewer的安装方法</title>
    <url>/2019/03/19/ubuntu%E4%B8%8B-teamviewer%E7%9A%84%E5%AE%89%E8%A3%85%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="去官网下载安装包"><a href="#去官网下载安装包" class="headerlink" title=" 去官网下载安装包"></a><a id="more"></a> 去官网下载安装包</h2><p><a href="https://www.teamviewer.com/zhcn/download/linux/" target="_blank" rel="noopener">官网链接</a><br><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/teamviewer/20180128120840387.png" alt></p>
<h2 id="在命令行进行安装"><a href="#在命令行进行安装" class="headerlink" title="在命令行进行安装"></a>在命令行进行安装</h2><p>（在下载文件夹下打开命令行，输入：sudo dpkg -i  teamviewer_13.0.6634_amd64.deb）（teamviewer_13.0.6634_amd64.deb为安装包名，根据自己安装包）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i  teamviewer_13.0.6634_amd64.deb</span><br></pre></td></tr></table></figure></p>
<h2 id="安装出错，一行语句搞定依赖关系"><a href="#安装出错，一行语句搞定依赖关系" class="headerlink" title="安装出错，一行语句搞定依赖关系"></a>安装出错，一行语句搞定依赖关系</h2><p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/teamviewer/20180128120923823.png" alt><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure></p>
<h2 id="再次安装"><a href="#再次安装" class="headerlink" title="再次安装"></a>再次安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i  teamviewer_13.0.6634_amd64.deb</span><br></pre></td></tr></table></figure>
<h2 id="打开teamview"><a href="#打开teamview" class="headerlink" title="打开teamview"></a>打开teamview</h2><p><img src="https://blog-1300912400.cos.ap-shanghai.myqcloud.com/teamviewer/20180128121156354.png" alt><br>或用命令行启动：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo teamviewer --daemon start</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
        <tag>Teamviewer</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决出现 unable to resolve host 问题</title>
    <url>/2019/03/19/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E5%87%BA%E7%8E%B0-unable-to-resolve-host-%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h2 id><a href="#" class="headerlink" title></a><a id="more"></a></h2><p>Ubuntu环境，有时候执行sudo 就出现这个警告讯息: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo: unable to resolve host abc</span><br></pre></td></tr></table></figure>
<p>虽然sudo 还是可以正常执行, 但是看到这样的通知还是会觉得烦，怎么去除这个警告呢？</p>
<p>这个警告是因为系统找不到一个叫做 abc的hostname </p>
<p>通过 修改 /etc/hosts 设定, 可以解决<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nano &#x2F;etc&#x2F;hostname</span><br></pre></td></tr></table></figure></p>
<p>在127.0.0.1 localhost 后面加上主机名称(hostname) 即可:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">127.0.0.1 localhost abc</span><br></pre></td></tr></table></figure><br>问题解决！</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵分析（刘丁酉）课后答案及历年试卷</title>
    <url>/2019/03/19/%E7%9F%A9%E9%98%B5%E5%88%86%E6%9E%90%EF%BC%88%E5%88%98%E4%B8%81%E9%85%89%EF%BC%89%E8%AF%BE%E5%90%8E%E7%AD%94%E6%A1%88%E5%8F%8A%E5%8E%86%E5%B9%B4%E8%AF%95%E5%8D%B7/</url>
    <content><![CDATA[<p>考虑到刘丁酉版本只有部分习题的解答，还不够详细，于是我在学习过程中，将每道习题做了一遍，并记录了下来，希望能对学习矩阵分析的同学给予一定的参考。由于本人仍在学习阶段，难免答案会有做错的地方，希望大家不要尽信答案，只当作一个思路上的参考来看。顺便附赠历年的卷子与答案（看了一遍历年的卷子，答案有错!@-@）<br><a id="more"></a><br>下载地址：<a href="https://www.jianguoyun.com/p/DQe8_9kQlZ_3Bhid4LYC" target="_blank" rel="noopener">点击下载</a></p>
]]></content>
      <categories>
        <category>资源分享</category>
      </categories>
      <tags>
        <tag>矩阵分析</tag>
      </tags>
  </entry>
</search>
